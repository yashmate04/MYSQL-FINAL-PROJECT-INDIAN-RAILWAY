-- Single line comment 

/* 
multi 
line 
comment
*/
-- --------------------------------------------- Database Analysis -----------------------------------------------------

-- Table 1: Stations â€“ stationid,StationName, Code, City, State, PlatformCount,OpenedYear,Zone,Electrified, Remarks
-- Table 2: Trains- TrainNumber, TrainName, SourceStation, DestinationStation, TotalCoaches, MaxSpeed, Category, RunningDays, Status
-- Table 3: Passengers- FirstName, LastName, Age, Gender, Phone, Email, IDProofType, IDProofNumber, Nationality                                         
-- Table 4: Bookings - PassengerID, TrainID, CoachType, SeatNumber, JourneyDate, BookingDate, BookingStatus, PaymentMode, Fare
-- Table 5: Tickets - BookingID, PassengerID, TrainID, CoachNumber, SeatNumber, TicketType, TicketStatus, IssueDate, Fare
-- Table 6:  Routes - TrainID, SourceStation, DestinationStation, TotalDistance, TotalStops, StartTime, EndTime, RouteStatus, Remarks
-- Table 7: Coaches - TrainID, CoachNumber, CoachType, Capacity, OccupiedSeats, AvailableSeats, AC, PantryAvailable, Remarks
-- Table 8: Seats- CoachID, SeatNumber, SeatType, IsWindowSeat, IsBooked, PassengerID, BookingID, TrainID, Remarks
-- Table 9: Staff - Name, Role, Department, TrainID, Shift, Contact, Email, JoinDate, Remarks
-- Table 10:Engineers -  Name, Specialization, Department, TrainID, Contact, Email, AssignedDate, Certification, Remarks
-- Table 11: TrainSchedules - TrainID, RouteID, DepartureDate, DepartureTime, ArrivalDate, ArrivalTime, PlatformNumber, Status, Remarks
-- Table 12: Catering - TrainID, VendorID, StaffID, MealType, Menu, Quantity, ServiceTime, Status, Remarks
-- Table 13: Vendors - Name, Contact, Email, ServiceType, LicenseNo, Address, ContractStart, ContractEnd, Remarks
-- Table 14:  MaintenanceLogs - TrainID, EngineerID, Date, Time, IssueReported, ActionTaken, Status, NextDue, Remarks
-- Table 15:  Complaints - PassengerID, TrainID, CoachID, Date, Time, Type, Description, Status, Remarks 
-- Table 16: Cargo - BookingID, TrainID, DepartureStation, ArrivalStation, Weight, GoodsType, DepartureDate, ArrivalDate, Status
-- Table 17: Parcels - BookingID, SenderName, ReceiverName, SourceStation, DestinationStation, Weight, DispatchDate, DeliveryDate, Status
-- Table 18: FreightBookings - CustomerName, GoodsType, Quantity, Weight, SourceStation, DestinationStation, BookingDate, DeliveryDate, Status
-- Table 19: Signals - RouteID, SignalType, Location, Status, LastCheckDate, NextCheckDate, MaintenanceStatus, MaintainedBy, Remarks
-- Table 20: Tracks - RouteID, SectionName, Length_KM, GaugeType, ConditionStatus, LastInspection, NextInspection, MaintainedBy, Remarks 
-- Table 21: Bridges - TrackID, BridgeName, Location, Length_M, Type, ConditionStatus, LastInspection, NextInspection, Remarks 
-- Table 22: LevelCrossings - TrackID, Location, CrossingType, GateStatus, AttendantName, ContactNumber, LastInspection, NextInspection, Remarks 
-- Table 23:  ControlRooms - Location, InCharge, ContactNumber, Shift, NoOfStaff, EquipmentStatus, LastAudit, NextAudit, Remarks 
-- Table 24: Timetables - TrainID, RouteID, DepartureStation, ArrivalStation, DepartureTime, ArrivalTime, Frequency, EffectiveFrom, EffectiveTo
-- Table 25:  Announcements - Title, Description, Date, Time, Station, AffectedTrains, ValidFrom, ValidTo, Status

-- --------------------------------------------- Database Queries -----------------------------------------------------

-- to create database Consulting Firm Management 
create database IndianRailway;

-- to work on database we need to use it 
use IndianRailway;

-- Delete all records use it
Drop Table IndianRailway;
-- --------------------------------------------- Database Analysis -----------------------------------------------------

-- Table 1: Stations
CREATE TABLE Stations (
    StationID INT PRIMARY KEY AUTO_INCREMENT,
    StationName VARCHAR(100),
    Code CHAR(5),
    City VARCHAR(50),
    State VARCHAR(50),
    PlatformCount INT,
    Zone VARCHAR(50),
    OpenedYear YEAR,
    Electrified BOOLEAN,
    Remarks TEXT
);

-- Insert 20 records into Stations
INSERT INTO Stations (stationid,StationName, Code, City, State, PlatformCount,OpenedYear,Zone,Electrified, Remarks)
VALUES
('Mumbai CST', 'CSTM', 'Mumbai', 'Maharashtra', 18, 'Central', 1853, TRUE, 'Major terminus'),
('Howrah Jn', 'HWH', 'Kolkata', 'West Bengal', 23, 'Eastern', 1854, TRUE, 'Oldest station'),
('Chennai Central', 'MAS', 'Chennai', 'Tamil Nadu', 17, 'Southern', 1873, TRUE, 'Busy hub'),
('New Delhi', 'NDLS', 'Delhi', 'Delhi', 16, 'Northern', 1926, TRUE, 'Capital station'),
('Secunderabad', 'SC', 'Hyderabad', 'Telangana', 10, 'South Central', 1874, TRUE, 'Twin city station'),
('Ahmedabad', 'ADI', 'Ahmedabad', 'Gujarat', 12, 'Western', 1864, TRUE, 'Major junction'),
('Lucknow NR', 'LKO', 'Lucknow', 'Uttar Pradesh', 9, 'Northern', 1867, TRUE, 'State capital'),
('Kanpur Central', 'CNB', 'Kanpur', 'Uttar Pradesh', 10, 'North Central', 1930, TRUE, 'Busy station'),
('Patna Jn', 'PNBE', 'Patna', 'Bihar', 10, 'East Central', 1862, TRUE, 'Main Bihar hub'),
('Jaipur', 'JP', 'Jaipur', 'Rajasthan', 7, 'North Western', 1875, TRUE, 'Pink city station'),
('Bhopal', 'BPL', 'Bhopal', 'Madhya Pradesh', 8, 'West Central', 1887, TRUE, 'Capital station'),
('Nagpur', 'NGP', 'Nagpur', 'Maharashtra', 9, 'Central', 1867, TRUE, 'Geographical center'),
('Visakhapatnam', 'VSKP', 'Visakhapatnam', 'Andhra Pradesh', 8, 'East Coast', 1896, TRUE, 'Port city'),
('Kolkata Sealdah', 'SDAH', 'Kolkata', 'West Bengal', 20, 'Eastern', 1869, TRUE, 'Busy suburban'),
('Bengaluru City', 'SBC', 'Bengaluru', 'Karnataka', 10, 'South Western', 1864, TRUE, 'IT hub station'),
('Pune', 'PUNE', 'Pune', 'Maharashtra', 6, 'Central', 1858, TRUE, 'Tech city'),
('Coimbatore', 'CBE', 'Coimbatore', 'Tamil Nadu', 5, 'Southern', 1873, TRUE, 'Industrial city'),
('Guwahati', 'GHY', 'Guwahati', 'Assam', 8, 'Northeast Frontier', 1900, TRUE, 'Gateway to NE'),
('Jodhpur', 'JU', 'Jodhpur', 'Rajasthan', 5, 'North Western', 1885, TRUE, 'Desert city'),
('Agra Cantt', 'AGC', 'Agra', 'Uttar Pradesh', 7, 'North Central', 1904, TRUE, 'Taj city');

-- display table data
Select * from Stations;

-- to delete values from table 
truncate table Stations;

-- to delete table
drop table Stations;

-- 1. DDL: Add a column for StationType
ALTER TABLE Stations ADD COLUMN StationType VARCHAR(50);

-- 2. DDL: Modify Zone column length
ALTER TABLE Stations MODIFY COLUMN Zone VARCHAR(100);

-- 3. DDL: Drop Remarks column
ALTER TABLE Stations DROP COLUMN Remarks;

-- 4. DML: Insert a new station
INSERT INTO Stations (StationName, Code, City, State, PlatformCount, Zone, OpenedYear, Electrified)
VALUES ('Thane', 'TNA', 'Thane', 'Maharashtra', 7, 'Central', 1853, TRUE);

-- 5. DML: Update PlatformCount for StationID 5
UPDATE Stations SET PlatformCount=12 WHERE StationID=5;

-- 6. DML: Delete station with StationID 20
DELETE FROM Stations WHERE StationID=20;

-- 7. DQL: Select all stations
SELECT * FROM Stations;

-- 8. DQL: Select StationName, City, State, PlatformCount
SELECT StationName, City, State, PlatformCount FROM Stations;

-- 9. DQL: Select stations in Maharashtra
SELECT * FROM Stations WHERE State='Maharashtra';

-- 10. DQL: Count stations by Zone
SELECT Zone, COUNT(*) AS TotalStations FROM Stations GROUP BY Zone;

-- 11. DQL: Select stations opened before 1900
SELECT * FROM Stations WHERE OpenedYear < 1900;

-- 12. DQL: Order stations by PlatformCount descending
SELECT * FROM Stations ORDER BY PlatformCount DESC;

-- 13. DQL: Select distinct states having stations
SELECT DISTINCT State FROM Stations;

-- 14. DQL: Select stations which are electrified
SELECT * FROM Stations WHERE Electrified=TRUE;

-- 15. DQL: Select stations with PlatformCount between 5 and 10
SELECT * FROM Stations WHERE PlatformCount BETWEEN 5 AND 10;

-- 16. Constraint: Make Code column NOT NULL
ALTER TABLE Stations MODIFY COLUMN Code CHAR(5) NOT NULL;

-- 17. Constraint: Add UNIQUE constraint on Code
ALTER TABLE Stations ADD CONSTRAINT unique_station_code UNIQUE (Code);

-- 18. Operator: Select stations in Maharashtra or West Bengal
SELECT * FROM Stations WHERE State IN ('Maharashtra', 'West Bengal');

-- 19. Operator: Select stations not in Rajasthan
SELECT * FROM Stations WHERE State <> 'Rajasthan';

-- 20. Operator: Select stations opened between 1850 and 1900
SELECT * FROM Stations WHERE OpenedYear BETWEEN 1850 AND 1900;


-- Table 2: Trains
CREATE TABLE Trains (
    TrainID INT PRIMARY KEY AUTO_INCREMENT,
    TrainNumber VARCHAR(10),
    TrainName VARCHAR(100),
    SourceStation VARCHAR(50),
    DestinationStation VARCHAR(50),
    TotalCoaches INT,
    MaxSpeed INT,
    Category VARCHAR(50),
    RunningDays VARCHAR(20),
    Status VARCHAR(20)
);

-- Insert 20 records into Trains
INSERT INTO Trains (TrainNumber, TrainName, SourceStation, DestinationStation, TotalCoaches, MaxSpeed, Category, RunningDays, Status)
VALUES
('12951', 'Mumbai Rajdhani', 'Mumbai CST', 'New Delhi', 20, 140, 'Rajdhani', 'Daily', 'Running'),
('12301', 'Howrah Rajdhani', 'Howrah', 'New Delhi', 20, 140, 'Rajdhani', 'Daily', 'Running'),
('12007', 'Shatabdi Express', 'Chennai', 'Mysuru', 16, 130, 'Shatabdi', 'Daily', 'Running'),
('12627', 'Karnataka Exp', 'Bengaluru', 'New Delhi', 24, 110, 'Superfast', 'Daily', 'Running'),
('12723', 'Telangana Exp', 'Hyderabad', 'New Delhi', 22, 110, 'Superfast', 'Daily', 'Running'),
('12953', 'August Kranti Rajdhani', 'Mumbai CST', 'Hazrat Nizamuddin', 20, 130, 'Rajdhani', 'Daily', 'Running'),
('12295', 'Sanghamitra Exp', 'Bengaluru', 'Patna', 24, 110, 'Superfast', 'Daily', 'Running'),
('12615', 'Grand Trunk Exp', 'Chennai', 'New Delhi', 24, 110, 'Mail/Express', 'Daily', 'Running'),
('12511', 'Rapti Sagar Exp', 'Gorakhpur', 'Thiruvananthapuram', 22, 110, 'Mail/Express', 'Daily', 'Running'),
('12259', 'Sealdah Duronto', 'Sealdah', 'New Delhi', 20, 130, 'Duronto', 'Daily', 'Running'),
('12430', 'Rajdhani Exp', 'New Delhi', 'Lucknow', 16, 130, 'Rajdhani', 'Daily', 'Running'),
('12859', 'Gitanjali Exp', 'Mumbai CST', 'Howrah', 24, 110, 'Superfast', 'Daily', 'Running'),
('12801', 'Purushottam Exp', 'Puri', 'New Delhi', 22, 110, 'Superfast', 'Daily', 'Running'),
('12009', 'Shatabdi Exp', 'Mumbai CST', 'Ahmedabad', 16, 130, 'Shatabdi', 'Daily', 'Running'),
('12621', 'Tamil Nadu Exp', 'Chennai', 'New Delhi', 24, 110, 'Superfast', 'Daily', 'Running'),
('12903', 'Golden Temple Mail', 'Mumbai CST', 'Amritsar', 24, 110, 'Mail/Express', 'Daily', 'Running'),
('12171', 'LTT Haridwar AC Exp', 'Mumbai LTT', 'Haridwar', 20, 110, 'AC Exp', 'Weekly', 'Running'),
('12561', 'Swarna Jayanti Exp', 'New Delhi', 'Ranchi', 20, 110, 'Superfast', 'Daily', 'Running'),
('12625', 'Kerala Exp', 'Thiruvananthapuram', 'New Delhi', 24, 110, 'Superfast', 'Daily', 'Running'),
('12909', 'Garib Rath Exp', 'Mumbai Bandra', 'Hazrat Nizamuddin', 20, 120, 'Garib Rath', 'Daily', 'Running');

-- display table data
Select * from Trains;

-- to delete values from table 
truncate table Trains;

-- to delete table
drop table Trains;
-- 1. DDL: Add a column for TrainType
ALTER TABLE Trains ADD COLUMN TrainType VARCHAR(50);

-- 2. DDL: Modify MaxSpeed column to allow larger speeds
ALTER TABLE Trains MODIFY COLUMN MaxSpeed INT(5);

-- 3. DDL: Drop Status column
ALTER TABLE Trains DROP COLUMN Status;

-- 4. DML: Insert a new train
INSERT INTO Trains (TrainNumber, TrainName, SourceStation, DestinationStation, TotalCoaches, MaxSpeed, Category, RunningDays)
VALUES ('12999', 'Coastal Exp', 'Mumbai CST', 'Goa', 22, 110, 'Superfast', 'Daily');

-- 5. DML: Update TotalCoaches for TrainID 5
UPDATE Trains SET TotalCoaches=24 WHERE TrainID=5;

-- 6. DML: Delete train with TrainID 20
DELETE FROM Trains WHERE TrainID=20;

-- 7. DQL: Select all trains
SELECT * FROM Trains;

-- 8. DQL: Select TrainName, SourceStation, DestinationStation
SELECT TrainName, SourceStation, DestinationStation FROM Trains;

-- 9. DQL: Select trains running from Mumbai CST
SELECT * FROM Trains WHERE SourceStation='Mumbai CST';

-- 10. DQL: Count trains by Category
SELECT Category, COUNT(*) AS TotalTrains FROM Trains GROUP BY Category;

-- 11. DQL: Select trains with MaxSpeed above 120
SELECT * FROM Trains WHERE MaxSpeed > 120;

-- 12. DQL: Order trains by TotalCoaches descending
SELECT * FROM Trains ORDER BY TotalCoaches DESC;

-- 13. DQL: Select distinct categories
SELECT DISTINCT Category FROM Trains;

-- 14. DQL: Select trains running on Daily schedule
SELECT * FROM Trains WHERE RunningDays='Daily';

-- 15. DQL: Select trains with TotalCoaches between 20 and 24
SELECT * FROM Trains WHERE TotalCoaches BETWEEN 20 AND 24;

-- 16. Constraint: Make TrainNumber NOT NULL
ALTER TABLE Trains MODIFY COLUMN TrainNumber VARCHAR(10) NOT NULL;

-- 17. Constraint: Add UNIQUE constraint on TrainNumber
ALTER TABLE Trains ADD CONSTRAINT unique_train_number UNIQUE (TrainNumber);

-- 18. Operator: Select trains from Mumbai CST or Howrah
SELECT * FROM Trains WHERE SourceStation IN ('Mumbai CST', 'Howrah');

-- 19. Operator: Select trains not going to New Delhi
SELECT * FROM Trains WHERE DestinationStation <> 'New Delhi';

-- 20. Operator: Select trains with TotalCoaches between 16 and 22
SELECT * FROM Trains WHERE TotalCoaches BETWEEN 16 AND 22;



-- Table 3: Passengers
CREATE TABLE Passengers (
    PassengerID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Age INT,
    Gender CHAR(1),
    Phone VARCHAR(15),
    Email VARCHAR(100),
    IDProofType VARCHAR(50),
    IDProofNumber VARCHAR(50),
    Nationality VARCHAR(50)
);

-- Insert 20 records into Passengers
INSERT INTO Passengers (FirstName, LastName, Age, Gender, Phone, Email, IDProofType, IDProofNumber, Nationality)
VALUES
('Rajesh', 'Sharma', 35, 'M', '9876543210', 'rajesh@gmail.com', 'Aadhaar', '1234-5678-9012', 'Indian'),
('Priya', 'Verma', 28, 'F', '8765432109', 'priya@gmail.com', 'Passport', 'M1234567', 'Indian'),
('Amit', 'Kumar', 40, 'M', '7654321098', 'amitk@gmail.com', 'PAN', 'ABCDE1234F', 'Indian'),
('Sunita', 'Singh', 32, 'F', '6543210987', 'sunita@yahoo.com', 'Aadhaar', '2345-6789-0123', 'Indian'),
('Vikram', 'Joshi', 45, 'M', '5432109876', 'vikramj@hotmail.com', 'Passport', 'N9876543', 'Indian'),
('Meena', 'Rao', 29, 'F', '4321098765', 'meena@gmail.com', 'Aadhaar', '3456-7890-1234', 'Indian'),
('Anil', 'Patel', 38, 'M', '3210987654', 'anilp@gmail.com', 'Voter ID', 'MH1234567', 'Indian'),
('Sneha', 'Desai', 26, 'F', '2109876543', 'sneha@gmail.com', 'Aadhaar', '4567-8901-2345', 'Indian'),
('Ravi', 'Nair', 42, 'M', '1098765432', 'ravinair@gmail.com', 'PAN', 'XYZAB1234C', 'Indian'),
('Kiran', 'Das', 30, 'M', '1987654321', 'kiran.das@gmail.com', 'Aadhaar', '5678-9012-3456', 'Indian'),
('Deepa', 'Mehta', 31, 'F', '9876541230', 'deepa@gmail.com', 'Passport', 'P9876543', 'Indian'),
('Ajay', 'Bansal', 39, 'M', '8765432101', 'ajayb@gmail.com', 'PAN', 'PQRST1234Z', 'Indian'),
('Ruchi', 'Khatri', 27, 'F', '7654321012', 'ruchi.khatri@gmail.com', 'Aadhaar', '6789-0123-4567', 'Indian'),
('Suresh', 'Yadav', 41, 'M', '6543210123', 'sureshy@yahoo.com', 'Voter ID', 'DL2345678', 'Indian'),
('Neha', 'Mishra', 33, 'F', '5432101234', 'neham@gmail.com', 'Aadhaar', '7890-1234-5678', 'Indian'),
('Ashok', 'Gupta', 44, 'M', '4321012345', 'ashokg@hotmail.com', 'Passport', 'Q1234567', 'Indian'),
('Kavita', 'Kapoor', 25, 'F', '3210123456', 'kavitak@gmail.com', 'Aadhaar', '8901-2345-6789', 'Indian'),
('Nitin', 'Rana', 37, 'M', '2101234567', 'nitinr@gmail.com', 'PAN', 'LMNOP1234Y', 'Indian'),
('Geeta', 'Pillai', 29, 'F', '1012345678', 'geetap@gmail.com', 'Aadhaar', '9012-3456-7890', 'Indian'),
('Rohit', 'Saxena', 36, 'M', '9123456789', 'rohit.saxena@gmail.com', 'Voter ID', 'UP3456789', 'Indian');

-- display table data
Select * from Passengers;

-- to delete values from table 
truncate table Passengers;

-- to delete table
drop table Passengers;

-- 1. DDL: Add a new column
ALTER TABLE Passengers ADD COLUMN Address VARCHAR(100);

-- 2. DDL: Modify column size
ALTER TABLE Passengers MODIFY COLUMN Phone VARCHAR(20);

-- 3. DDL: Drop a column
ALTER TABLE Passengers DROP COLUMN Address;

-- 4. DML: Insert a new passenger
INSERT INTO Passengers (FirstName, LastName, Age, Gender, Phone, Email, IDProofType, IDProofNumber, Nationality)
VALUES ('Arjun', 'Kulkarni', 29, 'M', '9988776655', 'arjun@gmail.com', 'Aadhaar', '1111-2222-3333', 'Indian');

-- 5. DML: Update passenger email
UPDATE Passengers SET Email = 'updatedemail@gmail.com' WHERE PassengerID = 1;

-- 6. DML: Delete passenger by ID
DELETE FROM Passengers WHERE PassengerID = 2;

-- 7. DQL: Select all records
SELECT * FROM Passengers;

-- 8. DQL: Select passengers older than 35
SELECT FirstName, LastName, Age FROM Passengers WHERE Age > 35;

-- 9. DQL: Use ORDER BY
SELECT FirstName, LastName, Age FROM Passengers ORDER BY Age DESC;

-- 10. DQL: Use LIKE operator
SELECT FirstName, LastName FROM Passengers WHERE FirstName LIKE 'A%';

-- 11. DQL: Use IN operator
SELECT FirstName, Age FROM Passengers WHERE Age IN (25, 30, 35);

-- 12. DQL: Use BETWEEN
SELECT FirstName, Age FROM Passengers WHERE Age BETWEEN 30 AND 40;

-- 13. DQL: Use aggregate function COUNT
SELECT Gender, COUNT(*) AS Total FROM Passengers GROUP BY Gender;

-- 14. DQL: Use aggregate function AVG
SELECT AVG(Age) AS AverageAge FROM Passengers;

-- 15. DQL: Use alias
SELECT FirstName AS FName, LastName AS LName FROM Passengers;

-- 16. DQL: Use DISTINCT
SELECT DISTINCT Nationality FROM Passengers;

-- 17. Subquery: Find passengers older than average age
SELECT FirstName, Age FROM Passengers WHERE Age > (SELECT AVG(Age) FROM Passengers);

-- 18. Clause: LIMIT
SELECT * FROM Passengers LIMIT 5;

-- 19. Cascades: Create table with cascade
CREATE TABLE PassengerLogs (
    LogID INT PRIMARY KEY AUTO_INCREMENT,
    PassengerID INT,
    Action VARCHAR(50),
    FOREIGN KEY (PassengerID) REFERENCES Passengers(PassengerID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 20. Operator: Use OR
SELECT FirstName, LastName, Age FROM Passengers WHERE Age < 25 OR Age > 40;


-- Table 4: Bookings
CREATE TABLE Bookings(
    BookingID INT PRIMARY KEY AUTO_INCREMENT,
    PassengerID INT,
    TrainID INT,
    CoachType VARCHAR(20),
    SeatNumber VARCHAR(10),
    JourneyDate DATE,
    BookingDate DATE,
    BookingStatus VARCHAR(20),
    PaymentMode VARCHAR(20),
    Fare DECIMAL(10,2)
);

-- Insert 20 sample records into Bookings
INSERT INTO Bookings (PassengerID, TrainID, CoachType, SeatNumber, JourneyDate, BookingDate, BookingStatus, PaymentMode, Fare)
 VALUES
(1, 1, 'Sleeper', 'S1-23', '2025-07-20', '2025-07-10', 'Confirmed', 'UPI', 850.00),
(2, 2, 'AC 2 Tier', 'A2-15', '2025-07-21', '2025-07-11', 'Confirmed', 'Credit Card', 1450.00),
(3, 3, 'AC Chair Car', 'C1-10', '2025-07-22', '2025-07-12', 'Confirmed', 'Debit Card', 950.00),
(4, 4, 'Sleeper', 'S2-35', '2025-07-23', '2025-07-13', 'Waiting', 'Net Banking', 780.00),
(5, 5, 'AC 3 Tier', 'B1-20', '2025-07-24', '2025-07-14', 'Confirmed', 'UPI', 1250.00),
(6, 6, 'Sleeper', 'S3-18', '2025-07-25', '2025-07-15', 'Confirmed', 'Cash', 900.00),
(7, 7, 'AC 2 Tier', 'A1-05', '2025-07-26', '2025-07-16', 'Confirmed', 'Credit Card', 1500.00),
(8, 8, 'Sleeper', 'S4-12', '2025-07-27', '2025-07-17', 'Cancelled', 'UPI', 850.00),
(9, 9, 'AC 3 Tier', 'B2-30', '2025-07-28', '2025-07-18', 'Confirmed', 'Debit Card', 1200.00),
(10, 10, 'AC Chair Car', 'C2-08', '2025-07-29', '2025-07-19', 'Confirmed', 'UPI', 970.00),
(11, 1, 'Sleeper', 'S1-24', '2025-07-30', '2025-07-20', 'Confirmed', 'Net Banking', 880.00),
(12, 2, 'AC 2 Tier', 'A2-16', '2025-07-31', '2025-07-21', 'Waiting', 'UPI', 1470.00),
(13, 3, 'AC Chair Car', 'C1-11', '2025-08-01', '2025-07-22', 'Confirmed', 'Credit Card', 960.00),
(14, 4, 'Sleeper', 'S2-36', '2025-08-02', '2025-07-23', 'Confirmed', 'Debit Card', 770.00),
(15, 5, 'AC 3 Tier', 'B1-21', '2025-08-03', '2025-07-24', 'Confirmed', 'UPI', 1240.00),
(16, 6, 'Sleeper', 'S3-19', '2025-08-04', '2025-07-25', 'Cancelled', 'Net Banking', 890.00),
(17, 7, 'AC 2 Tier', 'A1-06', '2025-08-05', '2025-07-26', 'Confirmed', 'Credit Card', 1490.00),
(18, 8, 'Sleeper', 'S4-13', '2025-08-06', '2025-07-27', 'Confirmed', 'UPI', 860.00),
(19, 9, 'AC 3 Tier', 'B2-31', '2025-08-07', '2025-07-28', 'Waiting', 'Debit Card', 1220.00),
(20, 10, 'AC Chair Car', 'C2-09', '2025-08-08', '2025-07-29', 'Confirmed', 'Credit Card', 980.00);

-- display table data
Select * from Bookings;

-- to delete values from table 
truncate table Bookings;

-- to delete table
drop table Bookings;

-- 1. DDL: Add a new column
ALTER TABLE Bookings ADD COLUMN TravelClass VARCHAR(20);

-- 2. DDL: Modify column type
ALTER TABLE Bookings MODIFY COLUMN Fare DECIMAL(12,2);

-- 3. DDL: Drop a column
ALTER TABLE Bookings DROP COLUMN TravelClass;

-- 4. DML: Insert a new booking
INSERT INTO Bookings (PassengerID, TrainID, CoachType, SeatNumber, JourneyDate, BookingDate, BookingStatus, PaymentMode, Fare)
VALUES (21, 11, 'AC 3 Tier', 'B3-10', '2025-08-10', '2025-08-01', 'Confirmed', 'UPI', 1300.00);

-- 5. DML: Update booking status
UPDATE Bookings SET BookingStatus = 'Cancelled' WHERE BookingID = 1;

-- 6. DML: Delete a booking by ID
DELETE FROM Bookings WHERE BookingID = 2;

-- 7. DQL: Select all bookings
SELECT * FROM Bookings;

-- 8. DQL: Select confirmed bookings
SELECT BookingID, PassengerID, TrainID FROM Bookings WHERE BookingStatus = 'Confirmed';

-- 9. DQL: Order bookings by Fare descending
SELECT BookingID, Fare FROM Bookings ORDER BY Fare DESC;

-- 10. DQL: Use LIKE to find seat numbers starting with 'S1'
SELECT BookingID, SeatNumber FROM Bookings WHERE SeatNumber LIKE 'S1%';

-- 11. DQL: Use IN operator
SELECT BookingID, PaymentMode FROM Bookings WHERE PaymentMode IN ('UPI','Cash');

-- 12. DQL: Use BETWEEN for fare range
SELECT BookingID, Fare FROM Bookings WHERE Fare BETWEEN 800 AND 1200;

-- 13. DQL: Aggregate function SUM
SELECT SUM(Fare) AS TotalRevenue FROM Bookings WHERE BookingStatus = 'Confirmed';

-- 14. DQL: Aggregate function COUNT by status
SELECT BookingStatus, COUNT(*) AS TotalBookings FROM Bookings GROUP BY BookingStatus;

-- 15. DQL: Use alias
SELECT BookingID AS B_ID, PassengerID AS P_ID, Fare AS TicketFare FROM Bookings;

-- 16. DQL: DISTINCT payment modes
SELECT DISTINCT PaymentMode FROM Bookings;

-- 17. Subquery: Get bookings with fare above average
SELECT BookingID, Fare FROM Bookings WHERE Fare > (SELECT AVG(Fare) FROM Bookings);

-- 18. Clause: LIMIT 5
SELECT * FROM Bookings LIMIT 5;

-- 19. Cascades: Create log table with cascade
CREATE TABLE BookingLogs (
    LogID INT PRIMARY KEY AUTO_INCREMENT,
    BookingID INT,
    Action VARCHAR(50),
    FOREIGN KEY (BookingID) REFERENCES Bookings(BookingID) ON DELETE CASCADE ON UPDATE CASCADE
);

-- 20. Operator: Use OR
SELECT BookingID, Fare, BookingStatus FROM Bookings WHERE BookingStatus = 'Cancelled' OR Fare > 1400;


-- Table 5: Tickets
CREATE TABLE Tickets (
    TicketID INT PRIMARY KEY AUTO_INCREMENT,
    BookingID INT,
    PassengerID INT,
    TrainID INT,
    CoachNumber VARCHAR(10),
    SeatNumber VARCHAR(10),
    TicketType VARCHAR(20),
    TicketStatus VARCHAR(20),
    IssueDate DATE,
    Fare DECIMAL(10,2)
);

INSERT INTO Tickets (BookingID, PassengerID, TrainID, CoachNumber, SeatNumber, TicketType, TicketStatus, IssueDate, Fare)
VALUES
(1, 1, 1, 'S1', '23', 'E-Ticket', 'Confirmed', '2025-07-10', 850.00),
(2, 2, 2, 'A2', '15', 'E-Ticket', 'Confirmed', '2025-07-11', 1450.00),
(3, 3, 3, 'C1', '10', 'Counter', 'Confirmed', '2025-07-12', 950.00),
(4, 4, 4, 'S2', '35', 'E-Ticket', 'Waiting', '2025-07-13', 780.00),
(5, 5, 5, 'B1', '20', 'E-Ticket', 'Confirmed', '2025-07-14', 1250.00),
(6, 6, 6, 'S3', '18', 'Counter', 'Confirmed', '2025-07-15', 900.00),
(7, 7, 7, 'A1', '05', 'E-Ticket', 'Confirmed', '2025-07-16', 1500.00),
(8, 8, 8, 'S4', '12', 'E-Ticket', 'Cancelled', '2025-07-17', 850.00),
(9, 9, 9, 'B2', '30', 'Counter', 'Confirmed', '2025-07-18', 1200.00),
(10, 10, 10, 'C2', '08', 'E-Ticket', 'Confirmed', '2025-07-19', 970.00),
(11, 11, 1, 'S1', '24', 'Counter', 'Confirmed', '2025-07-20', 880.00),
(12, 12, 2, 'A2', '16', 'E-Ticket', 'Waiting', '2025-07-21', 1470.00),
(13, 13, 3, 'C1', '11', 'Counter', 'Confirmed', '2025-07-22', 960.00),
(14, 14, 4, 'S2', '36', 'E-Ticket', 'Confirmed', '2025-07-23', 770.00),
(15, 15, 5, 'B1', '21', 'E-Ticket', 'Confirmed', '2025-07-24', 1240.00),
(16, 16, 6, 'S3', '19', 'Counter', 'Cancelled', '2025-07-25', 890.00),
(17, 17, 7, 'A1', '06', 'E-Ticket', 'Confirmed', '2025-07-26', 1490.00),
(18, 18, 8, 'S4', '13', 'Counter', 'Confirmed', '2025-07-27', 860.00),
(19, 19, 9, 'B2', '31', 'E-Ticket', 'Waiting', '2025-07-28', 1220.00),
(20, 20, 10, 'C2', '09', 'Counter', 'Confirmed', '2025-07-29', 980.00);

-- display table data
Select * from Tickets;

-- to delete values from table 
truncate table Tickets;

-- to delete table
drop table Tickets;

-- 1. DDL: Add a new column
ALTER TABLE Tickets ADD COLUMN TravelClass VARCHAR(20);

-- 2. DDL: Modify column type
ALTER TABLE Tickets MODIFY COLUMN Fare DECIMAL(12,2);

-- 3. DDL: Drop a column
ALTER TABLE Tickets DROP COLUMN TravelClass;

-- 4. DML: Insert a new ticket
INSERT INTO Tickets (BookingID, PassengerID, TrainID, CoachNumber, SeatNumber, TicketType, TicketStatus, IssueDate, Fare)
VALUES (21, 21, 11, 'B3', '12', 'E-Ticket', 'Confirmed', '2025-08-01', 1350.00);

-- 5. DML: Update ticket status
UPDATE Tickets SET TicketStatus = 'Cancelled' WHERE TicketID = 1;

-- 6. DML: Delete a ticket
DELETE FROM Tickets WHERE TicketID = 2;

-- 7. DQL: Select all tickets
SELECT * FROM Tickets;

-- 8. DQL: Select confirmed tickets only
SELECT TicketID, PassengerID, TrainID FROM Tickets WHERE TicketStatus = 'Confirmed';

-- 9. DQL: Order tickets by fare descending
SELECT TicketID, Fare FROM Tickets ORDER BY Fare DESC;

-- 10. DQL: Use LIKE operator
SELECT TicketID, SeatNumber FROM Tickets WHERE SeatNumber LIKE '1%';

-- 11. DQL: Use IN operator
SELECT TicketID, TicketType FROM Tickets WHERE TicketType IN ('E-Ticket','Counter');

-- 12. DQL: Use BETWEEN for fare range
SELECT TicketID, Fare FROM Tickets WHERE Fare BETWEEN 800 AND 1200;

-- 13. DQL: Aggregate SUM of fares
SELECT SUM(Fare) AS TotalFareCollected FROM Tickets WHERE TicketStatus = 'Confirmed';

-- 14. DQL: Count tickets by status
SELECT TicketStatus, COUNT(*) AS TotalTickets FROM Tickets GROUP BY TicketStatus;

-- 15. DQL: Alias usage
SELECT TicketID AS T_ID, PassengerID AS P_ID, Fare AS TicketFare FROM Tickets;

-- 16. DQL: DISTINCT ticket types
SELECT DISTINCT TicketType FROM Tickets;

-- 17. Subquery: Tickets with fare above average
SELECT TicketID, Fare FROM Tickets WHERE Fare > (SELECT AVG(Fare) FROM Tickets);

-- 18. Clause: LIMIT 5
SELECT * FROM Tickets LIMIT 5;

-- 19. Operator: Use OR
SELECT TicketID, TicketStatus, Fare FROM Tickets WHERE TicketStatus = 'Waiting' OR Fare > 1400;

-- 20. Create log table with cascade example
CREATE TABLE TicketLogs (
    LogID INT PRIMARY KEY AUTO_INCREMENT,
    TicketID INT,
    Action VARCHAR(50),
    FOREIGN KEY (TicketID) REFERENCES Tickets(TicketID) ON DELETE CASCADE ON UPDATE CASCADE
);


-- Table 6: Routes
CREATE TABLE Routes (
    RouteID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    SourceStation VARCHAR(50),
    DestinationStation VARCHAR(50),
    TotalDistance INT,
    TotalStops INT,
    StartTime TIME,
    EndTime TIME,
    RouteStatus VARCHAR(20),
    Remarks TEXT
);

INSERT INTO Routes (TrainID, SourceStation, DestinationStation, TotalDistance, TotalStops, StartTime, EndTime, RouteStatus, Remarks)
VALUES
(1, 'Mumbai CST', 'New Delhi', 1384, 8, '16:00:00', '08:35:00', 'Active', 'Rajdhani Route'),
(2, 'Howrah', 'New Delhi', 1448, 10, '16:55:00', '10:15:00', 'Active', 'Rajdhani Route'),
(3, 'Chennai', 'Mysuru', 497, 4, '06:00:00', '12:00:00', 'Active', 'Shatabdi Route'),
(4, 'Bengaluru', 'New Delhi', 2410, 20, '20:30:00', '05:40:00', 'Active', 'Karnataka Express'),
(5, 'Hyderabad', 'New Delhi', 1677, 12, '06:00:00', '07:15:00', 'Active', 'Telangana Express'),
(6, 'Mumbai CST', 'Hazrat Nizamuddin', 1377, 8, '17:40:00', '10:10:00', 'Active', 'August Kranti'),
(7, 'Bengaluru', 'Patna', 2693, 25, '09:00:00', '21:20:00', 'Active', 'Sanghamitra'),
(8, 'Chennai', 'New Delhi', 2182, 17, '19:15:00', '05:45:00', 'Active', 'GT Express'),
(9, 'Gorakhpur', 'Thiruvananthapuram', 3231, 30, '06:35:00', '04:55:00', 'Active', 'Rapti Sagar'),
(10, 'Sealdah', 'New Delhi', 1454, 5, '18:30:00', '10:20:00', 'Active', 'Duronto'),
(11, 'New Delhi', 'Lucknow', 492, 2, '19:50:00', '06:10:00', 'Active', 'Rajdhani Short'),
(12, 'Mumbai CST', 'Howrah', 1968, 22, '06:00:00', '11:25:00', 'Active', 'Gitanjali'),
(13, 'Puri', 'New Delhi', 1859, 14, '21:45:00', '22:00:00', 'Active', 'Purushottam'),
(14, 'Mumbai CST', 'Ahmedabad', 492, 3, '06:00:00', '12:30:00', 'Active', 'Shatabdi Route'),
(15, 'Chennai', 'New Delhi', 2182, 16, '22:00:00', '07:30:00', 'Active', 'Tamil Nadu Exp'),
(16, 'Mumbai CST', 'Amritsar', 1892, 20, '21:25:00', '23:35:00', 'Active', 'Golden Temple'),
(17, 'Mumbai LTT', 'Haridwar', 1617, 10, '07:55:00', '16:30:00', 'Active', 'Haridwar AC'),
(18, 'New Delhi', 'Ranchi', 1316, 10, '20:35:00', '17:00:00', 'Active', 'Swarna Jayanti'),
(19, 'Thiruvananthapuram', 'New Delhi', 3036, 27, '12:20:00', '13:20:00', 'Active', 'Kerala Express'),
(20, 'Mumbai Bandra', 'Hazrat Nizamuddin', 1367, 6, '16:35:00', '09:45:00', 'Active', 'Garib Rath');

-- display table data
Select * from Routes;

-- to delete values from table 
truncate table Routes;

-- to delete table
drop table Routes;

-- 1. DDL: Create table already done above

-- 2. DDL: Add a new column for RouteCategory
ALTER TABLE Routes ADD RouteCategory VARCHAR(30);

-- 3. DDL: Modify column datatype
ALTER TABLE Routes MODIFY COLUMN Remarks VARCHAR(200);

-- 4. DDL: Drop a column
ALTER TABLE Routes DROP COLUMN RouteCategory;

-- 5. DML: Insert a new record
INSERT INTO Routes (TrainID, SourceStation, DestinationStation, TotalDistance, TotalStops, StartTime, EndTime, RouteStatus, Remarks)
VALUES (21, 'Nagpur', 'New Delhi', 1100, 8, '14:00:00', '06:00:00', 'Active', 'Nagpur Express');

-- 6. DML: Update route status
UPDATE Routes SET RouteStatus='Inactive' WHERE RouteID=5;

-- 7. DML: Delete a route
DELETE FROM Routes WHERE RouteID=20;

-- 8. DQL: Select all routes
SELECT * FROM Routes;

-- 9. DQL: Select specific columns
SELECT SourceStation, DestinationStation, TotalDistance FROM Routes;

-- 10. DQL: Find routes longer than 2000 km
SELECT RouteID, SourceStation, DestinationStation FROM Routes WHERE TotalDistance > 2000;

-- 11. DQL: Routes starting from 'Mumbai CST'
SELECT * FROM Routes WHERE SourceStation='Mumbai CST';

-- 12. DQL: Count total active routes
SELECT COUNT(*) AS ActiveRoutes FROM Routes WHERE RouteStatus='Active';

-- 13. DQL: Order routes by distance
SELECT RouteID, SourceStation, DestinationStation, TotalDistance FROM Routes ORDER BY TotalDistance DESC;

-- 14. DQL: Get maximum distance route
SELECT MAX(TotalDistance) AS MaxDistance FROM Routes;

-- 15. DQL: Get minimum stops route
SELECT MIN(TotalStops) AS MinStops FROM Routes;

-- 16. DQL: Average route distance
SELECT AVG(TotalDistance) AS AvgDistance FROM Routes;

-- 17. C&C: Add NOT NULL constraint
ALTER TABLE Routes MODIFY SourceStation VARCHAR(50) NOT NULL;

-- 18. C&C: Add UNIQUE constraint
ALTER TABLE Routes ADD CONSTRAINT unique_train UNIQUE (TrainID);

-- 19. OP: Routes with distance between 1000 and 2000
SELECT RouteID, SourceStation, DestinationStation FROM Routes WHERE TotalDistance BETWEEN 1000 AND 2000;

-- 20. OP: Routes where destination is New Delhi or Lucknow
SELECT RouteID, SourceStation, DestinationStation FROM Routes WHERE DestinationStation IN ('New Delhi','Lucknow');


-- Table 7: Coaches
CREATE TABLE Coaches (
    CoachID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    CoachNumber VARCHAR(10),
    CoachType VARCHAR(20),
    Capacity INT,
    OccupiedSeats INT,
    AvailableSeats INT,
    AC BOOLEAN,
    PantryAvailable BOOLEAN,
    Remarks TEXT
);

INSERT INTO Coaches (TrainID, CoachNumber, CoachType, Capacity, OccupiedSeats, AvailableSeats, AC, PantryAvailable, Remarks)
VALUES
(1, 'S1', 'Sleeper', 72, 60, 12, FALSE, FALSE, 'General Sleeper'),
(1, 'A1', 'AC 2 Tier', 48, 45, 3, TRUE, FALSE, 'Air-conditioned'),
(2, 'S1', 'Sleeper', 72, 65, 7, FALSE, FALSE, 'General Sleeper'),
(2, 'A2', 'AC 3 Tier', 64, 60, 4, TRUE, FALSE, 'Air-conditioned'),
(3, 'C1', 'AC Chair Car', 78, 75, 3, TRUE, TRUE, 'Shatabdi CC'),
(3, 'C2', 'AC Chair Car', 78, 70, 8, TRUE, TRUE, 'Shatabdi CC'),
(4, 'S2', 'Sleeper', 72, 70, 2, FALSE, FALSE, 'General Sleeper'),
(4, 'B1', 'AC 3 Tier', 64, 63, 1, TRUE, FALSE, 'AC Coach'),
(5, 'S3', 'Sleeper', 72, 68, 4, FALSE, FALSE, 'General Sleeper'),
(5, 'A1', 'AC 2 Tier', 48, 45, 3, TRUE, TRUE, 'AC Coach'),
(6, 'S4', 'Sleeper', 72, 69, 3, FALSE, FALSE, 'General Sleeper'),
(6, 'B2', 'AC 3 Tier', 64, 61, 3, TRUE, FALSE, 'AC Coach'),
(7, 'A1', 'AC 2 Tier', 48, 47, 1, TRUE, TRUE, 'AC Coach'),
(7, 'S5', 'Sleeper', 72, 67, 5, FALSE, FALSE, 'General Sleeper'),
(8, 'C1', 'AC Chair Car', 78, 72, 6, TRUE, TRUE, 'Chair Car'),
(8, 'C2', 'AC Chair Car', 78, 70, 8, TRUE, TRUE, 'Chair Car'),
(9, 'B1', 'AC 3 Tier', 64, 62, 2, TRUE, TRUE, 'AC Coach'),
(9, 'S6', 'Sleeper', 72, 66, 6, FALSE, FALSE, 'General Sleeper'),
(10, 'C3', 'AC Chair Car', 78, 74, 4, TRUE, TRUE, 'Chair Car'),
(10, 'B2', 'AC 3 Tier', 64, 60, 4, TRUE, TRUE, 'AC Coach');

-- display table data
Select * from Coaches;

-- to delete values from table 
truncate table Coaches;

-- to delete table
drop table Coaches;

-- 1. DDL: Add a new column for CoachClass
ALTER TABLE Coaches ADD CoachClass VARCHAR(20);

-- 2. DDL: Modify datatype of Remarks column
ALTER TABLE Coaches MODIFY Remarks VARCHAR(200);

-- 3. DDL: Drop a column (CoachClass)
ALTER TABLE Coaches DROP COLUMN CoachClass;

-- 4. DDL: Rename table Coaches to TrainCoaches
ALTER TABLE Coaches RENAME TO TrainCoaches;

-- 5. DML: Insert a new coach record
INSERT INTO TrainCoaches (TrainID, CoachNumber, CoachType, Capacity, OccupiedSeats, AvailableSeats, AC, PantryAvailable, Remarks)
VALUES (11, 'S7', 'Sleeper', 72, 50, 22, FALSE, FALSE, 'New Sleeper Coach');

-- 6. DML: Update available seats
UPDATE TrainCoaches SET AvailableSeats = Capacity - OccupiedSeats WHERE CoachID = 3;

-- 7. DML: Delete a specific coach
DELETE FROM TrainCoaches WHERE CoachID = 20;

-- 8. DQL: Select all coaches
SELECT * FROM TrainCoaches;

-- 9. DQL: Select only AC coaches
SELECT CoachID, CoachNumber, CoachType FROM TrainCoaches WHERE AC = TRUE;

-- 10. DQL: Find sleeper coaches with more than 5 available seats
SELECT CoachNumber, AvailableSeats FROM TrainCoaches WHERE CoachType='Sleeper' AND AvailableSeats > 5;

-- 11. DQL: Count total AC coaches
SELECT COUNT(*) AS TotalACCoaches FROM TrainCoaches WHERE AC=TRUE;

-- 12. DQL: Average capacity of coaches
SELECT AVG(Capacity) AS AvgCapacity FROM TrainCoaches;

-- 13. DQL: Maximum occupied seats
SELECT MAX(OccupiedSeats) AS MaxOccupied FROM TrainCoaches;

-- 14. DQL: Minimum available seats
SELECT MIN(AvailableSeats) AS MinAvailable FROM TrainCoaches;

-- 15. DQL: Order coaches by capacity descending
SELECT CoachID, CoachNumber, Capacity FROM TrainCoaches ORDER BY Capacity DESC;

-- 16. C&C: Add NOT NULL constraint
ALTER TABLE TrainCoaches MODIFY CoachType VARCHAR(20) NOT NULL;

-- 17. C&C: Add UNIQUE constraint on CoachNumber
ALTER TABLE TrainCoaches ADD CONSTRAINT unique_coach_number UNIQUE (CoachNumber);

-- 18. OP: Coaches with available seats between 2 and 5
SELECT CoachID, CoachNumber, AvailableSeats FROM TrainCoaches WHERE AvailableSeats BETWEEN 2 AND 5;

-- 19. OP: Coaches that are either 'Sleeper' or 'AC 3 Tier'
SELECT CoachID, CoachNumber, CoachType FROM TrainCoaches WHERE CoachType IN ('Sleeper','AC 3 Tier');

-- 20. OP: Coaches that are AC but without Pantry
SELECT CoachID, CoachNumber, CoachType FROM TrainCoaches WHERE AC=TRUE AND PantryAvailable=FALSE;

-- Table 8: Seats
CREATE TABLE Seats (
    SeatID INT PRIMARY KEY AUTO_INCREMENT,
    CoachID INT,
    SeatNumber VARCHAR(10),
    SeatType VARCHAR(20),
    IsWindowSeat BOOLEAN,
    IsBooked BOOLEAN,
    PassengerID INT,
    BookingID INT,
    TrainID INT,
    Remarks TEXT
);

INSERT INTO Seats (CoachID, SeatNumber, SeatType, IsWindowSeat, IsBooked, PassengerID, BookingID, TrainID, Remarks)
VALUES
(1, 'S1-1', 'Sleeper', TRUE, TRUE, 1, 1, 1, 'Booked'),
(1, 'S1-2', 'Sleeper', FALSE, TRUE, 2, 2, 1, 'Booked'),
(1, 'S1-3', 'Sleeper', TRUE, TRUE, 3, 3, 1, 'Booked'),
(1, 'S1-4', 'Sleeper', FALSE, FALSE, NULL, NULL, 1, 'Available'),
(2, 'A1-1', 'AC 2 Tier', TRUE, TRUE, 4, 4, 1, 'Booked'),
(2, 'A1-2', 'AC 2 Tier', FALSE, TRUE, 5, 5, 1, 'Booked'),
(2, 'A1-3', 'AC 2 Tier', TRUE, FALSE, NULL, NULL, 1, 'Available'),
(3, 'S2-1', 'Sleeper', TRUE, TRUE, 6, 6, 2, 'Booked'),
(3, 'S2-2', 'Sleeper', FALSE, FALSE, NULL, NULL, 2, 'Available'),
(3, 'S2-3', 'Sleeper', TRUE, TRUE, 7, 7, 2, 'Booked'),
(4, 'B1-1', 'AC 3 Tier', TRUE, TRUE, 8, 8, 3, 'Booked'),
(4, 'B1-2', 'AC 3 Tier', FALSE, FALSE, NULL, NULL, 3, 'Available'),
(4, 'B1-3', 'AC 3 Tier', TRUE, TRUE, 9, 9, 3, 'Booked'),
(5, 'C1-1', 'Chair Car', TRUE, TRUE, 10, 10, 4, 'Booked'),
(5, 'C1-2', 'Chair Car', FALSE, TRUE, 11, 11, 4, 'Booked'),
(5, 'C1-3', 'Chair Car', TRUE, FALSE, NULL, NULL, 4, 'Available'),
(6, 'S3-1', 'Sleeper', TRUE, TRUE, 12, 12, 5, 'Booked'),
(6, 'S3-2', 'Sleeper', FALSE, TRUE, 13, 13, 5, 'Booked'),
(6, 'S3-3', 'Sleeper', TRUE, FALSE, NULL, NULL, 5, 'Available'),
(7, 'A2-1', 'AC 2 Tier', TRUE, TRUE, 14, 14, 6, 'Booked');

-- display table data
Select * from Seats;

-- to delete values from table 
truncate table Seats;

-- to delete table
drop table Seats;

-- 1. DDL: Add a new column for SeatClass
ALTER TABLE Seats ADD SeatClass VARCHAR(20);

-- 2. DDL: Modify datatype of Remarks column
ALTER TABLE Seats MODIFY Remarks VARCHAR(200);

-- 3. DDL: Drop column SeatClass
ALTER TABLE Seats DROP COLUMN SeatClass;

-- 4. DDL: Rename table Seats to TrainSeats
ALTER TABLE Seats RENAME TO TrainSeats;

-- 5. DML: Insert a new seat record
INSERT INTO TrainSeats (CoachID, SeatNumber, SeatType, IsWindowSeat, IsBooked, PassengerID, BookingID, TrainID, Remarks)
VALUES (8, 'S4-1', 'Sleeper', TRUE, FALSE, NULL, NULL, 7, 'Available');

-- 6. DML: Update booking status of a seat
UPDATE TrainSeats SET IsBooked = TRUE, PassengerID = 15, BookingID = 15, Remarks = 'Booked'
WHERE SeatID = 4;

-- 7. DML: Delete a seat record
DELETE FROM TrainSeats WHERE SeatID = 20;

-- 8. DQL: Select all seats
SELECT * FROM TrainSeats;

-- 9. DQL: Show only booked seats
SELECT SeatID, SeatNumber, SeatType FROM TrainSeats WHERE IsBooked = TRUE;

-- 10. DQL: Show only available seats
SELECT SeatNumber, SeatType FROM TrainSeats WHERE IsBooked = FALSE;

-- 11. DQL: Count total booked seats
SELECT COUNT(*) AS TotalBookedSeats FROM TrainSeats WHERE IsBooked = TRUE;

-- 12. DQL: Count total available window seats
SELECT COUNT(*) AS WindowAvailable FROM TrainSeats WHERE IsWindowSeat = TRUE AND IsBooked = FALSE;

-- 13. DQL: Find all AC 2 Tier seats
SELECT SeatID, SeatNumber FROM TrainSeats WHERE SeatType = 'AC 2 Tier';

-- 14. DQL: Find maximum SeatID
SELECT MAX(SeatID) AS MaxSeatID FROM TrainSeats;

-- 15. DQL: Order seats by TrainID then SeatNumber
SELECT SeatID, TrainID, SeatNumber FROM TrainSeats ORDER BY TrainID, SeatNumber;

-- 16. C&C: Add NOT NULL constraint
ALTER TABLE TrainSeats MODIFY SeatType VARCHAR(20) NOT NULL;

-- 17. C&C: Add UNIQUE constraint on SeatNumber
ALTER TABLE TrainSeats ADD CONSTRAINT unique_seat_number UNIQUE (SeatNumber);

-- 18. OP: Seats with SeatID between 5 and 10
SELECT SeatID, SeatNumber FROM TrainSeats WHERE SeatID BETWEEN 5 AND 10;

-- 19. OP: Seats that are either Sleeper or Chair Car
SELECT SeatID, SeatNumber, SeatType FROM TrainSeats WHERE SeatType IN ('Sleeper','Chair Car');

-- 20. OP: Window seats that are available
SELECT SeatID, SeatNumber FROM TrainSeats WHERE IsWindowSeat = TRUE AND IsBooked = FALSE;

-- Table 9: Staff
CREATE TABLE Staff (
    StaffID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    Role VARCHAR(50),
    Department VARCHAR(50),
    TrainID INT,
    Shift VARCHAR(20),
    Contact VARCHAR(15),
    Email VARCHAR(100),
    JoinDate DATE,
    Remarks TEXT
);

INSERT INTO Staff (Name, Role, Department, TrainID, Shift, Contact, Email, JoinDate, Remarks)
VALUES
('Rakesh Singh', 'Ticket Checker', 'Onboard', 1, 'Morning', '9876543200', 'rakesh.tc@rail.in', '2018-05-10', 'Senior TC'),
('Meena Kumari', 'Attendant', 'Onboard', 1, 'Morning', '8765432100', 'meena.att@rail.in', '2019-06-15', 'Sleeper Attendant'),
('Sunil Yadav', 'Guard', 'Operations', 2, 'Night', '7654321000', 'sunil.guard@rail.in', '2017-03-20', 'Train Guard'),
('Anjali Sharma', 'Ticket Checker', 'Onboard', 2, 'Morning', '6543210000', 'anjali.tc@rail.in', '2020-07-01', 'New Joiner'),
('Deepak Verma', 'Pantry Staff', 'Catering', 3, 'Morning', '5432100000', 'deepak.pantry@rail.in', '2016-08-05', 'Pantry Head'),
('Kavita Joshi', 'Cleaner', 'Housekeeping', 3, 'Night', '4321000000', 'kavita.clean@rail.in', '2019-02-14', 'Sleeper Coach'),
('Rajiv Nair', 'Security', 'Security', 4, 'Night', '3210000000', 'rajiv.sec@rail.in', '2015-04-12', 'RPF'),
('Pooja Mehta', 'Ticket Checker', 'Onboard', 4, 'Morning', '2100000000', 'pooja.tc@rail.in', '2018-11-11', 'Rajdhani TC'),
('Amit Desai', 'Pantry Staff', 'Catering', 5, 'Morning', '1000000001', 'amit.pantry@rail.in', '2017-09-07', 'Pantry Assistant'),
('Sneha Rao', 'Cleaner', 'Housekeeping', 5, 'Night', '1000000002', 'sneha.clean@rail.in', '2019-01-22', 'Coach Cleaner'),
('Vivek Kumar', 'Security', 'Security', 6, 'Night', '1000000003', 'vivek.sec@rail.in', '2015-12-18', 'Train Guard'),
('Manoj Singh', 'Guard', 'Operations', 6, 'Night', '1000000004', 'manoj.guard@rail.in', '2014-04-04', 'Senior Guard'),
('Seema Das', 'Ticket Checker', 'Onboard', 7, 'Morning', '1000000005', 'seema.tc@rail.in', '2018-03-15', 'Duronto TC'),
('Prakash Jain', 'Attendant', 'Onboard', 7, 'Morning', '1000000006', 'prakash.att@rail.in', '2016-05-19', 'AC Attendant'),
('Nisha Kapoor', 'Pantry Staff', 'Catering', 8, 'Morning', '1000000007', 'nisha.pantry@rail.in', '2020-07-25', 'Pantry Junior'),
('Anand Pillai', 'Cleaner', 'Housekeeping', 8, 'Night', '1000000008', 'anand.clean@rail.in', '2019-08-30', 'Chair Car Cleaner'),
('Ritu Singh', 'Security', 'Security', 9, 'Night', '1000000009', 'ritu.sec@rail.in', '2017-06-09', 'RPF Lady Constable'),
('Pawan Yadav', 'Guard', 'Operations', 9, 'Night', '1000000010', 'pawan.guard@rail.in', '2013-02-02', 'Senior Guard'),
('Tanvi Shah', 'Ticket Checker', 'Onboard', 10, 'Morning', '1000000011', 'tanvi.tc@rail.in', '2021-01-01', 'New Recruit'),
('Sandeep Kaur', 'Pantry Staff', 'Catering', 10, 'Morning', '1000000012', 'sandeep.pantry@rail.in', '2018-10-10', 'Pantry Assistant');

-- display table data
Select * from Staff;

-- to delete values from table 
truncate table Staff;

-- to delete table
drop table Staff;

-- 1. DDL: Add a new column for Salary
ALTER TABLE Staff ADD Salary DECIMAL(10,2);

-- 2. DDL: Modify datatype of Contact
ALTER TABLE Staff MODIFY Contact VARCHAR(20);

-- 3. DDL: Drop column Remarks
ALTER TABLE Staff DROP COLUMN Remarks;

-- 4. DDL: Rename table Staff to TrainStaff
ALTER TABLE Staff RENAME TO TrainStaff;

-- 5. DML: Insert a new staff record
INSERT INTO TrainStaff (Name, Role, Department, TrainID, Shift, Contact, Email, JoinDate, Salary)
VALUES ('Harish Kumar', 'Attendant', 'Onboard', 11, 'Morning', '9000000013', 'harish.att@rail.in', '2022-03-01', 25000.00);

-- 6. DML: Update salary of a staff member
UPDATE TrainStaff SET Salary = 40000.00 WHERE StaffID = 1;

-- 7. DML: Change department of a staff member
UPDATE TrainStaff SET Department = 'Operations' WHERE StaffID = 5;

-- 8. DML: Delete a staff record
DELETE FROM TrainStaff WHERE StaffID = 20;

-- 9. DQL: Select all staff details
SELECT * FROM TrainStaff;

-- 10. DQL: List only Ticket Checkers
SELECT StaffID, Name, TrainID FROM TrainStaff WHERE Role = 'Ticket Checker';

-- 11. DQL: Count total staff working in Catering
SELECT COUNT(*) AS CateringStaff FROM TrainStaff WHERE Department = 'Catering';

-- 12. DQL: Staff who joined after 2018
SELECT Name, Role, JoinDate FROM TrainStaff WHERE JoinDate > '2018-12-31';

-- 13. DQL: Order staff by JoinDate
SELECT StaffID, Name, JoinDate FROM TrainStaff ORDER BY JoinDate ASC;

-- 14. DQL: Get maximum salary
SELECT MAX(Salary) AS MaxSalary FROM TrainStaff;

-- 15. DQL: Get average salary of Security staff
SELECT AVG(Salary) AS AvgSecuritySalary FROM TrainStaff WHERE Department = 'Security';

-- 16. C&C: Add NOT NULL constraint on Name
ALTER TABLE TrainStaff MODIFY Name VARCHAR(100) NOT NULL;

-- 17. C&C: Add UNIQUE constraint on Email
ALTER TABLE TrainStaff ADD CONSTRAINT unique_email UNIQUE (Email);

-- 18. OP: Staff working in either Onboard or Catering
SELECT StaffID, Name, Department FROM TrainStaff WHERE Department IN ('Onboard','Catering');

-- 19. OP: Staff with ID between 5 and 10
SELECT StaffID, Name, Role FROM TrainStaff WHERE StaffID BETWEEN 5 AND 10;

-- 20. OP: Morning shift staff earning more than 25000
SELECT StaffID, Name, Salary FROM TrainStaff WHERE Shift = 'Morning' AND Salary > 25000;

-- Table 10 : Engineers
CREATE TABLE Engineers (
    EngineerID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    Specialization VARCHAR(50),
    Department VARCHAR(50),
    TrainID INT,
    Contact VARCHAR(15),
    Email VARCHAR(100),
    AssignedDate DATE,
    Certification VARCHAR(50),
    Remarks TEXT
);

INSERT INTO Engineers (Name, Specialization, Department, TrainID, Contact, Email, AssignedDate, Certification, Remarks)
VALUES
('Rajesh Kumar', 'Mechanical', 'Maintenance', 1, '9123456700', 'rajesh.eng@rail.in', '2020-01-15', 'Loco Expert', 'Senior'),
('Priya Gupta', 'Electrical', 'Maintenance', 1, '9123456701', 'priya.eng@rail.in', '2019-03-10', 'Electrical Cert', 'AC Coach'),
('Anil Sharma', 'Signal', 'Operations', 2, '9123456702', 'anil.eng@rail.in', '2018-05-20', 'Signal Cert', 'Track Signals'),
('Sunita Reddy', 'Mechanical', 'Maintenance', 2, '9123456703', 'sunita.eng@rail.in', '2017-07-25', 'Coach Cert', 'Coach Overhaul'),
('Deepak Singh', 'Electrical', 'Maintenance', 3, '9123456704', 'deepak.eng@rail.in', '2016-09-12', 'AC Cert', 'AC Maintenance'),
('Ravi Verma', 'Signal', 'Operations', 3, '9123456705', 'ravi.eng@rail.in', '2015-11-30', 'Signal Cert', 'Route Signals'),
('Aarti Joshi', 'Mechanical', 'Maintenance', 4, '9123456706', 'aarti.eng@rail.in', '2014-04-18', 'Coach Cert', 'LHB Coach'),
('Kunal Desai', 'Electrical', 'Maintenance', 4, '9123456707', 'kunal.eng@rail.in', '2013-02-25', 'Loco Cert', 'Train Loco'),
('Neha Singh', 'Signal', 'Operations', 5, '9123456708', 'neha.eng@rail.in', '2012-06-05', 'Signal Cert', 'Control Room'),
('Arun Kumar', 'Mechanical', 'Maintenance', 5, '9123456709', 'arun.eng@rail.in', '2011-03-14', 'Coach Cert', 'Old Coaches'),
('Pooja Yadav', 'Electrical', 'Maintenance', 6, '9123456710', 'pooja.eng@rail.in', '2020-02-20', 'AC Cert', 'AC Units'),
('Rahul Nair', 'Signal', 'Operations', 6, '9123456711', 'rahul.eng@rail.in', '2019-05-25', 'Signal Cert', 'Auto Signal'),
('Sneha Mehta', 'Mechanical', 'Maintenance', 7, '9123456712', 'sneha.eng@rail.in', '2018-07-30', 'Coach Cert', 'Coach Link'),
('Amit Jain', 'Electrical', 'Maintenance', 7, '9123456713', 'amit.eng@rail.in', '2017-09-10', 'Loco Cert', 'Traction'),
('Kiran Das', 'Signal', 'Operations', 8, '9123456714', 'kiran.eng@rail.in', '2016-11-15', 'Signal Cert', 'Yard Signal'),
('Bhavna Pillai', 'Mechanical', 'Maintenance', 8, '9123456715', 'bhavna.eng@rail.in', '2015-01-05', 'Coach Cert', 'Fitment'),
('Vikas Kapoor', 'Electrical', 'Maintenance', 9, '9123456716', 'vikas.eng@rail.in', '2014-04-21', 'Loco Cert', 'EMU'),
('Anita Rao', 'Signal', 'Operations', 9, '9123456717', 'anita.eng@rail.in', '2013-07-12', 'Signal Cert', 'Cabling'),
('Rohit Saxena', 'Mechanical', 'Maintenance', 10, '9123456718', 'rohit.eng@rail.in', '2012-09-08', 'Coach Cert', 'LHB Coach'),
('Geeta Shah', 'Electrical', 'Maintenance', 10, '9123456719', 'geeta.eng@rail.in', '2011-12-20', 'AC Cert', 'HVAC System');

-- display table data
Select * from Engineers;

-- to delete values from table 
truncate table Engineers;

-- to delete table
drop table Engineers;

-- 1. DDL: Create table (already given, but shown here as query)
CREATE TABLE Engineers (
    EngineerID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    Specialization VARCHAR(50),
    Department VARCHAR(50),
    TrainID INT,
    Contact VARCHAR(15),
    Email VARCHAR(100),
    AssignedDate DATE,
    Certification VARCHAR(50),
    Remarks TEXT
);

-- 2. DML: Insert one more engineer
INSERT INTO Engineers (Name, Specialization, Department, TrainID, Contact, Email, AssignedDate, Certification, Remarks)
VALUES ('Sanjay Patil', 'Electrical', 'Maintenance', 11, '9123456720', 'sanjay.eng@rail.in', '2021-01-05', 'HVAC Cert', 'New Recruit');

-- 3. DML: Update remarks of one engineer
UPDATE Engineers SET Remarks='Promoted to Senior Engineer' WHERE EngineerID=1;

-- 4. DML: Delete an engineer by ID
DELETE FROM Engineers WHERE EngineerID=20;

-- 5. DQL: Select all engineers
SELECT * FROM Engineers;

-- 6. DQL: Select engineers with specialization = 'Mechanical'
SELECT Name, Department, Certification FROM Engineers WHERE Specialization='Mechanical';

-- 7. DQL: Find engineers assigned after 2018
SELECT Name, AssignedDate FROM Engineers WHERE AssignedDate > '2018-12-31';

-- 8. DQL: Count engineers by department
SELECT Department, COUNT(*) AS Total FROM Engineers GROUP BY Department;

-- 9. DQL: Find earliest assigned engineer
SELECT Name, MIN(AssignedDate) AS EarliestAssigned FROM Engineers;

-- 10. DQL: Find latest assigned engineer
SELECT Name, MAX(AssignedDate) AS LatestAssigned FROM Engineers;

-- 11. Constraints & Commands: Add unique constraint on Email
ALTER TABLE Engineers ADD CONSTRAINT unique_email UNIQUE (Email);

-- 12. Constraints & Commands: Drop unique constraint on Email
ALTER TABLE Engineers DROP INDEX unique_email;

-- 13. Operator: Engineers in TrainID between 3 and 7
SELECT Name, TrainID FROM Engineers WHERE TrainID BETWEEN 3 AND 7;

-- 14. Operator: Engineers whose name starts with 'A'
SELECT Name FROM Engineers WHERE Name LIKE 'A%';

-- 15. Operator: Engineers not in Maintenance department
SELECT Name, Department FROM Engineers WHERE Department <> 'Maintenance';

-- 16. Operator: Engineers with specialization in Mechanical or Electrical
SELECT Name, Specialization FROM Engineers WHERE Specialization IN ('Mechanical', 'Electrical');

-- 17. DQL: Order engineers by AssignedDate descending
SELECT Name, AssignedDate FROM Engineers ORDER BY AssignedDate DESC;

-- 18. DQL: Group engineers by specialization and count
SELECT Specialization, COUNT(*) AS Total FROM Engineers GROUP BY Specialization;

-- 19. DQL: Find engineers with remarks containing 'Coach'
SELECT Name, Remarks FROM Engineers WHERE Remarks LIKE '%Coach%';

-- 20. DDL: Drop the Engineers table
DROP TABLE Engineers;


-- Table 11: TrainSchedules
CREATE TABLE TrainSchedules (
    ScheduleID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    RouteID INT,
    DepartureDate DATE,
    DepartureTime TIME,
    ArrivalDate DATE,
    ArrivalTime TIME,
    PlatformNumber VARCHAR(5),
    Status VARCHAR(20),
    Remarks TEXT
);

INSERT INTO TrainSchedules (TrainID, RouteID, DepartureDate, DepartureTime, ArrivalDate, ArrivalTime, PlatformNumber, Status, Remarks)
VALUES
(1, 1, '2025-07-20', '16:00:00', '2025-07-21', '08:35:00', '1', 'On Time', 'Rajdhani'),
(2, 2, '2025-07-21', '16:55:00', '2025-07-22', '10:15:00', '2', 'On Time', 'Howrah Rajdhani'),
(3, 3, '2025-07-22', '06:00:00', '2025-07-22', '12:00:00', '3', 'On Time', 'Shatabdi'),
(4, 4, '2025-07-23', '20:30:00', '2025-07-25', '05:40:00', '4', 'On Time', 'Karnataka Exp'),
(5, 5, '2025-07-24', '06:00:00', '2025-07-25', '07:15:00', '5', 'On Time', 'Telangana Exp'),
(6, 6, '2025-07-25', '17:40:00', '2025-07-26', '10:10:00', '6', 'On Time', 'August Kranti'),
(7, 7, '2025-07-26', '09:00:00', '2025-07-27', '21:20:00', '7', 'On Time', 'Sanghamitra'),
(8, 8, '2025-07-27', '19:15:00', '2025-07-28', '05:45:00', '8', 'On Time', 'GT Express'),
(9, 9, '2025-07-28', '06:35:00', '2025-07-30', '04:55:00', '9', 'On Time', 'Rapti Sagar'),
(10, 10, '2025-07-29', '18:30:00', '2025-07-30', '10:20:00', '10', 'On Time', 'Duronto'),
(11, 11, '2025-07-30', '19:50:00', '2025-07-31', '06:10:00', '11', 'On Time', 'NDL-LKO Rajdhani'),
(12, 12, '2025-07-31', '06:00:00', '2025-08-01', '11:25:00', '12', 'On Time', 'Gitanjali'),
(13, 13, '2025-08-01', '21:45:00', '2025-08-02', '22:00:00', '13', 'On Time', 'Purushottam'),
(14, 14, '2025-08-02', '06:00:00', '2025-08-02', '12:30:00', '14', 'On Time', 'Shatabdi'),
(15, 15, '2025-08-03', '22:00:00', '2025-08-04', '07:30:00', '15', 'On Time', 'Tamil Nadu Exp'),
(16, 16, '2025-08-04', '21:25:00', '2025-08-05', '23:35:00', '16', 'On Time', 'Golden Temple'),
(17, 17, '2025-08-05', '07:55:00', '2025-08-06', '16:30:00', '17', 'On Time', 'Haridwar AC'),
(18, 18, '2025-08-06', '20:35:00', '2025-08-07', '17:00:00', '18', 'On Time', 'Swarna Jayanti'),
(19, 19, '2025-08-07', '12:20:00', '2025-08-08', '13:20:00', '19', 'On Time', 'Kerala Express'),
(20, 20, '2025-08-08', '16:35:00', '2025-08-09', '09:45:00', '20', 'On Time', 'Garib Rath');

-- display table data
Select * from TrainSchedules;

-- to delete values from table 
truncate table TrainSchedules;

-- to delete table
drop table TrainSchedules;

-- 1. DDL: Create table (already given, but included here)
CREATE TABLE TrainSchedules (
    ScheduleID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    RouteID INT,
    DepartureDate DATE,
    DepartureTime TIME,
    ArrivalDate DATE,
    ArrivalTime TIME,
    PlatformNumber VARCHAR(5),
    Status VARCHAR(20),
    Remarks TEXT
);

-- 2. DML: Insert one new train schedule
INSERT INTO TrainSchedules (TrainID, RouteID, DepartureDate, DepartureTime, ArrivalDate, ArrivalTime, PlatformNumber, Status, Remarks)
VALUES (21, 21, '2025-08-10', '15:00:00', '2025-08-11', '05:30:00', '21', 'On Time', 'New Superfast');

-- 3. DML: Update status of one train
UPDATE TrainSchedules SET Status='Delayed' WHERE ScheduleID=5;

-- 4. DML: Delete one train schedule
DELETE FROM TrainSchedules WHERE ScheduleID=20;

-- 5. DQL: Select all schedules
SELECT * FROM TrainSchedules;

-- 6. DQL: Select trains departing after 6 PM
SELECT TrainID, DepartureTime FROM TrainSchedules WHERE DepartureTime > '18:00:00';

-- 7. DQL: Count trains scheduled per platform
SELECT PlatformNumber, COUNT(*) AS Total FROM TrainSchedules GROUP BY PlatformNumber;

-- 8. DQL: Find earliest departure
SELECT TrainID, MIN(DepartureTime) AS EarliestDeparture FROM TrainSchedules;

-- 9. DQL: Find latest arrival
SELECT TrainID, MAX(ArrivalTime) AS LatestArrival FROM TrainSchedules;

-- 10. DQL: Select trains arriving next day
SELECT TrainID, DepartureDate, ArrivalDate FROM TrainSchedules WHERE ArrivalDate > DepartureDate;

-- 11. Constraints & Commands: Add NOT NULL on Status
ALTER TABLE TrainSchedules MODIFY Status VARCHAR(20) NOT NULL;

-- 12. Constraints & Commands: Add default value to Status
ALTER TABLE TrainSchedules ALTER COLUMN Status SET DEFAULT 'On Time';

-- 13. Operator: Trains with ID between 5 and 10
SELECT TrainID, DepartureDate FROM TrainSchedules WHERE TrainID BETWEEN 5 AND 10;

-- 14. Operator: Trains not on time
SELECT TrainID, Status FROM TrainSchedules WHERE Status <> 'On Time';

-- 15. Operator: Trains running on platforms 1, 2, 3
SELECT TrainID, PlatformNumber FROM TrainSchedules WHERE PlatformNumber IN ('1','2','3');

-- 16. Operator: Trains with remarks containing 'Express'
SELECT TrainID, Remarks FROM TrainSchedules WHERE Remarks LIKE '%Express%';

-- 17. DQL: Order trains by DepartureDate ascending
SELECT TrainID, DepartureDate FROM TrainSchedules ORDER BY DepartureDate ASC;

-- 18. DQL: Group trains by status
SELECT Status, COUNT(*) AS Total FROM TrainSchedules GROUP BY Status;

-- 19. DQL: Find number of trains scheduled in August 2025
SELECT COUNT(*) AS AugustTrains FROM TrainSchedules WHERE DepartureDate BETWEEN '2025-08-01' AND '2025-08-31';

-- 20. DDL: Drop the table
DROP TABLE TrainSchedules;


-- Table 12: Catering
CREATE TABLE Catering (
    CateringID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    VendorID INT,
    StaffID INT,
    MealType VARCHAR(20),
    Menu VARCHAR(100),
    Quantity INT,
    ServiceTime TIME,
    Status VARCHAR(20),
    Remarks TEXT
);

INSERT INTO Catering (TrainID, VendorID, StaffID, MealType, Menu, Quantity, ServiceTime, Status, Remarks)
VALUES
(1, 1, 1, 'Breakfast', 'Idli, Dosa, Coffee', 100, '07:00:00', 'Served', 'South Special'),
(2, 2, 2, 'Lunch', 'Veg Thali, Roti, Rice', 150, '13:00:00', 'Served', 'North Thali'),
(3, 3, 3, 'Dinner', 'Chicken Curry, Rice, Dal', 200, '20:00:00', 'Served', 'Non-Veg Meal'),
(4, 4, 4, 'Snacks', 'Samosa, Tea', 250, '17:00:00', 'Served', 'Evening Snacks'),
(5, 5, 5, 'Breakfast', 'Puri Bhaji, Chai', 120, '07:30:00', 'Served', 'North Indian'),
(6, 6, 6, 'Lunch', 'Paneer, Roti, Rice', 180, '12:30:00', 'Served', 'Veg Meal'),
(7, 7, 7, 'Dinner', 'Dal Makhani, Roti', 190, '20:30:00', 'Served', 'Veg Dinner'),
(8, 8, 8, 'Snacks', 'Pakora, Tea', 200, '17:30:00', 'Served', 'Tea Snacks'),
(9, 9, 9, 'Breakfast', 'Upma, Chutney, Coffee', 130, '06:45:00', 'Served', 'South Combo'),
(10, 10, 10, 'Lunch', 'Fish Curry, Rice', 170, '13:15:00', 'Served', 'Coastal Meal'),
(11, 11, 11, 'Dinner', 'Egg Curry, Rice', 160, '21:00:00', 'Served', 'Non-Veg'),
(12, 12, 12, 'Snacks', 'Vada Pav, Chai', 220, '17:45:00', 'Served', 'Mumbai Style'),
(13, 13, 13, 'Breakfast', 'Paratha, Dahi', 140, '07:10:00', 'Served', 'Punjabi'),
(14, 14, 14, 'Lunch', 'Rajma, Rice', 160, '12:45:00', 'Served', 'Punjabi'),
(15, 15, 15, 'Dinner', 'Veg Biryani', 180, '20:15:00', 'Served', 'Special Biryani'),
(16, 16, 16, 'Snacks', 'Momos, Soup', 210, '18:00:00', 'Served', 'Indo-Chinese'),
(17, 17, 17, 'Breakfast', 'Poha, Jalebi', 120, '07:20:00', 'Served', 'MP Style'),
(18, 18, 18, 'Lunch', 'Kadhi, Rice', 170, '12:50:00', 'Served', 'Gujarati Meal'),
(19, 19, 19, 'Dinner', 'Roti, Sabji', 190, '20:40:00', 'Served', 'Regular'),
(20, 20, 20, 'Snacks', 'Sandwich, Tea', 230, '17:10:00', 'Served', 'Quick Bite');

-- display table data
Select * from Catering;

-- to delete values from table 
truncate table Catering;

-- to delete table
drop table Catering;

-- 1. DML: Insert new catering record
INSERT INTO Catering (TrainID, VendorID, StaffID, MealType, Menu, Quantity, ServiceTime, Status, Remarks)
VALUES (21, 21, 21, 'Dinner', 'Paneer Butter Masala, Roti', 150, '20:45:00', 'Pending', 'Special Order');

-- 2. DML: Update quantity for a meal
UPDATE Catering SET Quantity = 180 WHERE CateringID = 5;

-- 3. DML: Delete a catering record
DELETE FROM Catering WHERE CateringID = 20;

-- 4. DQL: Select all catering records
SELECT * FROM Catering;

-- 5. DQL: Get all breakfast menus
SELECT CateringID, Menu, Quantity FROM Catering WHERE MealType = 'Breakfast';

-- 6. DQL: Count meals served by type
SELECT MealType, COUNT(*) AS Total FROM Catering GROUP BY MealType;

-- 7. DQL: Find max quantity meal
SELECT MealType, MAX(Quantity) AS MaxQuantity FROM Catering;

-- 8. DQL: Find min quantity meal
SELECT MealType, MIN(Quantity) AS MinQuantity FROM Catering;

-- 9. DQL: Meals served after 6 PM
SELECT CateringID, MealType, ServiceTime FROM Catering WHERE ServiceTime > '18:00:00';

-- 10. DQL: Average quantity of lunch meals
SELECT AVG(Quantity) AS AvgLunch FROM Catering WHERE MealType = 'Lunch';

-- 11. Constraints & Commands: Add NOT NULL constraint to MealType
ALTER TABLE Catering MODIFY MealType VARCHAR(20) NOT NULL;

-- 12. Constraints & Commands: Add default status
ALTER TABLE Catering ALTER COLUMN Status SET DEFAULT 'Pending';

-- 13. Operator: Meals with quantity between 150 and 200
SELECT CateringID, MealType, Quantity FROM Catering WHERE Quantity BETWEEN 150 AND 200;

-- 14. Operator: Meals not served
SELECT CateringID, MealType, Status FROM Catering WHERE Status <> 'Served';

-- 15. Operator: Meals in specific categories
SELECT CateringID, MealType FROM Catering WHERE MealType IN ('Breakfast','Dinner');

-- 16. Operator: Meals with menu containing 'Rice'
SELECT CateringID, Menu FROM Catering WHERE Menu LIKE '%Rice%';

-- 17. DQL: Order catering by ServiceTime ascending
SELECT CateringID, MealType, ServiceTime FROM Catering ORDER BY ServiceTime ASC;

-- 18. DQL: Group meals by status
SELECT Status, COUNT(*) AS Total FROM Catering GROUP BY Status;

-- 19. DQL: Total number of catering records
SELECT COUNT(*) AS TotalMeals FROM Catering;

-- 20. DDL: Drop Remarks column
ALTER TABLE Catering DROP COLUMN Remarks;



-- Table 13: Vendors
CREATE TABLE Vendors (
    VendorID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    Contact VARCHAR(15),
    Email VARCHAR(100),
    ServiceType VARCHAR(50),
    LicenseNo VARCHAR(50),
    Address VARCHAR(200),
    ContractStart DATE,
    ContractEnd DATE,
    Remarks TEXT
);

INSERT INTO Vendors (Name, Contact, Email, ServiceType, LicenseNo, Address, ContractStart, ContractEnd, Remarks)
VALUES
('Food Corp', '9876543210', 'contact@foodcorp.in', 'Catering', 'LIC123', 'Delhi', '2024-01-01', '2026-12-31', 'Main Caterer'),
('Fresh Meals', '8765432101', 'info@freshmeals.in', 'Catering', 'LIC124', 'Mumbai', '2024-01-01', '2026-12-31', 'Veg Special'),
('Healthy Bites', '7654321012', 'hello@healthybites.in', 'Catering', 'LIC125', 'Bengaluru', '2024-01-01', '2026-12-31', 'Snacks'),
('Spice Route', '6543210123', 'sales@spiceroute.in', 'Catering', 'LIC126', 'Chennai', '2024-01-01', '2026-12-31', 'South Meals'),
('Taste On Track', '5432101234', 'support@tasteontrack.in', 'Catering', 'LIC127', 'Hyderabad', '2024-01-01', '2026-12-31', 'Special Meals'),
('Rail Kitchen', '4321012345', 'service@railkitchen.in', 'Catering', 'LIC128', 'Kolkata', '2024-01-01', '2026-12-31', 'Combo Meals'),
('Quick Serve', '3210123456', 'order@quickserve.in', 'Catering', 'LIC129', 'Pune', '2024-01-01', '2026-12-31', 'Snacks'),
('Yummy Rails', '2101234567', 'book@yummyrails.in', 'Catering', 'LIC130', 'Ahmedabad', '2024-01-01', '2026-12-31', 'Specialty'),
('Food Express', '1098765432', 'partner@foodexpress.in', 'Catering', 'LIC131', 'Bhopal', '2024-01-01', '2026-12-31', 'Meals'),
('Eat Well', '9087654321', 'hello@eatwell.in', 'Catering', 'LIC132', 'Lucknow', '2024-01-01', '2026-12-31', 'Healthy'),
('Foodie Hub', '8076543210', 'contact@foodiehub.in', 'Catering', 'LIC133', 'Kanpur', '2024-01-01', '2026-12-31', 'Regional'),
('Delish Foods', '7065432109', 'info@delishfoods.in', 'Catering', 'LIC134', 'Jaipur', '2024-01-01', '2026-12-31', 'Regional'),
('Tasty Trails', '6054321098', 'sales@tastytrails.in', 'Catering', 'LIC135', 'Indore', '2024-01-01', '2026-12-31', 'Combo'),
('Flavor Line', '5043210987', 'support@flavorline.in', 'Catering', 'LIC136', 'Patna', '2024-01-01', '2026-12-31', 'Snacks'),
('Fresh Plate', '4032109876', 'order@freshplate.in', 'Catering', 'LIC137', 'Ranchi', '2024-01-01', '2026-12-31', 'Special Meals'),
('Meal Makers', '3021098765', 'book@mealmakers.in', 'Catering', 'LIC138', 'Guwahati', '2024-01-01', '2026-12-31', 'Regional'),
('Spice Chef', '2010987654', 'partner@spicechef.in', 'Catering', 'LIC139', 'Jodhpur', '2024-01-01', '2026-12-31', 'Special Meals'),
('Rail Feast', '1009876543', 'hello@railfeast.in', 'Catering', 'LIC140', 'Vijayawada', '2024-01-01', '2026-12-31', 'Regional'),
('Chef On Rail', '9998765432', 'info@chefonrail.in', 'Catering', 'LIC141', 'Coimbatore', '2024-01-01', '2026-12-31', 'Healthy'),
('Rail Dine', '8887654321', 'service@raildine.in', 'Catering', 'LIC142', 'Amritsar', '2024-01-01', '2026-12-31', 'Combo');

-- display table data
Select * from Vendors;

-- to delete values from table 
truncate table Vendors;

-- to delete table
drop table Vendors;

-- 1. DDL: Add a new column
ALTER TABLE Vendors ADD COLUMN Rating INT;

-- 2. DDL: Modify column size
ALTER TABLE Vendors MODIFY COLUMN Name VARCHAR(150);

-- 3. DDL: Drop a column
ALTER TABLE Vendors DROP COLUMN Rating;

-- 4. DML: Insert a new vendor
INSERT INTO Vendors (Name, Contact, Email, ServiceType, LicenseNo, Address, ContractStart, ContractEnd, Remarks)
VALUES ('Express Meals', '7776543210', 'contact@expressmeals.in', 'Catering', 'LIC150', 'Surat', '2024-02-01', '2026-12-31', 'Fast Delivery');

-- 5. DML: Update vendor remarks
UPDATE Vendors SET Remarks='Premium Partner' WHERE VendorID=2;

-- 6. DML: Delete a vendor by ID
DELETE FROM Vendors WHERE VendorID=20;

-- 7. DQL: Select all vendors
SELECT * FROM Vendors;

-- 8. DQL: Select vendors from Mumbai
SELECT Name, Contact FROM Vendors WHERE Address='Mumbai';

-- 9. DQL: Select vendors with contract ending in 2026
SELECT Name, ContractEnd FROM Vendors WHERE YEAR(ContractEnd)=2026;

-- 10. DQL: Count total vendors
SELECT COUNT(*) AS TotalVendors FROM Vendors;

-- 11. DQL: Get distinct addresses
SELECT DISTINCT Address FROM Vendors;

-- 12. DQL: Order vendors by Name ASC
SELECT Name, ServiceType FROM Vendors ORDER BY Name ASC;

-- 13. DQL: Find vendors with ServiceType = 'Catering' and Remarks LIKE '%Meals%'
SELECT * FROM Vendors WHERE ServiceType='Catering' AND Remarks LIKE '%Meals%';

-- 14. DQL: Vendors whose name starts with 'F'
SELECT * FROM Vendors WHERE Name LIKE 'F%';

-- 15. DQL: Vendors between VendorID 5 and 10
SELECT * FROM Vendors WHERE VendorID BETWEEN 5 AND 10;

-- 16. Constraint: Add NOT NULL constraint
ALTER TABLE Vendors MODIFY COLUMN Name VARCHAR(100) NOT NULL;

-- 17. Constraint: Add UNIQUE constraint on Email
ALTER TABLE Vendors ADD CONSTRAINT unique_email UNIQUE (Email);

-- 18. Operator: Vendors in Delhi or Mumbai
SELECT * FROM Vendors WHERE Address IN ('Delhi','Mumbai');

-- 19. Operator: Vendors not from Kolkata
SELECT * FROM Vendors WHERE Address <> 'Kolkata';

-- 20. Operator: Vendors with Contact starting from '9'
SELECT * FROM Vendors WHERE Contact LIKE '9%';

-- Table 14: MaintenanceLogs
CREATE TABLE MaintenanceLogs (
    LogID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    EngineerID INT,
    Date DATE,
    Time TIME,
    IssueReported VARCHAR(100),
    ActionTaken VARCHAR(100),
    Status VARCHAR(20),
    NextDue DATE,
    Remarks TEXT
);

INSERT INTO MaintenanceLogs (TrainID, EngineerID, Date, Time, IssueReported, ActionTaken, Status, NextDue, Remarks) 
VALUES
(1, 1, '2025-07-01', '09:00:00', 'Brake check', 'Brake pads replaced', 'Completed', '2025-08-01', 'Monthly check'),
(2, 2, '2025-07-02', '10:00:00', 'AC gas low', 'Gas refilled', 'Completed', '2025-08-02', 'Routine AC service'),
(3, 3, '2025-07-03', '11:00:00', 'Signal glitch', 'Signal circuit fixed', 'Completed', '2025-08-03', 'Signal maintenance'),
(4, 4, '2025-07-04', '12:00:00', 'Wheel misalignment', 'Alignment adjusted', 'Completed', '2025-08-04', 'Underframe check'),
(5, 5, '2025-07-05', '13:00:00', 'Coach AC filter', 'Filter cleaned', 'Completed', '2025-08-05', 'Monthly HVAC'),
(6, 6, '2025-07-06', '14:00:00', 'Door latch broken', 'Latch replaced', 'Completed', '2025-08-06', 'Coach safety'),
(7, 7, '2025-07-07', '15:00:00', 'Fan not working', 'Fan motor replaced', 'Completed', '2025-08-07', 'Coach electrics'),
(8, 8, '2025-07-08', '16:00:00', 'Window cracked', 'Glass changed', 'Completed', '2025-08-08', 'Coach interiors'),
(9, 9, '2025-07-09', '17:00:00', 'Engine noise', 'Engine serviced', 'Completed', '2025-08-09', 'Loco checkup'),
(10, 10, '2025-07-10', '18:00:00', 'Brake rod issue', 'Rod replaced', 'Completed', '2025-08-10', 'Brake check'),
(1, 11, '2025-07-11', '09:30:00', 'Seat loose', 'Seat fixed', 'Completed', '2025-08-11', 'Coach comfort'),
(2, 12, '2025-07-12', '10:30:00', 'AC vent blocked', 'Vent cleaned', 'Completed', '2025-08-12', 'HVAC'),
(3, 13, '2025-07-13', '11:30:00', 'Signal light out', 'Bulb replaced', 'Completed', '2025-08-13', 'Signal safety'),
(4, 14, '2025-07-14', '12:30:00', 'Toilet flush leak', 'Valve replaced', 'Completed', '2025-08-14', 'Sanitation'),
(5, 15, '2025-07-15', '13:30:00', 'Luggage rack loose', 'Rack fixed', 'Completed', '2025-08-15', 'Coach fitments'),
(6, 16, '2025-07-16', '14:30:00', 'Fan switch faulty', 'Switch replaced', 'Completed', '2025-08-16', 'Electricals'),
(7, 17, '2025-07-17', '15:30:00', 'Brake shoe worn', 'Brake shoe changed', 'Completed', '2025-08-17', 'Brake maintenance'),
(8, 18, '2025-07-18', '16:30:00', 'Pantry pipe leak', 'Pipe fixed', 'Completed', '2025-08-18', 'Pantry check'),
(9, 19, '2025-07-19', '17:30:00', 'Signal relay issue', 'Relay replaced', 'Completed', '2025-08-19', 'Signal check'),
(10, 20, '2025-07-20', '18:30:00', 'Coach repaint', 'Paint touch-up done', 'Completed', '2025-08-20', 'Coach bodywork');

-- display table data
Select * from MaintenanceLogs;

-- to delete values from table 
truncate table MaintenanceLogs;

-- to delete table
drop table MaintenanceLogs;

-- 1. DDL: Add a new column for MaintenanceCost
ALTER TABLE MaintenanceLogs ADD COLUMN MaintenanceCost DECIMAL(10,2);

-- 2. DDL: Modify column size of IssueReported
ALTER TABLE MaintenanceLogs MODIFY COLUMN IssueReported VARCHAR(200);

-- 3. DDL: Drop the column MaintenanceCost
ALTER TABLE MaintenanceLogs DROP COLUMN MaintenanceCost;

-- 4. DML: Insert a new maintenance log
INSERT INTO MaintenanceLogs (TrainID, EngineerID, Date, Time, IssueReported, ActionTaken, Status, NextDue, Remarks)
VALUES (11, 21, '2025-07-21', '09:00:00', 'Horn issue', 'Horn replaced', 'Completed', '2025-08-21', 'Safety check');

-- 5. DML: Update the remarks of a log
UPDATE MaintenanceLogs SET Remarks='Urgent Follow-up' WHERE LogID=5;

-- 6. DML: Delete a log entry by LogID
DELETE FROM MaintenanceLogs WHERE LogID=20;

-- 7. DQL: Select all maintenance logs
SELECT * FROM MaintenanceLogs;

-- 8. DQL: Select only TrainID, IssueReported, Status
SELECT TrainID, IssueReported, Status FROM MaintenanceLogs;

-- 9. DQL: Get logs where Status is 'Completed'
SELECT * FROM MaintenanceLogs WHERE Status='Completed';

-- 10. DQL: Count total maintenance records
SELECT COUNT(*) AS TotalLogs FROM MaintenanceLogs;

-- 11. DQL: Find distinct issues reported
SELECT DISTINCT IssueReported FROM MaintenanceLogs;

-- 12. DQL: Get logs between '2025-07-05' and '2025-07-10'
SELECT * FROM MaintenanceLogs WHERE Date BETWEEN '2025-07-05' AND '2025-07-10';

-- 13. DQL: Order logs by Date descending
SELECT * FROM MaintenanceLogs ORDER BY Date DESC;

-- 14. DQL: Logs with remarks containing 'Brake'
SELECT * FROM MaintenanceLogs WHERE Remarks LIKE '%Brake%';

-- 15. DQL: Find engineers who worked on TrainID = 2
SELECT EngineerID FROM MaintenanceLogs WHERE TrainID=2;

-- 16. Constraint: Make IssueReported NOT NULL
ALTER TABLE MaintenanceLogs MODIFY COLUMN IssueReported VARCHAR(100) NOT NULL;

-- 17. Constraint: Add unique constraint on (TrainID, Date, Time)
ALTER TABLE MaintenanceLogs ADD CONSTRAINT unique_train_time UNIQUE (TrainID, Date, Time);

-- 18. Operator: Get logs where TrainID is in (1, 5, 10)
SELECT * FROM MaintenanceLogs WHERE TrainID IN (1,5,10);

-- 19. Operator: Get logs where EngineerID not equal to 5
SELECT * FROM MaintenanceLogs WHERE EngineerID <> 5;

-- 20. Operator: Get logs where Time is greater than '15:00:00'
SELECT * FROM MaintenanceLogs WHERE Time > '15:00:00';

-- Table 15 : Complaints
CREATE TABLE Complaints (
    ComplaintID INT PRIMARY KEY AUTO_INCREMENT,
    PassengerID INT,
    TrainID INT,
    CoachID INT,
    Date DATE,
    Time TIME,
    Type VARCHAR(50),
    Description VARCHAR(255),
    Status VARCHAR(20),
    Remarks TEXT
);

INSERT INTO Complaints (PassengerID, TrainID, CoachID, Date, Time, Type, Description, Status, Remarks) 
VALUES
(1, 1, 1, '2025-07-01', '09:00:00', 'Cleanliness', 'Dirty coach floor', 'Resolved', 'Immediate cleaning done'),
(2, 2, 2, '2025-07-02', '10:00:00', 'Food', 'Stale meal served', 'Resolved', 'Vendor warned'),
(3, 3, 3, '2025-07-03', '11:00:00', 'Security', 'Unattended luggage', 'Resolved', 'RPF informed'),
(4, 4, 4, '2025-07-04', '12:00:00', 'Service', 'Attendant rude', 'Resolved', 'Staff counseled'),
(5, 5, 5, '2025-07-05', '13:00:00', 'Cleanliness', 'Toilet dirty', 'Resolved', 'Cleaner assigned'),
(6, 6, 6, '2025-07-06', '14:00:00', 'Food', 'Cold food', 'Resolved', 'Fresh meal provided'),
(7, 7, 7, '2025-07-07', '15:00:00', 'Security', 'Pickpocket', 'Resolved', 'RPF alerted'),
(8, 8, 8, '2025-07-08', '16:00:00', 'Service', 'Late service', 'Resolved', 'Staff warned'),
(9, 9, 9, '2025-07-09', '17:00:00', 'Cleanliness', 'Seat unclean', 'Resolved', 'Seat cleaned'),
(10, 10, 10, '2025-07-10', '18:00:00', 'Food', 'Wrong order', 'Resolved', 'Corrected'),
(11, 1, 1, '2025-07-11', '09:30:00', 'Security', 'Lost luggage', 'Resolved', 'Located'),
(12, 2, 2, '2025-07-12', '10:30:00', 'Service', 'Delay in bedding', 'Resolved', 'Provided'),
(13, 3, 3, '2025-07-13', '11:30:00', 'Cleanliness', 'Dusty berth', 'Resolved', 'Cleaned'),
(14, 4, 4, '2025-07-14', '12:30:00', 'Food', 'No vegetarian meal', 'Resolved', 'Served'),
(15, 5, 5, '2025-07-15', '13:30:00', 'Security', 'Fighting passengers', 'Resolved', 'RPF intervened'),
(16, 6, 6, '2025-07-16', '14:30:00', 'Service', 'AC not working', 'Resolved', 'Fixed'),
(17, 7, 7, '2025-07-17', '15:30:00', 'Cleanliness', 'Pantry dirty', 'Resolved', 'Cleaned'),
(18, 8, 8, '2025-07-18', '16:30:00', 'Food', 'Food late', 'Resolved', 'Served'),
(19, 9, 9, '2025-07-19', '17:30:00', 'Security', 'Unauthorized person', 'Resolved', 'RPF alerted'),
(20, 10, 10, '2025-07-20', '18:30:00', 'Service', 'Unhelpful staff', 'Resolved', 'Counseled');

-- display table data
Select * from Complaints;

-- to delete values from table 
truncate table Complaints;

-- to delete table
drop table Complaints;

-- 1. DDL: Add a new column for ComplaintPriority
ALTER TABLE Complaints ADD COLUMN ComplaintPriority VARCHAR(20);

-- 2. DDL: Modify Description length
ALTER TABLE Complaints MODIFY COLUMN Description VARCHAR(500);

-- 3. DDL: Drop the ComplaintPriority column
ALTER TABLE Complaints DROP COLUMN ComplaintPriority;

-- 4. DML: Insert a new complaint record
INSERT INTO Complaints (PassengerID, TrainID, CoachID, Date, Time, Type, Description, Status, Remarks)
VALUES (21, 11, 11, '2025-07-21', '09:00:00', 'Cleanliness', 'Window dusty', 'Pending', 'To be checked');

-- 5. DML: Update status of a complaint
UPDATE Complaints SET Status='Pending' WHERE ComplaintID=5;

-- 6. DML: Delete a complaint record
DELETE FROM Complaints WHERE ComplaintID=20;

-- 7. DQL: Select all complaints
SELECT * FROM Complaints;

-- 8. DQL: Get only ComplaintID, Type, and Status
SELECT ComplaintID, Type, Status FROM Complaints;

-- 9. DQL: Find all food-related complaints
SELECT * FROM Complaints WHERE Type='Food';

-- 10. DQL: Count number of cleanliness complaints
SELECT COUNT(*) AS CleanlinessComplaints FROM Complaints WHERE Type='Cleanliness';

-- 11. DQL: Find distinct complaint types
SELECT DISTINCT Type FROM Complaints;

-- 12. DQL: Get complaints logged between '2025-07-05' and '2025-07-10'
SELECT * FROM Complaints WHERE Date BETWEEN '2025-07-05' AND '2025-07-10';

-- 13. DQL: Order complaints by Date ascending
SELECT * FROM Complaints ORDER BY Date ASC;

-- 14. DQL: Complaints where Remarks mention 'RPF'
SELECT * FROM Complaints WHERE Remarks LIKE '%RPF%';

-- 15. DQL: Find complaints of TrainID = 2
SELECT * FROM Complaints WHERE TrainID=2;

-- 16. Constraint: Make Type column NOT NULL
ALTER TABLE Complaints MODIFY COLUMN Type VARCHAR(50) NOT NULL;

-- 17. Constraint: Add unique constraint on (PassengerID, Date, Time)
ALTER TABLE Complaints ADD CONSTRAINT unique_passenger_complaint UNIQUE (PassengerID, Date, Time);

-- 18. Operator: Get complaints where TrainID is in (1,5,10)
SELECT * FROM Complaints WHERE TrainID IN (1,5,10);

-- 19. Operator: Get complaints where Status is not 'Resolved'
SELECT * FROM Complaints WHERE Status <> 'Resolved';

-- 20. Operator: Get complaints where Time is greater than '15:00:00'
SELECT * FROM Complaints WHERE Time > '15:00:00';


-- Table 16 : Cargo
CREATE TABLE Cargo (
    CargoID INT PRIMARY KEY AUTO_INCREMENT,
    BookingID INT,
    TrainID INT,
    DepartureStation VARCHAR(50),
    ArrivalStation VARCHAR(50),
    Weight DECIMAL(10,2),
    GoodsType VARCHAR(50),
    DepartureDate DATE,
    ArrivalDate DATE,
    Status VARCHAR(20)
);
INSERT INTO Cargo (BookingID, TrainID, DepartureStation, ArrivalStation, Weight, GoodsType, DepartureDate, ArrivalDate, Status)
 VALUES
(1, 1, 'Delhi', 'Mumbai', 1500.50, 'Electronics', '2025-07-01', '2025-07-02', 'Delivered'),
(2, 2, 'Kolkata', 'Chennai', 2000.00, 'Textiles', '2025-07-02', '2025-07-03', 'Delivered'),
(3, 3, 'Hyderabad', 'Bengaluru', 500.25, 'Medicines', '2025-07-03', '2025-07-04', 'Delivered'),
(4, 4, 'Jaipur', 'Pune', 800.75, 'Machinery', '2025-07-04', '2025-07-05', 'Delivered'),
(5, 5, 'Lucknow', 'Ahmedabad', 1200.00, 'Fruits', '2025-07-05', '2025-07-06', 'Delivered'),
(6, 6, 'Patna', 'Guwahati', 700.60, 'Vegetables', '2025-07-06', '2025-07-07', 'Delivered'),
(7, 7, 'Bhopal', 'Nagpur', 300.80, 'Pharma', '2025-07-07', '2025-07-08', 'Delivered'),
(8, 8, 'Ranchi', 'Vijayawada', 450.90, 'Garments', '2025-07-08', '2025-07-09', 'Delivered'),
(9, 9, 'Indore', 'Coimbatore', 1000.00, 'Books', '2025-07-09', '2025-07-10', 'Delivered'),
(10, 10, 'Surat', 'Kochi', 650.00, 'Furniture', '2025-07-10', '2025-07-11', 'Delivered'),
(11, 11, 'Delhi', 'Mumbai', 1550.00, 'Steel', '2025-07-11', '2025-07-12', 'Delivered'),
(12, 12, 'Kolkata', 'Chennai', 2050.00, 'Cotton', '2025-07-12', '2025-07-13', 'Delivered'),
(13, 13, 'Hyderabad', 'Bengaluru', 550.00, 'Chemicals', '2025-07-13', '2025-07-14', 'Delivered'),
(14, 14, 'Jaipur', 'Pune', 850.00, 'Pesticides', '2025-07-14', '2025-07-15', 'Delivered'),
(15, 15, 'Lucknow', 'Ahmedabad', 1250.00, 'Rice', '2025-07-15', '2025-07-16', 'Delivered'),
(16, 16, 'Patna', 'Guwahati', 750.00, 'Sugar', '2025-07-16', '2025-07-17', 'Delivered'),
(17, 17, 'Bhopal', 'Nagpur', 350.00, 'Grains', '2025-07-17', '2025-07-18', 'Delivered'),
(18, 18, 'Ranchi', 'Vijayawada', 500.00, 'Plastic', '2025-07-18', '2025-07-19', 'Delivered'),
(19, 19, 'Indore', 'Coimbatore', 1050.00, 'Paper', '2025-07-19', '2025-07-20', 'Delivered'),
(20, 20, 'Surat', 'Kochi', 700.00, 'Beverages', '2025-07-20', '2025-07-21', 'Delivered');

-- display table data
Select * from Cargo;

-- to delete values from table 
truncate table Cargo;

-- to delete table
drop table Cargo;

-- 1. DDL: Add a new column for CargoPriority
ALTER TABLE Cargo ADD COLUMN CargoPriority VARCHAR(20);

-- 2. DDL: Modify GoodsType length
ALTER TABLE Cargo MODIFY COLUMN GoodsType VARCHAR(100);

-- 3. DDL: Drop the CargoPriority column
ALTER TABLE Cargo DROP COLUMN CargoPriority;

-- 4. DML: Insert a new cargo record
INSERT INTO Cargo (BookingID, TrainID, DepartureStation, ArrivalStation, Weight, GoodsType, DepartureDate, ArrivalDate, Status)
VALUES (21, 5, 'Mumbai', 'Delhi', 900.50, 'Electronics', '2025-07-21', '2025-07-22', 'In Transit');

-- 5. DML: Update status of a cargo shipment
UPDATE Cargo SET Status='Delayed' WHERE CargoID=4;

-- 6. DML: Delete a cargo record
DELETE FROM Cargo WHERE CargoID=20;

-- 7. DQL: Select all cargo shipments
SELECT * FROM Cargo;

-- 8. DQL: Get CargoID, TrainID, GoodsType, Status
SELECT CargoID, TrainID, GoodsType, Status FROM Cargo;

-- 9. DQL: Find all cargo with GoodsType='Electronics'
SELECT * FROM Cargo WHERE GoodsType='Electronics';

-- 10. DQL: Count cargo shipments for TrainID=1
SELECT COUNT(*) AS TotalCargo FROM Cargo WHERE TrainID=1;

-- 11. DQL: Find distinct DepartureStations
SELECT DISTINCT DepartureStation FROM Cargo;

-- 12. DQL: Cargo shipments between '2025-07-05' and '2025-07-10'
SELECT * FROM Cargo WHERE DepartureDate BETWEEN '2025-07-05' AND '2025-07-10';

-- 13. DQL: Order cargo by Weight descending
SELECT * FROM Cargo ORDER BY Weight DESC;

-- 14. DQL: Cargo shipments arriving in 'Mumbai'
SELECT * FROM Cargo WHERE ArrivalStation='Mumbai';

-- 15. DQL: Cargo for TrainID=2 and Status='Delivered'
SELECT * FROM Cargo WHERE TrainID=2 AND Status='Delivered';

-- 16. Constraint: Make GoodsType NOT NULL
ALTER TABLE Cargo MODIFY COLUMN GoodsType VARCHAR(50) NOT NULL;

-- 17. Constraint: Add unique constraint on (BookingID, TrainID, DepartureDate)
ALTER TABLE Cargo ADD CONSTRAINT unique_cargo UNIQUE (BookingID, TrainID, DepartureDate);

-- 18. Operator: Get cargo where TrainID IN (1,3,5)
SELECT * FROM Cargo WHERE TrainID IN (1,3,5);

-- 19. Operator: Get cargo where Status is not 'Delivered'
SELECT * FROM Cargo WHERE Status <> 'Delivered';

-- 20. Operator: Get cargo where Weight > 1000
SELECT * FROM Cargo WHERE Weight > 1000;

-- Table 17: Parcels
CREATE TABLE Parcels (
    ParcelID INT PRIMARY KEY AUTO_INCREMENT,
    BookingID INT,
    SenderName VARCHAR(100),
    ReceiverName VARCHAR(100),
    SourceStation VARCHAR(50),
    DestinationStation VARCHAR(50),
    Weight DECIMAL(10,2),
    DispatchDate DATE,
    DeliveryDate DATE,
    Status VARCHAR(20)
);

INSERT INTO Parcels (BookingID, SenderName, ReceiverName, SourceStation, DestinationStation, Weight, DispatchDate, DeliveryDate, Status)
 VALUES
(1, 'Amit', 'Rajesh', 'Delhi', 'Mumbai', 15.50, '2025-07-01', '2025-07-02', 'Delivered'),
(2, 'Sunita', 'Pooja', 'Kolkata', 'Chennai', 12.00, '2025-07-02', '2025-07-03', 'Delivered'),
(3, 'Rahul', 'Deepak', 'Hyderabad', 'Bengaluru', 5.75, '2025-07-03', '2025-07-04', 'Delivered'),
(4, 'Kiran', 'Anjali', 'Jaipur', 'Pune', 8.50, '2025-07-04', '2025-07-05', 'Delivered'),
(5, 'Ravi', 'Manoj', 'Lucknow', 'Ahmedabad', 10.00, '2025-07-05', '2025-07-06', 'Delivered'),
(6, 'Priya', 'Sneha', 'Patna', 'Guwahati', 6.80, '2025-07-06', '2025-07-07', 'Delivered'),
(7, 'Ankit', 'Vikas', 'Bhopal', 'Nagpur', 4.50, '2025-07-07', '2025-07-08', 'Delivered'),
(8, 'Suman', 'Rohit', 'Ranchi', 'Vijayawada', 7.00, '2025-07-08', '2025-07-09', 'Delivered'),
(9, 'Vinod', 'Sanjay', 'Indore', 'Coimbatore', 12.25, '2025-07-09', '2025-07-10', 'Delivered'),
(10, 'Nisha', 'Meena', 'Surat', 'Kochi', 9.50, '2025-07-10', '2025-07-11', 'Delivered'),
(11, 'Gaurav', 'Sahil', 'Delhi', 'Mumbai', 16.00, '2025-07-11', '2025-07-12', 'Delivered'),
(12, 'Pinky', 'Asha', 'Kolkata', 'Chennai', 11.00, '2025-07-12', '2025-07-13', 'Delivered'),
(13, 'Kunal', 'Bhavesh', 'Hyderabad', 'Bengaluru', 6.00, '2025-07-13', '2025-07-14', 'Delivered'),
(14, 'Mahesh', 'Aditi', 'Jaipur', 'Pune', 8.00, '2025-07-14', '2025-07-15', 'Delivered'),
(15, 'Snehal', 'Ajay', 'Lucknow', 'Ahmedabad', 10.50, '2025-07-15', '2025-07-16', 'Delivered'),
(16, 'Divya', 'Geeta', 'Patna', 'Guwahati', 7.00, '2025-07-16', '2025-07-17', 'Delivered'),
(17, 'Harsh', 'Deepa', 'Bhopal', 'Nagpur', 4.80, '2025-07-17', '2025-07-18', 'Delivered'),
(18, 'Ramesh', 'Shweta', 'Ranchi', 'Vijayawada', 7.20, '2025-07-18', '2025-07-19', 'Delivered'),
(19, 'Suresh', 'Neha', 'Indore', 'Coimbatore', 13.00, '2025-07-19', '2025-07-20', 'Delivered'),
(20, 'Rekha', 'Nitin', 'Surat', 'Kochi', 9.75, '2025-07-20', '2025-07-21', 'Delivered');

-- display table data
Select * from Parcels;

-- to delete values from table 
truncate table Parcels;

-- to delete table
drop table Parcels;

-- 1. DDL: Add a new column for ParcelPriority
ALTER TABLE Parcels ADD COLUMN ParcelPriority VARCHAR(20);

-- 2. DDL: Modify SenderName length
ALTER TABLE Parcels MODIFY COLUMN SenderName VARCHAR(150);

-- 3. DDL: Drop the ParcelPriority column
ALTER TABLE Parcels DROP COLUMN ParcelPriority;

-- 4. DML: Insert a new parcel record
INSERT INTO Parcels (BookingID, SenderName, ReceiverName, SourceStation, DestinationStation, Weight, DispatchDate, DeliveryDate, Status)
VALUES (21, 'Rahul', 'Ritu', 'Delhi', 'Bengaluru', 11.50, '2025-07-21', '2025-07-22', 'In Transit');

-- 5. DML: Update status of a parcel
UPDATE Parcels SET Status='Delayed' WHERE ParcelID=4;

-- 6. DML: Delete a parcel record
DELETE FROM Parcels WHERE ParcelID=20;

-- 7. DQL: Select all parcels
SELECT * FROM Parcels;

-- 8. DQL: Select ParcelID, SenderName, ReceiverName, Status
SELECT ParcelID, SenderName, ReceiverName, Status FROM Parcels;

-- 9. DQL: Find all parcels with Weight > 10
SELECT * FROM Parcels WHERE Weight > 10;

-- 10. DQL: Count parcels sent from 'Delhi'
SELECT COUNT(*) AS TotalParcels FROM Parcels WHERE SourceStation='Delhi';

-- 11. DQL: Find distinct DestinationStations
SELECT DISTINCT DestinationStation FROM Parcels;

-- 12. DQL: Parcels dispatched between '2025-07-05' and '2025-07-10'
SELECT * FROM Parcels WHERE DispatchDate BETWEEN '2025-07-05' AND '2025-07-10';

-- 13. DQL: Order parcels by Weight descending
SELECT * FROM Parcels ORDER BY Weight DESC;

-- 14. DQL: Parcels delivered to 'Mumbai'
SELECT * FROM Parcels WHERE DestinationStation='Mumbai';

-- 15. DQL: Parcels with Status='Delivered'
SELECT * FROM Parcels WHERE Status='Delivered';

-- 16. Constraint: Make ReceiverName NOT NULL
ALTER TABLE Parcels MODIFY COLUMN ReceiverName VARCHAR(100) NOT NULL;

-- 17. Constraint: Add unique constraint on (BookingID, SourceStation, DestinationStation, DispatchDate)
ALTER TABLE Parcels ADD CONSTRAINT unique_parcel UNIQUE (BookingID, SourceStation, DestinationStation, DispatchDate);

-- 18. Operator: Get parcels where SourceStation IN ('Delhi','Kolkata','Mumbai')
SELECT * FROM Parcels WHERE SourceStation IN ('Delhi','Kolkata','Mumbai');

-- 19. Operator: Get parcels where Status is not 'Delivered'
SELECT * FROM Parcels WHERE Status <> 'Delivered';

-- 20. Operator: Get parcels where Weight BETWEEN 5 AND 10
SELECT * FROM Parcels WHERE Weight BETWEEN 5 AND 10;


-- Table 18: FreightBookings
CREATE TABLE FreightBookings (
    FreightID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerName VARCHAR(100),
    GoodsType VARCHAR(50),
    Quantity INT,
    Weight DECIMAL(10,2),
    SourceStation VARCHAR(50),
    DestinationStation VARCHAR(50),
    BookingDate DATE,
    DeliveryDate DATE,
    Status VARCHAR(20)
);

INSERT INTO FreightBookings (CustomerName, GoodsType, Quantity, Weight, SourceStation, DestinationStation, BookingDate, DeliveryDate, Status) 
VALUES
('ABC Ltd', 'Coal', 100, 5000.00, 'Delhi', 'Mumbai', '2025-07-01', '2025-07-02', 'Delivered'),
('XYZ Traders', 'Steel', 80, 4000.00, 'Kolkata', 'Chennai', '2025-07-02', '2025-07-03', 'Delivered'),
('PQR Pvt Ltd', 'Cement', 50, 2500.00, 'Hyderabad', 'Bengaluru', '2025-07-03', '2025-07-04', 'Delivered'),
('LMN Corp', 'Machinery', 30, 1500.00, 'Jaipur', 'Pune', '2025-07-04', '2025-07-05', 'Delivered'),
('RST Group', 'Fertilizers', 70, 3500.00, 'Lucknow', 'Ahmedabad', '2025-07-05', '2025-07-06', 'Delivered'),
('UVW Exports', 'Textiles', 60, 3000.00, 'Patna', 'Guwahati', '2025-07-06', '2025-07-07', 'Delivered'),
('DEF Logistics', 'Food Grains', 90, 4500.00, 'Bhopal', 'Nagpur', '2025-07-07', '2025-07-08', 'Delivered'),
('GHI Supply', 'Furniture', 20, 1000.00, 'Ranchi', 'Vijayawada', '2025-07-08', '2025-07-09', 'Delivered'),
('JKL Cargo', 'Chemicals', 40, 2000.00, 'Indore', 'Coimbatore', '2025-07-09', '2025-07-10', 'Delivered'),
('MNO Movers', 'Beverages', 35, 1750.00, 'Surat', 'Kochi', '2025-07-10', '2025-07-11', 'Delivered'),
('Alpha Ltd', 'Pharma', 25, 1250.00, 'Delhi', 'Mumbai', '2025-07-11', '2025-07-12', 'Delivered'),
('Beta Traders', 'Plastics', 45, 2250.00, 'Kolkata', 'Chennai', '2025-07-12', '2025-07-13', 'Delivered'),
('Gamma Pvt Ltd', 'Electronics', 30, 1500.00, 'Hyderabad', 'Bengaluru', '2025-07-13', '2025-07-14', 'Delivered'),
('Delta Corp', 'Toys', 50, 2500.00, 'Jaipur', 'Pune', '2025-07-14', '2025-07-15', 'Delivered'),
('Epsilon Group', 'Paper', 55, 2750.00, 'Lucknow', 'Ahmedabad', '2025-07-15', '2025-07-16', 'Delivered'),
('Zeta Exports', 'Rubber', 65, 3250.00, 'Patna', 'Guwahati', '2025-07-16', '2025-07-17', 'Delivered'),
('Eta Logistics', 'Books', 70, 3500.00, 'Bhopal', 'Nagpur', '2025-07-17', '2025-07-18', 'Delivered'),
('Theta Supply', 'Leather', 60, 3000.00, 'Ranchi', 'Vijayawada', '2025-07-18', '2025-07-19', 'Delivered'),
('Iota Cargo', 'Glass', 40, 2000.00, 'Indore', 'Coimbatore', '2025-07-19', '2025-07-20', 'Delivered'),
('Kappa Movers', 'Metals', 55, 2750.00, 'Surat', 'Kochi', '2025-07-20', '2025-07-21', 'Delivered');

-- display table data
Select * from FreightBookings;

-- to delete values from table 
truncate table FreightBookings;

-- to delete table
drop table FreightBookings;

-- 1. DDL: Add a new column for FreightPriority
ALTER TABLE FreightBookings ADD COLUMN FreightPriority VARCHAR(20);

-- 2. DDL: Modify CustomerName length
ALTER TABLE FreightBookings MODIFY COLUMN CustomerName VARCHAR(150);

-- 3. DDL: Drop the FreightPriority column
ALTER TABLE FreightBookings DROP COLUMN FreightPriority;

-- 4. DML: Insert a new freight booking
INSERT INTO FreightBookings (CustomerName, GoodsType, Quantity, Weight, SourceStation, DestinationStation, BookingDate, DeliveryDate, Status)
VALUES ('Omega Ltd', 'Pharma', 30, 1500.00, 'Delhi', 'Chennai', '2025-07-21', '2025-07-22', 'In Transit');

-- 5. DML: Update status of a booking
UPDATE FreightBookings SET Status='Delayed' WHERE FreightID=4;

-- 6. DML: Delete a freight booking
DELETE FROM FreightBookings WHERE FreightID=20;

-- 7. DQL: Select all freight bookings
SELECT * FROM FreightBookings;

-- 8. DQL: Select FreightID, CustomerName, GoodsType, Status
SELECT FreightID, CustomerName, GoodsType, Status FROM FreightBookings;

-- 9. DQL: Find all bookings with Weight > 3000
SELECT * FROM FreightBookings WHERE Weight > 3000;

-- 10. DQL: Count bookings from 'Delhi'
SELECT COUNT(*) AS TotalBookings FROM FreightBookings WHERE SourceStation='Delhi';

-- 11. DQL: Find distinct DestinationStations
SELECT DISTINCT DestinationStation FROM FreightBookings;

-- 12. DQL: Bookings between '2025-07-05' and '2025-07-10'
SELECT * FROM FreightBookings WHERE BookingDate BETWEEN '2025-07-05' AND '2025-07-10';

-- 13. DQL: Order bookings by Weight descending
SELECT * FROM FreightBookings ORDER BY Weight DESC;

-- 14. DQL: Bookings delivered to 'Mumbai'
SELECT * FROM FreightBookings WHERE DestinationStation='Mumbai';

-- 15. DQL: Bookings with Status='Delivered'
SELECT * FROM FreightBookings WHERE Status='Delivered';

-- 16. Constraint: Make CustomerName NOT NULL
ALTER TABLE FreightBookings MODIFY COLUMN CustomerName VARCHAR(100) NOT NULL;

-- 17. Constraint: Add unique constraint on (CustomerName, SourceStation, DestinationStation, BookingDate)
ALTER TABLE FreightBookings ADD CONSTRAINT unique_freight UNIQUE (CustomerName, SourceStation, DestinationStation, BookingDate);

-- 18. Operator: Bookings where SourceStation IN ('Delhi','Kolkata','Mumbai')
SELECT * FROM FreightBookings WHERE SourceStation IN ('Delhi','Kolkata','Mumbai');

-- 19. Operator: Bookings where Status is not 'Delivered'
SELECT * FROM FreightBookings WHERE Status <> 'Delivered';

-- 20. Operator: Bookings with Weight BETWEEN 1000 AND 3000
SELECT * FROM FreightBookings WHERE Weight BETWEEN 1000 AND 3000;


-- Table 19: Signals
CREATE TABLE Signals (
    SignalID INT PRIMARY KEY AUTO_INCREMENT,
    RouteID INT,
    SignalType VARCHAR(50),
    Location VARCHAR(100),
    Status VARCHAR(20),
    LastCheckDate DATE,
    NextCheckDate DATE,
    MaintenanceStatus VARCHAR(20),
    MaintainedBy VARCHAR(50),
    Remarks TEXT
);

INSERT INTO Signals (RouteID, SignalType, Location, Status, LastCheckDate, NextCheckDate, MaintenanceStatus, MaintainedBy, Remarks) 
VALUES
(1, 'Semaphore', 'Delhi Yard', 'Operational', '2025-06-30', '2025-07-30', 'Good', 'Engg Team A', 'OK'),
(2, 'LED', 'Howrah Station', 'Operational', '2025-06-29', '2025-07-29', 'Good', 'Engg Team B', 'OK'),
(3, 'Color Light', 'Secunderabad', 'Operational', '2025-06-28', '2025-07-28', 'Good', 'Engg Team C', 'OK'),
(4, 'Semaphore', 'Pune Yard', 'Operational', '2025-06-27', '2025-07-27', 'Good', 'Engg Team A', 'OK'),
(5, 'LED', 'Ahmedabad', 'Operational', '2025-06-26', '2025-07-26', 'Good', 'Engg Team B', 'OK'),
(6, 'Color Light', 'Guwahati', 'Operational', '2025-06-25', '2025-07-25', 'Good', 'Engg Team C', 'OK'),
(7, 'Semaphore', 'Nagpur', 'Operational', '2025-06-24', '2025-07-24', 'Good', 'Engg Team A', 'OK'),
(8, 'LED', 'Vijayawada', 'Operational', '2025-06-23', '2025-07-23', 'Good', 'Engg Team B', 'OK'),
(9, 'Color Light', 'Coimbatore', 'Operational', '2025-06-22', '2025-07-22', 'Good', 'Engg Team C', 'OK'),
(10, 'Semaphore', 'Kochi Yard', 'Operational', '2025-06-21', '2025-07-21', 'Good', 'Engg Team A', 'OK'),
(11, 'LED', 'Delhi Yard', 'Operational', '2025-06-20', '2025-07-20', 'Good', 'Engg Team B', 'OK'),
(12, 'Color Light', 'Howrah', 'Operational', '2025-06-19', '2025-07-19', 'Good', 'Engg Team C', 'OK'),
(13, 'Semaphore', 'Secunderabad', 'Operational', '2025-06-18', '2025-07-18', 'Good', 'Engg Team A', 'OK'),
(14, 'LED', 'Pune Yard', 'Operational', '2025-06-17', '2025-07-17', 'Good', 'Engg Team B', 'OK'),
(15, 'Color Light', 'Ahmedabad', 'Operational', '2025-06-16', '2025-07-16', 'Good', 'Engg Team C', 'OK'),
(16, 'Semaphore', 'Guwahati', 'Operational', '2025-06-15', '2025-07-15', 'Good', 'Engg Team A', 'OK'),
(17, 'LED', 'Nagpur', 'Operational', '2025-06-14', '2025-07-14', 'Good', 'Engg Team B', 'OK'),
(18, 'Color Light', 'Vijayawada', 'Operational', '2025-06-13', '2025-07-13', 'Good', 'Engg Team C', 'OK'),
(19, 'Semaphore', 'Coimbatore', 'Operational', '2025-06-12', '2025-07-12', 'Good', 'Engg Team A', 'OK'),
(20, 'LED', 'Kochi Yard', 'Operational', '2025-06-11', '2025-07-11', 'Good', 'Engg Team B', 'OK');

-- display table data
Select * from Signals;

-- to delete values from table 
truncate table Signals;

-- to delete table
drop table Signals;

-- 1. DDL: Add a new column for SignalPriority
ALTER TABLE Signals ADD COLUMN SignalPriority VARCHAR(20);

-- 2. DDL: Modify SignalType length
ALTER TABLE Signals MODIFY COLUMN SignalType VARCHAR(100);

-- 3. DDL: Drop the SignalPriority column
ALTER TABLE Signals DROP COLUMN SignalPriority;

-- 4. DML: Insert a new signal record
INSERT INTO Signals (RouteID, SignalType, Location, Status, LastCheckDate, NextCheckDate, MaintenanceStatus, MaintainedBy, Remarks)
VALUES (21, 'LED', 'Mumbai Yard', 'Operational', '2025-07-01', '2025-08-01', 'Good', 'Engg Team D', 'New Installation');

-- 5. DML: Update status of a signal
UPDATE Signals SET Status='Under Maintenance' WHERE SignalID=5;

-- 6. DML: Delete a signal record
DELETE FROM Signals WHERE SignalID=20;

-- 7. DQL: Select all signals
SELECT * FROM Signals;

-- 8. DQL: Select SignalID, SignalType, Status, Location
SELECT SignalID, SignalType, Status, Location FROM Signals;

-- 9. DQL: Find all signals maintained by 'Engg Team A'
SELECT * FROM Signals WHERE MaintainedBy='Engg Team A';

-- 10. DQL: Count signals per Status
SELECT Status, COUNT(*) AS TotalSignals FROM Signals GROUP BY Status;

-- 11. DQL: Find signals that are 'Operational'
SELECT * FROM Signals WHERE Status='Operational';

-- 12. DQL: Signals last checked before '2025-06-20'
SELECT * FROM Signals WHERE LastCheckDate < '2025-06-20';

-- 13. DQL: Order signals by NextCheckDate ascending
SELECT * FROM Signals ORDER BY NextCheckDate ASC;

-- 14. DQL: Select distinct SignalTypes
SELECT DISTINCT SignalType FROM Signals;

-- 15. DQL: Signals on RouteID 1 or 2
SELECT * FROM Signals WHERE RouteID IN (1,2);

-- 16. Constraint: Make Location NOT NULL
ALTER TABLE Signals MODIFY COLUMN Location VARCHAR(100) NOT NULL;

-- 17. Constraint: Add unique constraint on (RouteID, SignalType, Location)
ALTER TABLE Signals ADD CONSTRAINT unique_signal UNIQUE (RouteID, SignalType, Location);

-- 18. Operator: Signals with NextCheckDate BETWEEN '2025-07-01' AND '2025-07-30'
SELECT * FROM Signals WHERE NextCheckDate BETWEEN '2025-07-01' AND '2025-07-30';

-- 19. Operator: Signals with Status not equal to 'Operational'
SELECT * FROM Signals WHERE Status <> 'Operational';

-- 20. Operator: Signals maintained by Team B or Team C
SELECT * FROM Signals WHERE MaintainedBy IN ('Engg Team B', 'Engg Team C');


-- Table 20: Tracks
CREATE TABLE Tracks (
    TrackID INT PRIMARY KEY AUTO_INCREMENT,
    RouteID INT,
    SectionName VARCHAR(100),
    Length_KM DECIMAL(5,2),
    GaugeType VARCHAR(20),
    ConditionStatus VARCHAR(20),
    LastInspection DATE,
    NextInspection DATE,
    MaintainedBy VARCHAR(50),
    Remarks TEXT
);

INSERT INTO Tracks (RouteID, SectionName, Length_KM, GaugeType, ConditionStatus, LastInspection, NextInspection, MaintainedBy, Remarks) 
VALUES
(1, 'Delhi - Agra', 200.50, 'Broad', 'Good', '2025-06-01', '2025-07-01', 'Track Team A', 'No issues'),
(2, 'Kolkata - Durgapur', 170.75, 'Broad', 'Good', '2025-06-02', '2025-07-02', 'Track Team B', 'Ok'),
(3, 'Hyderabad - Warangal', 140.30, 'Broad', 'Good', '2025-06-03', '2025-07-03', 'Track Team C', 'Ok'),
(4, 'Jaipur - Ajmer', 130.00, 'Broad', 'Good', '2025-06-04', '2025-07-04', 'Track Team A', 'Ok'),
(5, 'Lucknow - Kanpur', 80.60, 'Broad', 'Good', '2025-06-05', '2025-07-05', 'Track Team B', 'Ok'),
(6, 'Patna - Gaya', 90.40, 'Broad', 'Good', '2025-06-06', '2025-07-06', 'Track Team C', 'Ok'),
(7, 'Bhopal - Itarsi', 110.00, 'Broad', 'Good', '2025-06-07', '2025-07-07', 'Track Team A', 'Ok'),
(8, 'Ranchi - Bokaro', 95.50, 'Broad', 'Good', '2025-06-08', '2025-07-08', 'Track Team B', 'Ok'),
(9, 'Indore - Ratlam', 120.75, 'Broad', 'Good', '2025-06-09', '2025-07-09', 'Track Team C', 'Ok'),
(10, 'Surat - Vadodara', 140.90, 'Broad', 'Good', '2025-06-10', '2025-07-10', 'Track Team A', 'Ok'),
(11, 'Delhi - Ambala', 200.00, 'Broad', 'Good', '2025-06-11', '2025-07-11', 'Track Team B', 'Ok'),
(12, 'Kolkata - Asansol', 150.00, 'Broad', 'Good', '2025-06-12', '2025-07-12', 'Track Team C', 'Ok'),
(13, 'Hyderabad - Nanded', 180.00, 'Broad', 'Good', '2025-06-13', '2025-07-13', 'Track Team A', 'Ok'),
(14, 'Jaipur - Kota', 200.00, 'Broad', 'Good', '2025-06-14', '2025-07-14', 'Track Team B', 'Ok'),
(15, 'Lucknow - Varanasi', 120.00, 'Broad', 'Good', '2025-06-15', '2025-07-15', 'Track Team C', 'Ok'),
(16, 'Patna - Muzaffarpur', 80.00, 'Broad', 'Good', '2025-06-16', '2025-07-16', 'Track Team A', 'Ok'),
(17, 'Bhopal - Jabalpur', 150.00, 'Broad', 'Good', '2025-06-17', '2025-07-17', 'Track Team B', 'Ok'),
(18, 'Ranchi - Dhanbad', 85.00, 'Broad', 'Good', '2025-06-18', '2025-07-18', 'Track Team C', 'Ok'),
(19, 'Indore - Bhopal', 180.00, 'Broad', 'Good', '2025-06-19', '2025-07-19', 'Track Team A', 'Ok'),
(20, 'Surat - Mumbai', 250.00, 'Broad', 'Good', '2025-06-20', '2025-07-20', 'Track Team B', 'Ok');

-- display table data
Select * from Tracks;

-- to delete values from table 
truncate table Tracks;

-- to delete table
drop table Tracks;

-- 1. DDL: Add a new column TrackPriority
ALTER TABLE Tracks ADD COLUMN TrackPriority VARCHAR(20);

-- 2. DDL: Modify Length_KM precision
ALTER TABLE Tracks MODIFY COLUMN Length_KM DECIMAL(6,2);

-- 3. DDL: Drop the TrackPriority column
ALTER TABLE Tracks DROP COLUMN TrackPriority;

-- 4. DML: Insert a new track record
INSERT INTO Tracks (RouteID, SectionName, Length_KM, GaugeType, ConditionStatus, LastInspection, NextInspection, MaintainedBy, Remarks)
VALUES (21, 'Mumbai - Pune', 150.50, 'Broad', 'Good', '2025-07-01', '2025-08-01', 'Track Team D', 'New section');

-- 5. DML: Update ConditionStatus of a track
UPDATE Tracks SET ConditionStatus='Needs Repair' WHERE TrackID=5;

-- 6. DML: Delete a track record
DELETE FROM Tracks WHERE TrackID=20;

-- 7. DQL: Select all tracks
SELECT * FROM Tracks;

-- 8. DQL: Select TrackID, SectionName, Length_KM, ConditionStatus
SELECT TrackID, SectionName, Length_KM, ConditionStatus FROM Tracks;

-- 9. DQL: Tracks maintained by 'Track Team A'
SELECT * FROM Tracks WHERE MaintainedBy='Track Team A';

-- 10. DQL: Count tracks per ConditionStatus
SELECT ConditionStatus, COUNT(*) AS TotalTracks FROM Tracks GROUP BY ConditionStatus;

-- 11. DQL: Tracks with Length_KM greater than 150
SELECT * FROM Tracks WHERE Length_KM > 150;

-- 12. DQL: Tracks last inspected before '2025-06-10'
SELECT * FROM Tracks WHERE LastInspection < '2025-06-10';

-- 13. DQL: Order tracks by NextInspection ascending
SELECT * FROM Tracks ORDER BY NextInspection ASC;

-- 14. DQL: Select distinct GaugeTypes
SELECT DISTINCT GaugeType FROM Tracks;

-- 15. DQL: Tracks on RouteID 1 or 2
SELECT * FROM Tracks WHERE RouteID IN (1,2);

-- 16. Constraint: Make SectionName NOT NULL
ALTER TABLE Tracks MODIFY COLUMN SectionName VARCHAR(100) NOT NULL;

-- 17. Constraint: Add unique constraint on (RouteID, SectionName)
ALTER TABLE Tracks ADD CONSTRAINT unique_track UNIQUE (RouteID, SectionName);

-- 18. Operator: Tracks with NextInspection BETWEEN '2025-07-01' AND '2025-07-31'
SELECT * FROM Tracks WHERE NextInspection BETWEEN '2025-07-01' AND '2025-07-31';

-- 19. Operator: Tracks with ConditionStatus not equal to 'Good'
SELECT * FROM Tracks WHERE ConditionStatus <> 'Good';

-- 20. Operator: Tracks maintained by Team B or Team C
SELECT * FROM Tracks WHERE MaintainedBy IN ('Track Team B', 'Track Team C');


-- Table 21: Bridges
CREATE TABLE Bridges (
    BridgeID INT PRIMARY KEY AUTO_INCREMENT,
    TrackID INT,
    BridgeName VARCHAR(100),
    Location VARCHAR(100),
    Length_M DECIMAL(6,2),
    Type VARCHAR(50),
    ConditionStatus VARCHAR(20),
    LastInspection DATE,
    NextInspection DATE,
    Remarks TEXT
);

INSERT INTO Bridges (TrackID, BridgeName, Location, Length_M, Type, ConditionStatus, LastInspection, NextInspection, Remarks) 
VALUES
(1, 'Yamuna Bridge', 'Delhi', 1200.50, 'Steel', 'Good', '2025-06-01', '2025-07-01', 'No cracks'),
(2, 'Hooghly Bridge', 'Kolkata', 950.75, 'Suspension', 'Good', '2025-06-02', '2025-07-02', 'Ok'),
(3, 'Musheerabad Bridge', 'Hyderabad', 500.30, 'Concrete', 'Good', '2025-06-03', '2025-07-03', 'Ok'),
(4, 'Ajmer Bridge', 'Ajmer', 400.00, 'Steel', 'Good', '2025-06-04', '2025-07-04', 'Ok'),
(5, 'Kanpur Flyover', 'Kanpur', 350.60, 'Concrete', 'Good', '2025-06-05', '2025-07-05', 'Ok'),
(6, 'Gaya Bridge', 'Gaya', 300.40, 'Steel', 'Good', '2025-06-06', '2025-07-06', 'Ok'),
(7, 'Itarsi Bridge', 'Itarsi', 280.00, 'Concrete', 'Good', '2025-06-07', '2025-07-07', 'Ok'),
(8, 'Bokaro Bridge', 'Bokaro', 320.50, 'Steel', 'Good', '2025-06-08', '2025-07-08', 'Ok'),
(9, 'Ratlam Bridge', 'Ratlam', 400.75, 'Concrete', 'Good', '2025-06-09', '2025-07-09', 'Ok'),
(10, 'Vadodara Flyover', 'Vadodara', 500.90, 'Steel', 'Good', '2025-06-10', '2025-07-10', 'Ok'),
(11, 'Ambala Bridge', 'Ambala', 600.00, 'Concrete', 'Good', '2025-06-11', '2025-07-11', 'Ok'),
(12, 'Asansol Bridge', 'Asansol', 700.00, 'Steel', 'Good', '2025-06-12', '2025-07-12', 'Ok'),
(13, 'Nanded Bridge', 'Nanded', 800.00, 'Concrete', 'Good', '2025-06-13', '2025-07-13', 'Ok'),
(14, 'Kota Bridge', 'Kota', 850.00, 'Steel', 'Good', '2025-06-14', '2025-07-14', 'Ok'),
(15, 'Varanasi Bridge', 'Varanasi', 750.00, 'Concrete', 'Good', '2025-06-15', '2025-07-15', 'Ok'),
(16, 'Muzaffarpur Bridge', 'Muzaffarpur', 650.00, 'Steel', 'Good', '2025-06-16', '2025-07-16', 'Ok'),
(17, 'Jabalpur Bridge', 'Jabalpur', 550.00, 'Concrete', 'Good', '2025-06-17', '2025-07-17', 'Ok'),
(18, 'Dhanbad Bridge', 'Dhanbad', 500.00, 'Steel', 'Good', '2025-06-18', '2025-07-18', 'Ok'),
(19, 'Bhopal Bridge', 'Bhopal', 450.00, 'Concrete', 'Good', '2025-06-19', '2025-07-19', 'Ok'),
(20, 'Mumbai Bridge', 'Mumbai', 1000.00, 'Steel', 'Good', '2025-06-20', '2025-07-20', 'Ok');

-- display table data
Select * from Bridges;

-- to delete values from table 
truncate table Bridges;

-- to delete table
drop table Bridges;

-- 1. DDL: Add a new column LoadCapacity
ALTER TABLE Bridges ADD COLUMN LoadCapacity DECIMAL(10,2);

-- 2. DDL: Modify Length_M precision
ALTER TABLE Bridges MODIFY COLUMN Length_M DECIMAL(7,2);

-- 3. DDL: Drop the LoadCapacity column
ALTER TABLE Bridges DROP COLUMN LoadCapacity;

-- 4. DML: Insert a new bridge record
INSERT INTO Bridges (TrackID, BridgeName, Location, Length_M, Type, ConditionStatus, LastInspection, NextInspection, Remarks)
VALUES (21, 'Navi Mumbai Bridge', 'Navi Mumbai', 900.00, 'Steel', 'Good', '2025-07-01', '2025-08-01', 'Newly constructed');

-- 5. DML: Update ConditionStatus of a bridge
UPDATE Bridges SET ConditionStatus='Needs Repair' WHERE BridgeID=5;

-- 6. DML: Delete a bridge record
DELETE FROM Bridges WHERE BridgeID=20;

-- 7. DQL: Select all bridges
SELECT * FROM Bridges;

-- 8. DQL: Select BridgeID, BridgeName, Location, Length_M, ConditionStatus
SELECT BridgeID, BridgeName, Location, Length_M, ConditionStatus FROM Bridges;

-- 9. DQL: Bridges of type 'Steel'
SELECT * FROM Bridges WHERE Type='Steel';

-- 10. DQL: Count bridges by ConditionStatus
SELECT ConditionStatus, COUNT(*) AS TotalBridges FROM Bridges GROUP BY ConditionStatus;

-- 11. DQL: Bridges with Length_M greater than 800
SELECT * FROM Bridges WHERE Length_M > 800;

-- 12. DQL: Bridges last inspected before '2025-06-10'
SELECT * FROM Bridges WHERE LastInspection < '2025-06-10';

-- 13. DQL: Order bridges by NextInspection ascending
SELECT * FROM Bridges ORDER BY NextInspection ASC;

-- 14. DQL: Select distinct Types of bridges
SELECT DISTINCT Type FROM Bridges;

-- 15. DQL: Bridges on TrackID 1 or 2
SELECT * FROM Bridges WHERE TrackID IN (1,2);

-- 16. Constraint: Make BridgeName NOT NULL
ALTER TABLE Bridges MODIFY COLUMN BridgeName VARCHAR(100) NOT NULL;

-- 17. Constraint: Add unique constraint on (TrackID, BridgeName)
ALTER TABLE Bridges ADD CONSTRAINT unique_bridge UNIQUE (TrackID, BridgeName);

-- 18. Operator: Bridges with NextInspection BETWEEN '2025-07-01' AND '2025-07-31'
SELECT * FROM Bridges WHERE NextInspection BETWEEN '2025-07-01' AND '2025-07-31';

-- 19. Operator: Bridges with ConditionStatus not equal to 'Good'
SELECT * FROM Bridges WHERE ConditionStatus <> 'Good';

-- 20. Operator: Bridges of type 'Steel' or 'Concrete'
SELECT * FROM Bridges WHERE Type IN ('Steel','Concrete');

-- Table 22: Bridges
CREATE TABLE LevelCrossings (
    CrossingID INT PRIMARY KEY AUTO_INCREMENT,
    TrackID INT,
    Location VARCHAR(100),
    CrossingType VARCHAR(50),
    GateStatus VARCHAR(20),
    AttendantName VARCHAR(100),
    ContactNumber VARCHAR(15),
    LastInspection DATE,
    NextInspection DATE,
    Remarks TEXT
);

INSERT INTO LevelCrossings (TrackID, Location, CrossingType, GateStatus, AttendantName, ContactNumber, LastInspection, NextInspection, Remarks) 
VALUES
(1, 'NH-2 Delhi', 'Manned', 'Operational', 'Rakesh Kumar', '9876543210', '2025-06-01', '2025-07-01', 'Working fine'),
(2, 'GT Road Kolkata', 'Manned', 'Operational', 'Sunil Das', '9876543211', '2025-06-02', '2025-07-02', 'Working fine'),
(3, 'Warangal Bypass', 'Unmanned', 'Operational', 'Raju Yadav', '9876543212', '2025-06-03', '2025-07-03', 'Signage good'),
(4, 'Ajmer Link Road', 'Manned', 'Operational', 'Prakash Singh', '9876543213', '2025-06-04', '2025-07-04', 'Ok'),
(5, 'Kanpur Outer', 'Unmanned', 'Operational', 'Deepak Sahu', '9876543214', '2025-06-05', '2025-07-05', 'Ok'),
(6, 'Gaya Ring Road', 'Manned', 'Operational', 'Santosh Kumar', '9876543215', '2025-06-06', '2025-07-06', 'Ok'),
(7, 'Itarsi Highway', 'Manned', 'Operational', 'Mukesh Patel', '9876543216', '2025-06-07', '2025-07-07', 'Ok'),
(8, 'Bokaro Main Road', 'Manned', 'Operational', 'Anil Kumar', '9876543217', '2025-06-08', '2025-07-08', 'Ok'),
(9, 'Ratlam Road', 'Unmanned', 'Operational', 'Amit Sharma', '9876543218', '2025-06-09', '2025-07-09', 'Ok'),
(10, 'Vadodara Bypass', 'Manned', 'Operational', 'Suresh Bhai', '9876543219', '2025-06-10', '2025-07-10', 'Ok'),
(11, 'Ambala Crossing', 'Manned', 'Operational', 'Harpreet Singh', '9876543220', '2025-06-11', '2025-07-11', 'Ok'),
(12, 'Asansol Road', 'Unmanned', 'Operational', 'Manish Das', '9876543221', '2025-06-12', '2025-07-12', 'Ok'),
(13, 'Nanded Gate', 'Manned', 'Operational', 'Pradeep Rao', '9876543222', '2025-06-13', '2025-07-13', 'Ok'),
(14, 'Kota Bypass', 'Unmanned', 'Operational', 'Rajeev Jain', '9876543223', '2025-06-14', '2025-07-14', 'Ok'),
(15, 'Varanasi Road', 'Manned', 'Operational', 'Shyam Yadav', '9876543224', '2025-06-15', '2025-07-15', 'Ok'),
(16, 'Muzaffarpur Outer', 'Manned', 'Operational', 'Ravi Kishan', '9876543225', '2025-06-16', '2025-07-16', 'Ok'),
(17, 'Jabalpur Crossing', 'Unmanned', 'Operational', 'Mahesh Gupta', '9876543226', '2025-06-17', '2025-07-17', 'Ok'),
(18, 'Dhanbad Road', 'Manned', 'Operational', 'Sanjay Kumar', '9876543227', '2025-06-18', '2025-07-18', 'Ok'),
(19, 'Bhopal Bypass', 'Manned', 'Operational', 'Gopal Mishra', '9876543228', '2025-06-19', '2025-07-19', 'Ok'),
(20, 'Mumbai Suburb', 'Manned', 'Operational', 'Raj Malhotra', '9876543229', '2025-06-20', '2025-07-20', 'Ok');

-- display table data
Select * from LevelCrossings;

-- to delete values from table 
truncate table LevelCrossings;

-- to delete table
drop table LevelCrossings;

-- 1. DDL: Add a new column for CrossingHeight
ALTER TABLE LevelCrossings ADD COLUMN CrossingHeight DECIMAL(5,2);

-- 2. DDL: Modify ContactNumber length
ALTER TABLE LevelCrossings MODIFY COLUMN ContactNumber VARCHAR(20);

-- 3. DDL: Drop CrossingHeight column
ALTER TABLE LevelCrossings DROP COLUMN CrossingHeight;

-- 4. DML: Insert a new level crossing
INSERT INTO LevelCrossings (TrackID, Location, CrossingType, GateStatus, AttendantName, ContactNumber, LastInspection, NextInspection, Remarks)
VALUES (21, 'Pune Outer', 'Manned', 'Operational', 'Ajay Kumar', '9876543230', '2025-07-01', '2025-08-01', 'New crossing');

-- 5. DML: Update GateStatus
UPDATE LevelCrossings SET GateStatus='Under Maintenance' WHERE CrossingID=5;

-- 6. DML: Delete a crossing
DELETE FROM LevelCrossings WHERE CrossingID=20;

-- 7. DQL: Select all level crossings
SELECT * FROM LevelCrossings;

-- 8. DQL: Select CrossingID, Location, GateStatus, AttendantName
SELECT CrossingID, Location, GateStatus, AttendantName FROM LevelCrossings;

-- 9. DQL: Select only manned crossings
SELECT * FROM LevelCrossings WHERE CrossingType='Manned';

-- 10. DQL: Count crossings by GateStatus
SELECT GateStatus, COUNT(*) AS TotalCrossings FROM LevelCrossings GROUP BY GateStatus;

-- 11. DQL: Crossings inspected before '2025-06-10'
SELECT * FROM LevelCrossings WHERE LastInspection < '2025-06-10';

-- 12. DQL: Order crossings by NextInspection descending
SELECT * FROM LevelCrossings ORDER BY NextInspection DESC;

-- 13. DQL: Select distinct CrossingTypes
SELECT DISTINCT CrossingType FROM LevelCrossings;

-- 14. DQL: Crossings where AttendantName starts with 'R'
SELECT * FROM LevelCrossings WHERE AttendantName LIKE 'R%';

-- 15. DQL: Crossings on TrackID 1 or 2
SELECT * FROM LevelCrossings WHERE TrackID IN (1,2);

-- 16. Constraint: Make Location NOT NULL
ALTER TABLE LevelCrossings MODIFY COLUMN Location VARCHAR(100) NOT NULL;

-- 17. Constraint: Add unique constraint on (TrackID, Location)
ALTER TABLE LevelCrossings ADD CONSTRAINT unique_crossing UNIQUE (TrackID, Location);

-- 18. Operator: Crossings with NextInspection BETWEEN '2025-07-01' AND '2025-07-31'
SELECT * FROM LevelCrossings WHERE NextInspection BETWEEN '2025-07-01' AND '2025-07-31';

-- 19. Operator: Crossings with GateStatus not equal to 'Operational'
SELECT * FROM LevelCrossings WHERE GateStatus <> 'Operational';

-- 20. Operator: Crossings of type 'Manned' or 'Unmanned'
SELECT * FROM LevelCrossings WHERE CrossingType IN ('Manned','Unmanned');


-- Table 23: Bridges
CREATE TABLE ControlRooms (
    ControlRoomID INT PRIMARY KEY AUTO_INCREMENT,
    Location VARCHAR(100),
    InCharge VARCHAR(100),
    ContactNumber VARCHAR(15),
    Shift VARCHAR(20),
    NoOfStaff INT,
    EquipmentStatus VARCHAR(20),
    LastAudit DATE,
    NextAudit DATE,
    Remarks TEXT
);

INSERT INTO ControlRooms (Location, InCharge, ContactNumber, Shift, NoOfStaff, EquipmentStatus, LastAudit, NextAudit, Remarks) 
VALUES
('Delhi HQ', 'Arun Verma', '9890011111', 'Day', 15, 'Good', '2025-06-01', '2025-07-01', 'All systems fine'),
('Kolkata HQ', 'Shreya Ghosh', '9890022222', 'Night', 12, 'Good', '2025-06-02', '2025-07-02', 'Working fine'),
('Hyderabad HQ', 'Kiran Rao', '9890033333', 'Day', 10, 'Good', '2025-06-03', '2025-07-03', 'Ok'),
('Jaipur HQ', 'Pradeep Singh', '9890044444', 'Night', 8, 'Good', '2025-06-04', '2025-07-04', 'Ok'),
('Lucknow HQ', 'Neha Sharma', '9890055555', 'Day', 9, 'Good', '2025-06-05', '2025-07-05', 'Ok'),
('Patna HQ', 'Ravi Ranjan', '9890066666', 'Night', 7, 'Good', '2025-06-06', '2025-07-06', 'Ok'),
('Bhopal HQ', 'Sunil Patel', '9890077777', 'Day', 11, 'Good', '2025-06-07', '2025-07-07', 'Ok'),
('Ranchi HQ', 'Anita Kumari', '9890088888', 'Night', 6, 'Good', '2025-06-08', '2025-07-08', 'Ok'),
('Indore HQ', 'Sandeep Joshi', '9890099999', 'Day', 10, 'Good', '2025-06-09', '2025-07-09', 'Ok'),
('Surat HQ', 'Alok Mehta', '9890010000', 'Night', 8, 'Good', '2025-06-10', '2025-07-10', 'Ok'),
('Ambala HQ', 'Rohit Sharma', '9890011112', 'Day', 9, 'Good', '2025-06-11', '2025-07-11', 'Ok'),
('Asansol HQ', 'Dipak Ghosh', '9890011212', 'Night', 7, 'Good', '2025-06-12', '2025-07-12', 'Ok'),
('Nanded HQ', 'Vinay Kulkarni', '9890011313', 'Day', 6, 'Good', '2025-06-13', '2025-07-13', 'Ok'),
('Kota HQ', 'Rajesh Gupta', '9890011414', 'Night', 5, 'Good', '2025-06-14', '2025-07-14', 'Ok'),
('Varanasi HQ', 'Amit Tripathi', '9890011515', 'Day', 7, 'Good', '2025-06-15', '2025-07-15', 'Ok'),
('Muzaffarpur HQ', 'Pawan Kumar', '9890011616', 'Night', 8, 'Good', '2025-06-16', '2025-07-16', 'Ok'),
('Jabalpur HQ', 'Prashant Joshi', '9890011717', 'Day', 9, 'Good', '2025-06-17', '2025-07-17', 'Ok'),
('Dhanbad HQ', 'Vivek Sinha', '9890011818', 'Night', 7, 'Good', '2025-06-18', '2025-07-18', 'Ok'),
('Bhopal Sub', 'Shailendra Singh', '9890011919', 'Day', 8, 'Good', '2025-06-19', '2025-07-19', 'Ok'),
('Mumbai HQ', 'Ajay Malhotra', '9890012020', 'Night', 10, 'Good', '2025-06-20', '2025-07-20', 'Ok');

-- display table data
Select * from ControlRooms;

-- to delete values from table 
truncate table ControlRooms;

-- to delete table
drop table ControlRooms;

-- 1. DDL: Add a new column for RoomCapacity
ALTER TABLE ControlRooms ADD COLUMN RoomCapacity INT;

-- 2. DDL: Modify ContactNumber length
ALTER TABLE ControlRooms MODIFY COLUMN ContactNumber VARCHAR(20);

-- 3. DDL: Drop RoomCapacity column
ALTER TABLE ControlRooms DROP COLUMN RoomCapacity;

-- 4. DML: Insert a new control room
INSERT INTO ControlRooms (Location, InCharge, ContactNumber, Shift, NoOfStaff, EquipmentStatus, LastAudit, NextAudit, Remarks)
VALUES ('Pune HQ', 'Manish Kumar', '9890020303', 'Day', 6, 'Good', '2025-07-01', '2025-08-01', 'New room');

-- 5. DML: Update EquipmentStatus
UPDATE ControlRooms SET EquipmentStatus='Under Maintenance' WHERE ControlRoomID=5;

-- 6. DML: Delete a control room
DELETE FROM ControlRooms WHERE ControlRoomID=20;

-- 7. DQL: Select all control rooms
SELECT * FROM ControlRooms;

-- 8. DQL: Select Location, InCharge, Shift, NoOfStaff
SELECT Location, InCharge, Shift, NoOfStaff FROM ControlRooms;

-- 9. DQL: Select control rooms with more than 10 staff
SELECT * FROM ControlRooms WHERE NoOfStaff > 10;

-- 10. DQL: Count rooms by Shift
SELECT Shift, COUNT(*) AS TotalRooms FROM ControlRooms GROUP BY Shift;

-- 11. DQL: Control rooms audited before '2025-06-10'
SELECT * FROM ControlRooms WHERE LastAudit < '2025-06-10';

-- 12. DQL: Order control rooms by NextAudit descending
SELECT * FROM ControlRooms ORDER BY NextAudit DESC;

-- 13. DQL: Select distinct Shifts
SELECT DISTINCT Shift FROM ControlRooms;

-- 14. DQL: Control rooms where InCharge name starts with 'R'
SELECT * FROM ControlRooms WHERE InCharge LIKE 'R%';

-- 15. DQL: Control rooms with NoOfStaff between 7 and 10
SELECT * FROM ControlRooms WHERE NoOfStaff BETWEEN 7 AND 10;

-- 16. Constraint: Make Location NOT NULL
ALTER TABLE ControlRooms MODIFY COLUMN Location VARCHAR(100) NOT NULL;

-- 17. Constraint: Add unique constraint on (Location, InCharge)
ALTER TABLE ControlRooms ADD CONSTRAINT unique_room UNIQUE (Location, InCharge);

-- 18. Operator: Control rooms with EquipmentStatus 'Good' or 'Under Maintenance'
SELECT * FROM ControlRooms WHERE EquipmentStatus IN ('Good','Under Maintenance');

-- 19. Operator: Control rooms not in 'Night' shift
SELECT * FROM ControlRooms WHERE Shift <> 'Night';

-- 20. Operator: Control rooms with LastAudit between '2025-06-01' and '2025-06-30'
SELECT * FROM ControlRooms WHERE LastAudit BETWEEN '2025-06-01' AND '2025-06-30';


-- Table 24: Timetables
CREATE TABLE Timetables (
    TimetableID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    RouteID INT,
    DepartureStation VARCHAR(50),
    ArrivalStation VARCHAR(50),
    DepartureTime TIME,
    ArrivalTime TIME,
    Frequency VARCHAR(20),
    EffectiveFrom DATE,
    EffectiveTo DATE
);

INSERT INTO Timetables (TrainID, RouteID, DepartureStation, ArrivalStation, DepartureTime, ArrivalTime, Frequency, EffectiveFrom, EffectiveTo)
 VALUES
(101, 1, 'Delhi', 'Mumbai', '06:00:00', '18:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(102, 2, 'Kolkata', 'Chennai', '07:00:00', '19:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(103, 3, 'Hyderabad', 'Bengaluru', '08:00:00', '12:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(104, 4, 'Jaipur', 'Pune', '05:30:00', '16:30:00', 'Mon-Sat', '2025-07-01', '2025-12-31'),
(105, 5, 'Lucknow', 'Ahmedabad', '09:00:00', '21:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(106, 6, 'Patna', 'Guwahati', '10:00:00', '22:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(107, 7, 'Bhopal', 'Nagpur', '06:45:00', '12:45:00', 'Daily', '2025-07-01', '2025-12-31'),
(108, 8, 'Ranchi', 'Vijayawada', '07:30:00', '19:30:00', 'Daily', '2025-07-01', '2025-12-31'),
(109, 9, 'Indore', 'Coimbatore', '05:15:00', '20:15:00', 'Daily', '2025-07-01', '2025-12-31'),
(110, 10, 'Surat', 'Kochi', '04:30:00', '22:30:00', 'Daily', '2025-07-01', '2025-12-31'),
(111, 1, 'Delhi', 'Ambala', '09:00:00', '12:00:00', 'Mon-Fri', '2025-07-01', '2025-12-31'),
(112, 2, 'Kolkata', 'Asansol', '10:00:00', '13:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(113, 3, 'Hyderabad', 'Nanded', '06:00:00', '11:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(114, 4, 'Jaipur', 'Kota', '07:30:00', '10:30:00', 'Daily', '2025-07-01', '2025-12-31'),
(115, 5, 'Lucknow', 'Varanasi', '05:45:00', '10:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(116, 6, 'Patna', 'Muzaffarpur', '06:15:00', '08:45:00', 'Daily', '2025-07-01', '2025-12-31'),
(117, 7, 'Bhopal', 'Jabalpur', '07:00:00', '11:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(118, 8, 'Ranchi', 'Dhanbad', '08:00:00', '10:30:00', 'Daily', '2025-07-01', '2025-12-31'),
(119, 9, 'Indore', 'Bhopal', '09:30:00', '11:30:00', 'Mon-Sat', '2025-07-01', '2025-12-31'),
(120, 10, 'Surat', 'Mumbai', '10:00:00', '14:00:00', 'Daily', '2025-07-01', '2025-12-31');

-- display table data
Select * from Timetables;

-- to delete values from table 
truncate table Timetables;

-- to delete table
drop table Timetables;

-- 1. DDL: Add a column for PlatformNumber
ALTER TABLE Timetables ADD COLUMN PlatformNumber INT;

-- 2. DDL: Modify Frequency column length
ALTER TABLE Timetables MODIFY COLUMN Frequency VARCHAR(30);

-- 3. DDL: Drop PlatformNumber column
ALTER TABLE Timetables DROP COLUMN PlatformNumber;

-- 4. DML: Insert a new timetable entry
INSERT INTO Timetables (TrainID, RouteID, DepartureStation, ArrivalStation, DepartureTime, ArrivalTime, Frequency, EffectiveFrom, EffectiveTo)
VALUES (121, 11, 'Ahmedabad', 'Jaipur', '06:00:00', '12:00:00', 'Daily', '2025-07-01', '2025-12-31');

-- 5. DML: Update ArrivalTime for TrainID 105
UPDATE Timetables SET ArrivalTime='22:15:00' WHERE TrainID=105;

-- 6. DML: Delete timetable for TrainID 120
DELETE FROM Timetables WHERE TrainID=120;

-- 7. DQL: Select all timetable entries
SELECT * FROM Timetables;

-- 8. DQL: Select TrainID, DepartureStation, ArrivalStation, DepartureTime, ArrivalTime
SELECT TrainID, DepartureStation, ArrivalStation, DepartureTime, ArrivalTime FROM Timetables;

-- 9. DQL: Select trains departing from 'Delhi'
SELECT * FROM Timetables WHERE DepartureStation='Delhi';

-- 10. DQL: Count trains by Frequency
SELECT Frequency, COUNT(*) AS TotalTrains FROM Timetables GROUP BY Frequency;

-- 11. DQL: Select timetables effective before '2025-08-01'
SELECT * FROM Timetables WHERE EffectiveFrom < '2025-08-01';

-- 12. DQL: Order timetables by DepartureTime ascending
SELECT * FROM Timetables ORDER BY DepartureTime ASC;

-- 13. DQL: Select distinct DepartureStations
SELECT DISTINCT DepartureStation FROM Timetables;

-- 14. DQL: Trains arriving at 'Mumbai'
SELECT * FROM Timetables WHERE ArrivalStation='Mumbai';

-- 15. DQL: Trains with DepartureTime between '06:00:00' and '08:00:00'
SELECT * FROM Timetables WHERE DepartureTime BETWEEN '06:00:00' AND '08:00:00';

-- 16. Constraint: Make ArrivalStation NOT NULL
ALTER TABLE Timetables MODIFY COLUMN ArrivalStation VARCHAR(50) NOT NULL;

-- 17. Constraint: Add UNIQUE constraint on (TrainID, DepartureStation, ArrivalStation)
ALTER TABLE Timetables ADD CONSTRAINT unique_train_route UNIQUE (TrainID, DepartureStation, ArrivalStation);

-- 18. Operator: Trains with Frequency 'Daily' or 'Mon-Fri'
SELECT * FROM Timetables WHERE Frequency IN ('Daily','Mon-Fri');

-- 19. Operator: Trains not departing from 'Kolkata'
SELECT * FROM Timetables WHERE DepartureStation <> 'Kolkata';

-- 20. Operator: Timetables effective between '2025-07-01' and '2025-09-30'
SELECT * FROM Timetables WHERE EffectiveFrom BETWEEN '2025-07-01' AND '2025-09-30';


-- Table 25: Announcements
CREATE TABLE Announcements (
    AnnouncementID INT PRIMARY KEY AUTO_INCREMENT,
    Title VARCHAR(100),
    Description TEXT,
    Date DATE,
    Time TIME,
    Station VARCHAR(50),
    AffectedTrains VARCHAR(100),
    ValidFrom DATE,
    ValidTo DATE,
    Status VARCHAR(20)
);

INSERT INTO Announcements (Title, Description, Date, Time, Station, AffectedTrains, ValidFrom, ValidTo, Status)
 VALUES
('Track Maintenance', 'Track maintenance work at Delhi Yard.', '2025-07-01', '09:00:00', 'Delhi', '101, 111', '2025-07-01', '2025-07-05', 'Active'),
('Power Shutdown', 'Power shutdown for overhead wires.', '2025-07-02', '10:00:00', 'Kolkata', '102, 112', '2025-07-02', '2025-07-06', 'Active'),
('Signal Upgrade', 'Signal upgrade at Secunderabad.', '2025-07-03', '11:00:00', 'Hyderabad', '103, 113', '2025-07-03', '2025-07-07', 'Active'),
('Platform Closure', 'Platform 3 closed for repairs.', '2025-07-04', '12:00:00', 'Jaipur', '104, 114', '2025-07-04', '2025-07-08', 'Active'),
('Special Train', 'Special train added for festival.', '2025-07-05', '13:00:00', 'Lucknow', '105, 115', '2025-07-05', '2025-07-10', 'Active'),
('Catering Delay', 'Delay in catering services.', '2025-07-06', '14:00:00', 'Patna', '106, 116', '2025-07-06', '2025-07-09', 'Active'),
('Signal Failure', 'Temporary signal failure.', '2025-07-07', '15:00:00', 'Bhopal', '107, 117', '2025-07-07', '2025-07-12', 'Active'),
('Track Inspection', 'Track inspection schedule.', '2025-07-08', '16:00:00', 'Ranchi', '108, 118', '2025-07-08', '2025-07-14', 'Active'),
('Bridge Repair', 'Bridge repair near Indore.', '2025-07-09', '17:00:00', 'Indore', '109, 119', '2025-07-09', '2025-07-15', 'Active'),
('Signal Testing', 'Signal testing in Surat.', '2025-07-10', '18:00:00', 'Surat', '110, 120', '2025-07-10', '2025-07-16', 'Active'),
('Holiday Rush', 'Extra coaches for holiday.', '2025-07-11', '09:00:00', 'Delhi', '101, 111', '2025-07-11', '2025-07-17', 'Active'),
('New Route', 'New route introduced.', '2025-07-12', '10:00:00', 'Kolkata', '102, 112', '2025-07-12', '2025-07-18', 'Active'),
('Weather Alert', 'Heavy rains expected.', '2025-07-13', '11:00:00', 'Hyderabad', '103, 113', '2025-07-13', '2025-07-19', 'Active'),
('Staff Strike', 'Possible staff strike.', '2025-07-14', '12:00:00', 'Jaipur', '104, 114', '2025-07-14', '2025-07-20', 'Active'),
('Festival Extra', 'Extra trains for Diwali.', '2025-07-15', '13:00:00', 'Lucknow', '105, 115', '2025-07-15', '2025-07-21', 'Active'),
('VIP Movement', 'VIP movement on platform.', '2025-07-16', '14:00:00', 'Patna', '106, 116', '2025-07-16', '2025-07-22', 'Active'),
('Security Drill', 'Security drill at station.', '2025-07-17', '15:00:00', 'Bhopal', '107, 117', '2025-07-17', '2025-07-23', 'Active'),
('Coach Addition', 'Extra coaches attached.', '2025-07-18', '16:00:00', 'Ranchi', '108, 118', '2025-07-18', '2025-07-24', 'Active'),
('Track Block', 'Track block for work.', '2025-07-19', '17:00:00', 'Indore', '109, 119', '2025-07-19', '2025-07-25', 'Active'),
('Maintenance Notice', 'Scheduled maintenance.', '2025-07-20', '18:00:00', 'Surat', '110, 120', '2025-07-20', '2025-07-26', 'Active');

-- display table data
Select * from Announcements;

-- to delete values from table 
truncate table Announcements;

-- to delete table
drop table Announcements;

-- 1. DDL: Add a column for AnnouncementType
ALTER TABLE Announcements ADD COLUMN AnnouncementType VARCHAR(50);

-- 2. DDL: Modify Title column length
ALTER TABLE Announcements MODIFY COLUMN Title VARCHAR(150);

-- 3. DDL: Drop AnnouncementType column
ALTER TABLE Announcements DROP COLUMN AnnouncementType;

-- 4. DML: Insert a new announcement
INSERT INTO Announcements (Title, Description, Date, Time, Station, AffectedTrains, ValidFrom, ValidTo, Status)
VALUES ('Maintenance Alert', 'Maintenance work on platform 1.', '2025-07-21', '09:30:00', 'Delhi', '101, 111', '2025-07-21', '2025-07-23', 'Active');

-- 5. DML: Update Status to 'Resolved' for AnnouncementID 5
UPDATE Announcements SET Status='Resolved' WHERE AnnouncementID=5;

-- 6. DML: Delete announcement for AnnouncementID 20
DELETE FROM Announcements WHERE AnnouncementID=20;

-- 7. DQL: Select all announcements
SELECT * FROM Announcements;

-- 8. DQL: Select Title, Date, Station, Status
SELECT Title, Date, Station, Status FROM Announcements;

-- 9. DQL: Select announcements at 'Delhi' station
SELECT * FROM Announcements WHERE Station='Delhi';

-- 10. DQL: Count announcements by Status
SELECT Status, COUNT(*) AS TotalAnnouncements FROM Announcements GROUP BY Status;

-- 11. DQL: Select announcements valid between '2025-07-05' and '2025-07-15'
SELECT * FROM Announcements WHERE ValidFrom >= '2025-07-05' AND ValidTo <= '2025-07-15';

-- 12. DQL: Order announcements by Date descending
SELECT * FROM Announcements ORDER BY Date DESC;

-- 13. DQL: Select distinct stations with announcements
SELECT DISTINCT Station FROM Announcements;

-- 14. DQL: Announcements affecting TrainID 101
SELECT * FROM Announcements WHERE FIND_IN_SET('101', AffectedTrains);

-- 15. DQL: Announcements with Time between '10:00:00' and '15:00:00'
SELECT * FROM Announcements WHERE Time BETWEEN '10:00:00' AND '15:00:00';

-- 16. Constraint: Make Station NOT NULL
ALTER TABLE Announcements MODIFY COLUMN Station VARCHAR(50) NOT NULL;

-- 17. Constraint: Add UNIQUE constraint on (Title, Date, Station)
ALTER TABLE Announcements ADD CONSTRAINT unique_announcement UNIQUE (Title, Date, Station);

-- 18. Operator: Announcements with Status 'Active' or 'Resolved'
SELECT * FROM Announcements WHERE Status IN ('Active', 'Resolved');

-- 19. Operator: Announcements not at 'Kolkata'
SELECT * FROM Announcements WHERE Station <> 'Kolkata';

-- 20. Operator: Announcements valid in July 2025
SELECT * FROM Announcements WHERE ValidFrom BETWEEN '2025-07-01' AND '2025-07-31';

