-- Single line comment 

/* 
multi 
line 
comment
*/
-- --------------------------------------------- Database Analysis -----------------------------------------------------

-- Table 1: Stations â€“ stationid,StationName, Code, City, State, PlatformCount,OpenedYear,Zone,Electrified, Remarks
-- Table 2: Trains- TrainNumber, TrainName, SourceStation, DestinationStation, TotalCoaches, MaxSpeed, Category, RunningDays, Status
-- Table 3: Passengers- FirstName, LastName, Age, Gender, Phone, Email, IDProofType, IDProofNumber, Nationality                                         
-- Table 4: Bookings - PassengerID, TrainID, CoachType, SeatNumber, JourneyDate, BookingDate, BookingStatus, PaymentMode, Fare
-- Table 5: Tickets - BookingID, PassengerID, TrainID, CoachNumber, SeatNumber, TicketType, TicketStatus, IssueDate, Fare
-- Table 6:  Routes - TrainID, SourceStation, DestinationStation, TotalDistance, TotalStops, StartTime, EndTime, RouteStatus, Remarks
-- Table 7: Coaches - TrainID, CoachNumber, CoachType, Capacity, OccupiedSeats, AvailableSeats, AC, PantryAvailable, Remarks
-- Table 8: Seats- CoachID, SeatNumber, SeatType, IsWindowSeat, IsBooked, PassengerID, BookingID, TrainID, Remarks
-- Table 9: Staff - Name, Role, Department, TrainID, Shift, Contact, Email, JoinDate, Remarks
-- Table 10:Engineers -  Name, Specialization, Department, TrainID, Contact, Email, AssignedDate, Certification, Remarks
-- Table 11: TrainSchedules - TrainID, RouteID, DepartureDate, DepartureTime, ArrivalDate, ArrivalTime, PlatformNumber, Status, Remarks
-- Table 12: Catering - TrainID, VendorID, StaffID, MealType, Menu, Quantity, ServiceTime, Status, Remarks
-- Table 13: Vendors - Name, Contact, Email, ServiceType, LicenseNo, Address, ContractStart, ContractEnd, Remarks
-- Table 14:  MaintenanceLogs - TrainID, EngineerID, Date, Time, IssueReported, ActionTaken, Status, NextDue, Remarks
-- Table 15:  Complaints - PassengerID, TrainID, CoachID, Date, Time, Type, Description, Status, Remarks 
-- Table 16: Cargo - BookingID, TrainID, DepartureStation, ArrivalStation, Weight, GoodsType, DepartureDate, ArrivalDate, Status
-- Table 17: Parcels - BookingID, SenderName, ReceiverName, SourceStation, DestinationStation, Weight, DispatchDate, DeliveryDate, Status
-- Table 18: FreightBookings - CustomerName, GoodsType, Quantity, Weight, SourceStation, DestinationStation, BookingDate, DeliveryDate, Status
-- Table 19: Signals - RouteID, SignalType, Location, Status, LastCheckDate, NextCheckDate, MaintenanceStatus, MaintainedBy, Remarks
-- Table 20: Tracks - RouteID, SectionName, Length_KM, GaugeType, ConditionStatus, LastInspection, NextInspection, MaintainedBy, Remarks 
-- Table 21: Bridges - TrackID, BridgeName, Location, Length_M, Type, ConditionStatus, LastInspection, NextInspection, Remarks 
-- Table 22: LevelCrossings - TrackID, Location, CrossingType, GateStatus, AttendantName, ContactNumber, LastInspection, NextInspection, Remarks 
-- Table 23:  ControlRooms - Location, InCharge, ContactNumber, Shift, NoOfStaff, EquipmentStatus, LastAudit, NextAudit, Remarks 
-- Table 24: Timetables - TrainID, RouteID, DepartureStation, ArrivalStation, DepartureTime, ArrivalTime, Frequency, EffectiveFrom, EffectiveTo
-- Table 25:  Announcements - Title, Description, Date, Time, Station, AffectedTrains, ValidFrom, ValidTo, Status

-- --------------------------------------------- Database Queries -----------------------------------------------------

-- to create database Consulting Firm Management 
create database IndianRailway;

-- to work on database we need to use it 
use IndianRailway;

-- Delete all records use it
Drop Table IndianRailway;
-- --------------------------------------------- Database Analysis -----------------------------------------------------

-- Table 1: Stations
CREATE TABLE Stations (
    StationID INT PRIMARY KEY AUTO_INCREMENT,
    StationName VARCHAR(100),
    Code CHAR(5),
    City VARCHAR(50),
    State VARCHAR(50),
    PlatformCount INT,
    Zone VARCHAR(50),
    OpenedYear YEAR,
    Electrified BOOLEAN,
    Remarks TEXT
);

-- Insert 20 records into Stations
INSERT INTO Stations (stationid,StationName, Code, City, State, PlatformCount,OpenedYear,Zone,Electrified, Remarks)
VALUES
('Mumbai CST', 'CSTM', 'Mumbai', 'Maharashtra', 18, 'Central', 1853, TRUE, 'Major terminus'),
('Howrah Jn', 'HWH', 'Kolkata', 'West Bengal', 23, 'Eastern', 1854, TRUE, 'Oldest station'),
('Chennai Central', 'MAS', 'Chennai', 'Tamil Nadu', 17, 'Southern', 1873, TRUE, 'Busy hub'),
('New Delhi', 'NDLS', 'Delhi', 'Delhi', 16, 'Northern', 1926, TRUE, 'Capital station'),
('Secunderabad', 'SC', 'Hyderabad', 'Telangana', 10, 'South Central', 1874, TRUE, 'Twin city station'),
('Ahmedabad', 'ADI', 'Ahmedabad', 'Gujarat', 12, 'Western', 1864, TRUE, 'Major junction'),
('Lucknow NR', 'LKO', 'Lucknow', 'Uttar Pradesh', 9, 'Northern', 1867, TRUE, 'State capital'),
('Kanpur Central', 'CNB', 'Kanpur', 'Uttar Pradesh', 10, 'North Central', 1930, TRUE, 'Busy station'),
('Patna Jn', 'PNBE', 'Patna', 'Bihar', 10, 'East Central', 1862, TRUE, 'Main Bihar hub'),
('Jaipur', 'JP', 'Jaipur', 'Rajasthan', 7, 'North Western', 1875, TRUE, 'Pink city station'),
('Bhopal', 'BPL', 'Bhopal', 'Madhya Pradesh', 8, 'West Central', 1887, TRUE, 'Capital station'),
('Nagpur', 'NGP', 'Nagpur', 'Maharashtra', 9, 'Central', 1867, TRUE, 'Geographical center'),
('Visakhapatnam', 'VSKP', 'Visakhapatnam', 'Andhra Pradesh', 8, 'East Coast', 1896, TRUE, 'Port city'),
('Kolkata Sealdah', 'SDAH', 'Kolkata', 'West Bengal', 20, 'Eastern', 1869, TRUE, 'Busy suburban'),
('Bengaluru City', 'SBC', 'Bengaluru', 'Karnataka', 10, 'South Western', 1864, TRUE, 'IT hub station'),
('Pune', 'PUNE', 'Pune', 'Maharashtra', 6, 'Central', 1858, TRUE, 'Tech city'),
('Coimbatore', 'CBE', 'Coimbatore', 'Tamil Nadu', 5, 'Southern', 1873, TRUE, 'Industrial city'),
('Guwahati', 'GHY', 'Guwahati', 'Assam', 8, 'Northeast Frontier', 1900, TRUE, 'Gateway to NE'),
('Jodhpur', 'JU', 'Jodhpur', 'Rajasthan', 5, 'North Western', 1885, TRUE, 'Desert city'),
('Agra Cantt', 'AGC', 'Agra', 'Uttar Pradesh', 7, 'North Central', 1904, TRUE, 'Taj city');

-- display table data
Select * from Stations;

-- to delete values from table 
truncate table Stations;

-- to delete table
drop table Stations;


-- 1. Get all stations in Maharashtra
SELECT * FROM Stations WHERE State = 'Maharashtra';

-- 2. Find stations with more than 15 platforms
SELECT StationName, PlatformCount FROM Stations WHERE PlatformCount > 15;

-- 3. List stations opened before 1900
SELECT StationName, OpenedYear FROM Stations WHERE OpenedYear < 1900;

-- 4. Order stations by platform count in descending order
SELECT StationName, PlatformCount FROM Stations ORDER BY PlatformCount DESC;

-- 5. Count number of stations per state
SELECT State, COUNT(*) AS TotalStations FROM Stations GROUP BY State;

-- 6. Create a view for major stations with more than 10 platforms
CREATE VIEW MajorStations AS
SELECT StationID, StationName, City, State, PlatformCount
FROM Stations
WHERE PlatformCount > 10;

-- 7. Select all records from the created view
SELECT * FROM MajorStations;

-- 8. Add UNIQUE constraint on station code
ALTER TABLE Stations ADD CONSTRAINT UQ_StationCode UNIQUE (Code);

-- 9. Add CHECK constraint to ensure platform count is positive
ALTER TABLE Stations ADD CONSTRAINT CHK_PlatformCount CHECK (PlatformCount > 0);

-- 10. Create stored procedure to get stations by state
DELIMITER $$
CREATE PROCEDURE GetStationsByState(IN stateName VARCHAR(50))
BEGIN
  SELECT StationName, City, Zone FROM Stations WHERE State = stateName;
END $$
DELIMITER ;

-- 11. Call stored procedure to fetch stations in Uttar Pradesh
CALL GetStationsByState('Uttar Pradesh');

-- 12. Rank stations by platform count within each state
SELECT StationName, State, PlatformCount,
       RANK() OVER (PARTITION BY State ORDER BY PlatformCount DESC) AS RankInState
FROM Stations;

-- 13. Calculate running total of platforms across stations
SELECT StationName, PlatformCount,
       SUM(PlatformCount) OVER (ORDER BY StationID) AS RunningTotalPlatforms
FROM Stations;

-- 14. Insert a test station record
INSERT INTO Stations (StationName, Code, City, State, PlatformCount, Zone, OpenedYear, Electrified, Remarks)
VALUES ('Test Station', 'TSTN', 'TestCity', 'TestState', 4, 'TestZone', 2020, TRUE, 'For testing');

-- 15. Update remarks for Pune station
UPDATE Stations SET Remarks = 'Updated remark' WHERE StationName = 'Pune';

-- 16. Delete the test station record
DELETE FROM Stations WHERE StationName = 'Test Station';

-- 17. Demonstrate transaction with rollback
START TRANSACTION;
INSERT INTO Stations (StationName, Code, City, State, PlatformCount, Zone, OpenedYear, Electrified, Remarks)
VALUES ('Temp Station', 'TMPST', 'TempCity', 'TempState', 2, 'TestZone', 2021, FALSE, 'Temporary data');
ROLLBACK;

-- 18. Create a log table for station actions
CREATE TABLE StationLogs (
  LogID INT AUTO_INCREMENT PRIMARY KEY,
  StationID INT,
  Action VARCHAR(20),
  LogTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 19. Create trigger to insert log after new station is added
DELIMITER $$
CREATE TRIGGER trg_after_insert_station
AFTER INSERT ON Stations
FOR EACH ROW
BEGIN
  INSERT INTO StationLogs (StationID, Action) VALUES (NEW.StationID, 'INSERT');
END $$
DELIMITER ;

-- 20. Insert a record to test trigger and check logs
INSERT INTO Stations (StationName, Code, City, State, PlatformCount, Zone, OpenedYear, Electrified, Remarks)
VALUES ('Trigger Test', 'TRGT', 'TriggerCity', 'TriggerState', 3, 'TestZone', 2022, TRUE, 'Inserted for trigger test');
SELECT * FROM StationLogs;


-- Table 2: Trains
CREATE TABLE Trains (
    TrainID INT PRIMARY KEY AUTO_INCREMENT,
    TrainNumber VARCHAR(10),
    TrainName VARCHAR(100),
    SourceStation VARCHAR(50),
    DestinationStation VARCHAR(50),
    TotalCoaches INT,
    MaxSpeed INT,
    Category VARCHAR(50),
    RunningDays VARCHAR(20),
    Status VARCHAR(20)
);

-- Insert 20 records into Trains
INSERT INTO Trains (TrainNumber, TrainName, SourceStation, DestinationStation, TotalCoaches, MaxSpeed, Category, RunningDays, Status)
VALUES
('12951', 'Mumbai Rajdhani', 'Mumbai CST', 'New Delhi', 20, 140, 'Rajdhani', 'Daily', 'Running'),
('12301', 'Howrah Rajdhani', 'Howrah', 'New Delhi', 20, 140, 'Rajdhani', 'Daily', 'Running'),
('12007', 'Shatabdi Express', 'Chennai', 'Mysuru', 16, 130, 'Shatabdi', 'Daily', 'Running'),
('12627', 'Karnataka Exp', 'Bengaluru', 'New Delhi', 24, 110, 'Superfast', 'Daily', 'Running'),
('12723', 'Telangana Exp', 'Hyderabad', 'New Delhi', 22, 110, 'Superfast', 'Daily', 'Running'),
('12953', 'August Kranti Rajdhani', 'Mumbai CST', 'Hazrat Nizamuddin', 20, 130, 'Rajdhani', 'Daily', 'Running'),
('12295', 'Sanghamitra Exp', 'Bengaluru', 'Patna', 24, 110, 'Superfast', 'Daily', 'Running'),
('12615', 'Grand Trunk Exp', 'Chennai', 'New Delhi', 24, 110, 'Mail/Express', 'Daily', 'Running'),
('12511', 'Rapti Sagar Exp', 'Gorakhpur', 'Thiruvananthapuram', 22, 110, 'Mail/Express', 'Daily', 'Running'),
('12259', 'Sealdah Duronto', 'Sealdah', 'New Delhi', 20, 130, 'Duronto', 'Daily', 'Running'),
('12430', 'Rajdhani Exp', 'New Delhi', 'Lucknow', 16, 130, 'Rajdhani', 'Daily', 'Running'),
('12859', 'Gitanjali Exp', 'Mumbai CST', 'Howrah', 24, 110, 'Superfast', 'Daily', 'Running'),
('12801', 'Purushottam Exp', 'Puri', 'New Delhi', 22, 110, 'Superfast', 'Daily', 'Running'),
('12009', 'Shatabdi Exp', 'Mumbai CST', 'Ahmedabad', 16, 130, 'Shatabdi', 'Daily', 'Running'),
('12621', 'Tamil Nadu Exp', 'Chennai', 'New Delhi', 24, 110, 'Superfast', 'Daily', 'Running'),
('12903', 'Golden Temple Mail', 'Mumbai CST', 'Amritsar', 24, 110, 'Mail/Express', 'Daily', 'Running'),
('12171', 'LTT Haridwar AC Exp', 'Mumbai LTT', 'Haridwar', 20, 110, 'AC Exp', 'Weekly', 'Running'),
('12561', 'Swarna Jayanti Exp', 'New Delhi', 'Ranchi', 20, 110, 'Superfast', 'Daily', 'Running'),
('12625', 'Kerala Exp', 'Thiruvananthapuram', 'New Delhi', 24, 110, 'Superfast', 'Daily', 'Running'),
('12909', 'Garib Rath Exp', 'Mumbai Bandra', 'Hazrat Nizamuddin', 20, 120, 'Garib Rath', 'Daily', 'Running');

-- display table data
Select * from Trains;

-- to delete values from table 
truncate table Trains;

-- to delete table
drop table Trains;


-- 1. Get all Rajdhani trains
SELECT * FROM Trains WHERE Category = 'Rajdhani';

-- 2. Find trains with more than 20 coaches
SELECT TrainName, TotalCoaches FROM Trains WHERE TotalCoaches > 20;

-- 3. List trains starting from Mumbai CST
SELECT TrainNumber, TrainName FROM Trains WHERE SourceStation = 'Mumbai CST';

-- 4. Order trains by max speed descending
SELECT TrainName, MaxSpeed FROM Trains ORDER BY MaxSpeed DESC;

-- 5. Count trains by category
SELECT Category, COUNT(*) AS TotalTrains FROM Trains GROUP BY Category;

-- 6. Create a view of superfast trains
CREATE VIEW SuperfastTrains AS
SELECT TrainID, TrainName, SourceStation, DestinationStation, MaxSpeed
FROM Trains
WHERE Category = 'Superfast';

-- 7. Select all records from the view
SELECT * FROM SuperfastTrains;

-- 8. Add UNIQUE constraint on TrainNumber
ALTER TABLE Trains ADD CONSTRAINT UQ_TrainNumber UNIQUE (TrainNumber);

-- 9. Add CHECK constraint to ensure speed is positive
ALTER TABLE Trains ADD CONSTRAINT CHK_MaxSpeed CHECK (MaxSpeed > 0);

-- 10. Create stored procedure to get trains by source station
DELIMITER $$
CREATE PROCEDURE GetTrainsBySource(IN src VARCHAR(50))
BEGIN
  SELECT TrainNumber, TrainName, DestinationStation FROM Trains WHERE SourceStation = src;
END $$
DELIMITER ;

-- 11. Call stored procedure for Chennai trains
CALL GetTrainsBySource('Chennai');

-- 12. Rank trains by max speed within each category
SELECT TrainName, Category, MaxSpeed,
       RANK() OVER (PARTITION BY Category ORDER BY MaxSpeed DESC) AS RankInCategory
FROM Trains;

-- 13. Running total of coaches ordered by TrainID
SELECT TrainName, TotalCoaches,
       SUM(TotalCoaches) OVER (ORDER BY TrainID) AS RunningTotalCoaches
FROM Trains;

-- 14. Insert a new test train
INSERT INTO Trains (TrainNumber, TrainName, SourceStation, DestinationStation, TotalCoaches, MaxSpeed, Category, RunningDays, Status)
VALUES ('99999', 'Test Express', 'TestCity', 'TestDest', 10, 100, 'Test', 'Weekly', 'Running');

-- 15. Update category of Gitanjali Exp
UPDATE Trains SET Category = 'Mail/Express' WHERE TrainName = 'Gitanjali Exp';

-- 16. Delete the test train
DELETE FROM Trains WHERE TrainNumber = '99999';

-- 17. Demonstrate transaction with rollback
START TRANSACTION;
INSERT INTO Trains (TrainNumber, TrainName, SourceStation, DestinationStation, TotalCoaches, MaxSpeed, Category, RunningDays, Status)
VALUES ('88888', 'Temp Express', 'TempCity', 'TempDest', 12, 105, 'Test', 'Daily', 'Running');
ROLLBACK;

-- 18. Create log table for trains
CREATE TABLE TrainLogs (
  LogID INT AUTO_INCREMENT PRIMARY KEY,
  TrainID INT,
  Action VARCHAR(20),
  LogTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 19. Create trigger to log inserts into TrainLogs
DELIMITER $$
CREATE TRIGGER trg_after_insert_train
AFTER INSERT ON Trains
FOR EACH ROW
BEGIN
  INSERT INTO TrainLogs (TrainID, Action) VALUES (NEW.TrainID, 'INSERT');
END $$
DELIMITER ;

-- 20. Insert a record to test trigger and check logs
INSERT INTO Trains (TrainNumber, TrainName, SourceStation, DestinationStation, TotalCoaches, MaxSpeed, Category, RunningDays, Status)
VALUES ('77777', 'Trigger Test Exp', 'TrigSrc', 'TrigDest', 8, 95, 'Test', 'Daily', 'Running');
SELECT * FROM TrainLogs;


-- Table 3: Passengers
CREATE TABLE Passengers (
    PassengerID INT PRIMARY KEY AUTO_INCREMENT,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Age INT,
    Gender CHAR(1),
    Phone VARCHAR(15),
    Email VARCHAR(100),
    IDProofType VARCHAR(50),
    IDProofNumber VARCHAR(50),
    Nationality VARCHAR(50)
);

-- Insert 20 records into Passengers
INSERT INTO Passengers (FirstName, LastName, Age, Gender, Phone, Email, IDProofType, IDProofNumber, Nationality)
VALUES
('Rajesh', 'Sharma', 35, 'M', '9876543210', 'rajesh@gmail.com', 'Aadhaar', '1234-5678-9012', 'Indian'),
('Priya', 'Verma', 28, 'F', '8765432109', 'priya@gmail.com', 'Passport', 'M1234567', 'Indian'),
('Amit', 'Kumar', 40, 'M', '7654321098', 'amitk@gmail.com', 'PAN', 'ABCDE1234F', 'Indian'),
('Sunita', 'Singh', 32, 'F', '6543210987', 'sunita@yahoo.com', 'Aadhaar', '2345-6789-0123', 'Indian'),
('Vikram', 'Joshi', 45, 'M', '5432109876', 'vikramj@hotmail.com', 'Passport', 'N9876543', 'Indian'),
('Meena', 'Rao', 29, 'F', '4321098765', 'meena@gmail.com', 'Aadhaar', '3456-7890-1234', 'Indian'),
('Anil', 'Patel', 38, 'M', '3210987654', 'anilp@gmail.com', 'Voter ID', 'MH1234567', 'Indian'),
('Sneha', 'Desai', 26, 'F', '2109876543', 'sneha@gmail.com', 'Aadhaar', '4567-8901-2345', 'Indian'),
('Ravi', 'Nair', 42, 'M', '1098765432', 'ravinair@gmail.com', 'PAN', 'XYZAB1234C', 'Indian'),
('Kiran', 'Das', 30, 'M', '1987654321', 'kiran.das@gmail.com', 'Aadhaar', '5678-9012-3456', 'Indian'),
('Deepa', 'Mehta', 31, 'F', '9876541230', 'deepa@gmail.com', 'Passport', 'P9876543', 'Indian'),
('Ajay', 'Bansal', 39, 'M', '8765432101', 'ajayb@gmail.com', 'PAN', 'PQRST1234Z', 'Indian'),
('Ruchi', 'Khatri', 27, 'F', '7654321012', 'ruchi.khatri@gmail.com', 'Aadhaar', '6789-0123-4567', 'Indian'),
('Suresh', 'Yadav', 41, 'M', '6543210123', 'sureshy@yahoo.com', 'Voter ID', 'DL2345678', 'Indian'),
('Neha', 'Mishra', 33, 'F', '5432101234', 'neham@gmail.com', 'Aadhaar', '7890-1234-5678', 'Indian'),
('Ashok', 'Gupta', 44, 'M', '4321012345', 'ashokg@hotmail.com', 'Passport', 'Q1234567', 'Indian'),
('Kavita', 'Kapoor', 25, 'F', '3210123456', 'kavitak@gmail.com', 'Aadhaar', '8901-2345-6789', 'Indian'),
('Nitin', 'Rana', 37, 'M', '2101234567', 'nitinr@gmail.com', 'PAN', 'LMNOP1234Y', 'Indian'),
('Geeta', 'Pillai', 29, 'F', '1012345678', 'geetap@gmail.com', 'Aadhaar', '9012-3456-7890', 'Indian'),
('Rohit', 'Saxena', 36, 'M', '9123456789', 'rohit.saxena@gmail.com', 'Voter ID', 'UP3456789', 'Indian');

-- display table data
Select * from Passengers;

-- to delete values from table 
truncate table Passengers;

-- to delete table
drop table Passengers;
-- 1. Get all female passengers
SELECT * FROM Passengers WHERE Gender = 'F';

-- 2. Find passengers older than 40
SELECT FirstName, LastName, Age FROM Passengers WHERE Age > 40;

-- 3. List passengers with Aadhaar as ID proof
SELECT FirstName, LastName, IDProofNumber FROM Passengers WHERE IDProofType = 'Aadhaar';

-- 4. Order passengers by age descending
SELECT FirstName, LastName, Age FROM Passengers ORDER BY Age DESC;

-- 5. Count passengers by ID proof type
SELECT IDProofType, COUNT(*) AS TotalPassengers FROM Passengers GROUP BY IDProofType;

-- 6. Create a view of passengers with Passport
CREATE VIEW PassportPassengers AS
SELECT PassengerID, FirstName, LastName, Email, IDProofNumber
FROM Passengers
WHERE IDProofType = 'Passport';

-- 7. Select all records from the created view
SELECT * FROM PassportPassengers;

-- 8. Add UNIQUE constraint on Email
ALTER TABLE Passengers ADD CONSTRAINT UQ_Email UNIQUE (Email);

-- 9. Add CHECK constraint to ensure age is greater than 0
ALTER TABLE Passengers ADD CONSTRAINT CHK_Age CHECK (Age > 0);

-- 10. Create stored procedure to get passengers by nationality
DELIMITER $$
CREATE PROCEDURE GetPassengersByNationality(IN nat VARCHAR(50))
BEGIN
  SELECT FirstName, LastName, Age, Gender FROM Passengers WHERE Nationality = nat;
END $$
DELIMITER ;

-- 11. Call stored procedure for Indian passengers
CALL GetPassengersByNationality('Indian');

-- 12. Rank passengers by age within each gender
SELECT FirstName, LastName, Gender, Age,
       RANK() OVER (PARTITION BY Gender ORDER BY Age DESC) AS RankInGender
FROM Passengers;

-- 13. Running total of passenger ages ordered by PassengerID
SELECT FirstName, LastName, Age,
       SUM(Age) OVER (ORDER BY PassengerID) AS RunningTotalAge
FROM Passengers;

-- 14. Insert a new test passenger
INSERT INTO Passengers (FirstName, LastName, Age, Gender, Phone, Email, IDProofType, IDProofNumber, Nationality)
VALUES ('Test', 'User', 30, 'M', '9000000000', 'testuser@gmail.com', 'Aadhaar', '9999-9999-9999', 'Indian');

-- 15. Update nationality of Priya Verma
UPDATE Passengers SET Nationality = 'NRI' WHERE FirstName = 'Priya' AND LastName = 'Verma';

-- 16. Delete the test passenger
DELETE FROM Passengers WHERE Email = 'testuser@gmail.com';

-- 17. Demonstrate transaction with rollback
START TRANSACTION;
INSERT INTO Passengers (FirstName, LastName, Age, Gender, Phone, Email, IDProofType, IDProofNumber, Nationality)
VALUES ('Temp', 'User', 22, 'F', '9111111111', 'tempuser@gmail.com', 'PAN', 'TEMP1234X', 'Indian');
ROLLBACK;

-- 18. Create log table for passenger actions
CREATE TABLE PassengerLogs (
  LogID INT AUTO_INCREMENT PRIMARY KEY,
  PassengerID INT,
  Action VARCHAR(20),
  LogTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 19. Create trigger to log inserts into PassengerLogs
DELIMITER $$
CREATE TRIGGER trg_after_insert_passenger
AFTER INSERT ON Passengers
FOR EACH ROW
BEGIN
  INSERT INTO PassengerLogs (PassengerID, Action) VALUES (NEW.PassengerID, 'INSERT');
END $$
DELIMITER ;

-- 20. Insert a record to test trigger and check logs
INSERT INTO Passengers (FirstName, LastName, Age, Gender, Phone, Email, IDProofType, IDProofNumber, Nationality)
VALUES ('Trigger', 'Test', 27, 'F', '9222222222', 'triggertest@gmail.com', 'Voter ID', 'TESTVOTER1', 'Indian');
SELECT * FROM PassengerLogs;


-- Table 4: Bookings
CREATE TABLE Bookings(
    BookingID INT PRIMARY KEY AUTO_INCREMENT,
    PassengerID INT,
    TrainID INT,
    CoachType VARCHAR(20),
    SeatNumber VARCHAR(10),
    JourneyDate DATE,
    BookingDate DATE,
    BookingStatus VARCHAR(20),
    PaymentMode VARCHAR(20),
    Fare DECIMAL(10,2)
);

-- Insert 20 sample records into Bookings
INSERT INTO Bookings (PassengerID, TrainID, CoachType, SeatNumber, JourneyDate, BookingDate, BookingStatus, PaymentMode, Fare)
 VALUES
(1, 1, 'Sleeper', 'S1-23', '2025-07-20', '2025-07-10', 'Confirmed', 'UPI', 850.00),
(2, 2, 'AC 2 Tier', 'A2-15', '2025-07-21', '2025-07-11', 'Confirmed', 'Credit Card', 1450.00),
(3, 3, 'AC Chair Car', 'C1-10', '2025-07-22', '2025-07-12', 'Confirmed', 'Debit Card', 950.00),
(4, 4, 'Sleeper', 'S2-35', '2025-07-23', '2025-07-13', 'Waiting', 'Net Banking', 780.00),
(5, 5, 'AC 3 Tier', 'B1-20', '2025-07-24', '2025-07-14', 'Confirmed', 'UPI', 1250.00),
(6, 6, 'Sleeper', 'S3-18', '2025-07-25', '2025-07-15', 'Confirmed', 'Cash', 900.00),
(7, 7, 'AC 2 Tier', 'A1-05', '2025-07-26', '2025-07-16', 'Confirmed', 'Credit Card', 1500.00),
(8, 8, 'Sleeper', 'S4-12', '2025-07-27', '2025-07-17', 'Cancelled', 'UPI', 850.00),
(9, 9, 'AC 3 Tier', 'B2-30', '2025-07-28', '2025-07-18', 'Confirmed', 'Debit Card', 1200.00),
(10, 10, 'AC Chair Car', 'C2-08', '2025-07-29', '2025-07-19', 'Confirmed', 'UPI', 970.00),
(11, 1, 'Sleeper', 'S1-24', '2025-07-30', '2025-07-20', 'Confirmed', 'Net Banking', 880.00),
(12, 2, 'AC 2 Tier', 'A2-16', '2025-07-31', '2025-07-21', 'Waiting', 'UPI', 1470.00),
(13, 3, 'AC Chair Car', 'C1-11', '2025-08-01', '2025-07-22', 'Confirmed', 'Credit Card', 960.00),
(14, 4, 'Sleeper', 'S2-36', '2025-08-02', '2025-07-23', 'Confirmed', 'Debit Card', 770.00),
(15, 5, 'AC 3 Tier', 'B1-21', '2025-08-03', '2025-07-24', 'Confirmed', 'UPI', 1240.00),
(16, 6, 'Sleeper', 'S3-19', '2025-08-04', '2025-07-25', 'Cancelled', 'Net Banking', 890.00),
(17, 7, 'AC 2 Tier', 'A1-06', '2025-08-05', '2025-07-26', 'Confirmed', 'Credit Card', 1490.00),
(18, 8, 'Sleeper', 'S4-13', '2025-08-06', '2025-07-27', 'Confirmed', 'UPI', 860.00),
(19, 9, 'AC 3 Tier', 'B2-31', '2025-08-07', '2025-07-28', 'Waiting', 'Debit Card', 1220.00),
(20, 10, 'AC Chair Car', 'C2-09', '2025-08-08', '2025-07-29', 'Confirmed', 'Credit Card', 980.00);

-- display table data
Select * from Bookings;

-- to delete values from table 
truncate table Bookings;

-- to delete table
drop table Bookings;

-- 1. View confirmed bookings (V)
SELECT * FROM Bookings WHERE BookingStatus = 'Confirmed';

-- 2. View cancelled bookings (V)
SELECT * FROM Bookings WHERE BookingStatus = 'Cancelled';

-- 3. Count total bookings (C)
SELECT COUNT(*) AS TotalBookings FROM Bookings;

-- 4. Count bookings by payment mode (C)
SELECT PaymentMode, COUNT(*) AS Total FROM Bookings GROUP BY PaymentMode;

-- 5. Stored procedure to get bookings by passenger ID (SP)
DELIMITER $$
CREATE PROCEDURE GetBookingsByPassenger(IN pid INT)
BEGIN
  SELECT * FROM Bookings WHERE PassengerID = pid;
END $$
DELIMITER ;

-- 6. Call stored procedure for passenger ID = 1 (SP)
CALL GetBookingsByPassenger(1);

-- 7. Window function to rank fares by JourneyDate (WF)
SELECT BookingID, PassengerID, Fare, JourneyDate,
       RANK() OVER (ORDER BY Fare DESC) AS FareRank
FROM Bookings;

-- 8. Window function to show running total of fares (WF)
SELECT BookingID, PassengerID, Fare,
       SUM(Fare) OVER (ORDER BY BookingID) AS RunningFare
FROM Bookings;

-- 9. Display bookings with JourneyDate after 2025-08-01 (D)
SELECT * FROM Bookings WHERE JourneyDate > '2025-08-01';

-- 10. Display bookings with BookingDate before 2025-07-15 (D)
SELECT * FROM Bookings WHERE BookingDate < '2025-07-15';

-- 11. Create CHECK constraint for Fare > 0 (TCL - constraint)
ALTER TABLE Bookings ADD CONSTRAINT CHK_Fare CHECK (Fare > 0);

-- 12. Create UNIQUE constraint on SeatNumber with JourneyDate (TCL - constraint)
ALTER TABLE Bookings ADD CONSTRAINT UQ_Seat UNIQUE (SeatNumber, JourneyDate);

-- 13. Demonstrate transaction with rollback (TCL)
START TRANSACTION;
INSERT INTO Bookings (PassengerID, TrainID, CoachType, SeatNumber, JourneyDate, BookingDate, BookingStatus, PaymentMode, Fare)
VALUES (1, 1, 'Sleeper', 'S5-99', '2025-08-20', '2025-08-10', 'Confirmed', 'UPI', 800.00);
ROLLBACK;

-- 14. Demonstrate transaction with commit (TCL)
START TRANSACTION;
INSERT INTO Bookings (PassengerID, TrainID, CoachType, SeatNumber, JourneyDate, BookingDate, BookingStatus, PaymentMode, Fare)
VALUES (2, 2, 'AC 2 Tier', 'A3-50', '2025-08-21', '2025-08-11', 'Confirmed', 'Cash', 1500.00);
COMMIT;

-- 15. Create trigger to log new booking inserts (Tri)
CREATE TABLE BookingLogs (
  LogID INT AUTO_INCREMENT PRIMARY KEY,
  BookingID INT,
  Action VARCHAR(20),
  LogTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 16. Trigger for insert logging (Tri)
DELIMITER $$
CREATE TRIGGER trg_after_booking_insert
AFTER INSERT ON Bookings
FOR EACH ROW
BEGIN
  INSERT INTO BookingLogs (BookingID, Action) VALUES (NEW.BookingID, 'INSERT');
END $$
DELIMITER ;

-- 17. Insert record to test trigger (Tri)
INSERT INTO Bookings (PassengerID, TrainID, CoachType, SeatNumber, JourneyDate, BookingDate, BookingStatus, PaymentMode, Fare)
VALUES (3, 3, 'AC Chair Car', 'C3-22', '2025-08-25', '2025-08-15', 'Confirmed', 'UPI', 1000.00);

-- 18. View logs after trigger execution (Tri)
SELECT * FROM BookingLogs;

-- 19. View total fare collected by coach type (V & C)
SELECT CoachType, SUM(Fare) AS TotalFare FROM Bookings GROUP BY CoachType;

-- 20. Window function to get average fare per coach type (WF)
SELECT BookingID, CoachType, Fare,
       AVG(Fare) OVER (PARTITION BY CoachType) AS AvgFarePerCoach
FROM Bookings;



-- Table 5: Tickets
CREATE TABLE Tickets (
    TicketID INT PRIMARY KEY AUTO_INCREMENT,
    BookingID INT,
    PassengerID INT,
    TrainID INT,
    CoachNumber VARCHAR(10),
    SeatNumber VARCHAR(10),
    TicketType VARCHAR(20),
    TicketStatus VARCHAR(20),
    IssueDate DATE,
    Fare DECIMAL(10,2)
);

INSERT INTO Tickets (BookingID, PassengerID, TrainID, CoachNumber, SeatNumber, TicketType, TicketStatus, IssueDate, Fare)
VALUES
(1, 1, 1, 'S1', '23', 'E-Ticket', 'Confirmed', '2025-07-10', 850.00),
(2, 2, 2, 'A2', '15', 'E-Ticket', 'Confirmed', '2025-07-11', 1450.00),
(3, 3, 3, 'C1', '10', 'Counter', 'Confirmed', '2025-07-12', 950.00),
(4, 4, 4, 'S2', '35', 'E-Ticket', 'Waiting', '2025-07-13', 780.00),
(5, 5, 5, 'B1', '20', 'E-Ticket', 'Confirmed', '2025-07-14', 1250.00),
(6, 6, 6, 'S3', '18', 'Counter', 'Confirmed', '2025-07-15', 900.00),
(7, 7, 7, 'A1', '05', 'E-Ticket', 'Confirmed', '2025-07-16', 1500.00),
(8, 8, 8, 'S4', '12', 'E-Ticket', 'Cancelled', '2025-07-17', 850.00),
(9, 9, 9, 'B2', '30', 'Counter', 'Confirmed', '2025-07-18', 1200.00),
(10, 10, 10, 'C2', '08', 'E-Ticket', 'Confirmed', '2025-07-19', 970.00),
(11, 11, 1, 'S1', '24', 'Counter', 'Confirmed', '2025-07-20', 880.00),
(12, 12, 2, 'A2', '16', 'E-Ticket', 'Waiting', '2025-07-21', 1470.00),
(13, 13, 3, 'C1', '11', 'Counter', 'Confirmed', '2025-07-22', 960.00),
(14, 14, 4, 'S2', '36', 'E-Ticket', 'Confirmed', '2025-07-23', 770.00),
(15, 15, 5, 'B1', '21', 'E-Ticket', 'Confirmed', '2025-07-24', 1240.00),
(16, 16, 6, 'S3', '19', 'Counter', 'Cancelled', '2025-07-25', 890.00),
(17, 17, 7, 'A1', '06', 'E-Ticket', 'Confirmed', '2025-07-26', 1490.00),
(18, 18, 8, 'S4', '13', 'Counter', 'Confirmed', '2025-07-27', 860.00),
(19, 19, 9, 'B2', '31', 'E-Ticket', 'Waiting', '2025-07-28', 1220.00),
(20, 20, 10, 'C2', '09', 'Counter', 'Confirmed', '2025-07-29', 980.00);

-- display table data
Select * from Tickets;

-- to delete values from table 
truncate table Tickets;

-- to delete table
drop table Tickets;

-- 1. View all confirmed tickets (V)
SELECT * FROM Tickets WHERE TicketStatus = 'Confirmed';

-- 2. View all cancelled tickets (V)
SELECT * FROM Tickets WHERE TicketStatus = 'Cancelled';

-- 3. Count total tickets issued (C)
SELECT COUNT(*) AS TotalTickets FROM Tickets;

-- 4. Count tickets by ticket type (C)
SELECT TicketType, COUNT(*) AS Total FROM Tickets GROUP BY TicketType;

-- 5. Stored procedure to get tickets by passenger ID (SP)
DELIMITER $$
CREATE PROCEDURE GetTicketsByPassenger(IN pid INT)
BEGIN
  SELECT * FROM Tickets WHERE PassengerID = pid;
END $$
DELIMITER ;

-- 6. Call stored procedure for PassengerID = 1 (SP)
CALL GetTicketsByPassenger(1);

-- 7. Window function to rank tickets by fare (WF)
SELECT TicketID, PassengerID, Fare,
       RANK() OVER (ORDER BY Fare DESC) AS FareRank
FROM Tickets;

-- 8. Window function to calculate running total of fares (WF)
SELECT TicketID, PassengerID, Fare,
       SUM(Fare) OVER (ORDER BY TicketID) AS RunningFare
FROM Tickets;

-- 9. Display tickets issued after 2025-07-20 (D)
SELECT * FROM Tickets WHERE IssueDate > '2025-07-20';

-- 10. Display tickets with fare greater than 1200 (D)
SELECT * FROM Tickets WHERE Fare > 1200;

-- 11. Add CHECK constraint for Fare > 0 (TCL - constraint)
ALTER TABLE Tickets ADD CONSTRAINT CHK_TicketFare CHECK (Fare > 0);

-- 12. Add UNIQUE constraint for SeatNumber per CoachNumber and IssueDate (TCL - constraint)
ALTER TABLE Tickets ADD CONSTRAINT UQ_TicketSeat UNIQUE (CoachNumber, SeatNumber, IssueDate);

-- 13. Transaction with rollback (TCL)
START TRANSACTION;
INSERT INTO Tickets (BookingID, PassengerID, TrainID, CoachNumber, SeatNumber, TicketType, TicketStatus, IssueDate, Fare)
VALUES (21, 21, 1, 'S5', '40', 'E-Ticket', 'Confirmed', '2025-08-01', 1000.00);
ROLLBACK;

-- 14. Transaction with commit (TCL)
START TRANSACTION;
INSERT INTO Tickets (BookingID, PassengerID, TrainID, CoachNumber, SeatNumber, TicketType, TicketStatus, IssueDate, Fare)
VALUES (22, 22, 2, 'A3', '50', 'Counter', 'Confirmed', '2025-08-02', 1500.00);
COMMIT;

-- 15. Create TicketLogs table for trigger (Tri)
CREATE TABLE TicketLogs (
  LogID INT AUTO_INCREMENT PRIMARY KEY,
  TicketID INT,
  Action VARCHAR(20),
  LogTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 16. Trigger to log new ticket inserts (Tri)
DELIMITER $$
CREATE TRIGGER trg_after_ticket_insert
AFTER INSERT ON Tickets
FOR EACH ROW
BEGIN
  INSERT INTO TicketLogs (TicketID, Action) VALUES (NEW.TicketID, 'INSERT');
END $$
DELIMITER ;

-- 17. Insert a ticket to test trigger (Tri)
INSERT INTO Tickets (BookingID, PassengerID, TrainID, CoachNumber, SeatNumber, TicketType, TicketStatus, IssueDate, Fare)
VALUES (23, 23, 3, 'C3', '22', 'E-Ticket', 'Confirmed', '2025-08-03', 1100.00);

-- 18. View logs created by trigger (Tri)
SELECT * FROM TicketLogs;

-- 19. View total fare collected by ticket type (V & C)
SELECT TicketType, SUM(Fare) AS TotalFare FROM Tickets GROUP BY TicketType;

-- 20. Window function to show average fare per ticket type (WF)
SELECT TicketID, TicketType, Fare,
       AVG(Fare) OVER (PARTITION BY TicketType) AS AvgFarePerType
FROM Tickets;


-- Table 6: Routes
CREATE TABLE Routes (
    RouteID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    SourceStation VARCHAR(50),
    DestinationStation VARCHAR(50),
    TotalDistance INT,
    TotalStops INT,
    StartTime TIME,
    EndTime TIME,
    RouteStatus VARCHAR(20),
    Remarks TEXT
);

INSERT INTO Routes (TrainID, SourceStation, DestinationStation, TotalDistance, TotalStops, StartTime, EndTime, RouteStatus, Remarks)
VALUES
(1, 'Mumbai CST', 'New Delhi', 1384, 8, '16:00:00', '08:35:00', 'Active', 'Rajdhani Route'),
(2, 'Howrah', 'New Delhi', 1448, 10, '16:55:00', '10:15:00', 'Active', 'Rajdhani Route'),
(3, 'Chennai', 'Mysuru', 497, 4, '06:00:00', '12:00:00', 'Active', 'Shatabdi Route'),
(4, 'Bengaluru', 'New Delhi', 2410, 20, '20:30:00', '05:40:00', 'Active', 'Karnataka Express'),
(5, 'Hyderabad', 'New Delhi', 1677, 12, '06:00:00', '07:15:00', 'Active', 'Telangana Express'),
(6, 'Mumbai CST', 'Hazrat Nizamuddin', 1377, 8, '17:40:00', '10:10:00', 'Active', 'August Kranti'),
(7, 'Bengaluru', 'Patna', 2693, 25, '09:00:00', '21:20:00', 'Active', 'Sanghamitra'),
(8, 'Chennai', 'New Delhi', 2182, 17, '19:15:00', '05:45:00', 'Active', 'GT Express'),
(9, 'Gorakhpur', 'Thiruvananthapuram', 3231, 30, '06:35:00', '04:55:00', 'Active', 'Rapti Sagar'),
(10, 'Sealdah', 'New Delhi', 1454, 5, '18:30:00', '10:20:00', 'Active', 'Duronto'),
(11, 'New Delhi', 'Lucknow', 492, 2, '19:50:00', '06:10:00', 'Active', 'Rajdhani Short'),
(12, 'Mumbai CST', 'Howrah', 1968, 22, '06:00:00', '11:25:00', 'Active', 'Gitanjali'),
(13, 'Puri', 'New Delhi', 1859, 14, '21:45:00', '22:00:00', 'Active', 'Purushottam'),
(14, 'Mumbai CST', 'Ahmedabad', 492, 3, '06:00:00', '12:30:00', 'Active', 'Shatabdi Route'),
(15, 'Chennai', 'New Delhi', 2182, 16, '22:00:00', '07:30:00', 'Active', 'Tamil Nadu Exp'),
(16, 'Mumbai CST', 'Amritsar', 1892, 20, '21:25:00', '23:35:00', 'Active', 'Golden Temple'),
(17, 'Mumbai LTT', 'Haridwar', 1617, 10, '07:55:00', '16:30:00', 'Active', 'Haridwar AC'),
(18, 'New Delhi', 'Ranchi', 1316, 10, '20:35:00', '17:00:00', 'Active', 'Swarna Jayanti'),
(19, 'Thiruvananthapuram', 'New Delhi', 3036, 27, '12:20:00', '13:20:00', 'Active', 'Kerala Express'),
(20, 'Mumbai Bandra', 'Hazrat Nizamuddin', 1367, 6, '16:35:00', '09:45:00', 'Active', 'Garib Rath');

-- display table data
Select * from Routes;

-- to delete values from table 
truncate table Routes;

-- to delete table
drop table Routes;

-- 1. View all routes where SourceStation is Mumbai CST (V)
SELECT * FROM Routes WHERE SourceStation = 'Mumbai CST';

-- 2. View all routes having distance greater than 2000 km (V)
SELECT * FROM Routes WHERE TotalDistance > 2000;

-- 3. Count total number of routes (C)
SELECT COUNT(*) AS TotalRoutes FROM Routes;

-- 4. Count routes grouped by SourceStation (C)
SELECT SourceStation, COUNT(*) AS Total FROM Routes GROUP BY SourceStation;

-- 5. Stored procedure to get routes by TrainID (SP)
DELIMITER $$
CREATE PROCEDURE GetRoutesByTrain(IN tid INT)
BEGIN
  SELECT * FROM Routes WHERE TrainID = tid;
END $$
DELIMITER ;

-- 6. Call stored procedure for TrainID = 5 (SP)
CALL GetRoutesByTrain(5);

-- 7. Window function to rank routes by distance (WF)
SELECT RouteID, TrainID, TotalDistance,
       RANK() OVER (ORDER BY TotalDistance DESC) AS DistanceRank
FROM Routes;

-- 8. Window function to calculate running total of distance (WF)
SELECT RouteID, TrainID, TotalDistance,
       SUM(TotalDistance) OVER (ORDER BY RouteID) AS RunningDistance
FROM Routes;

-- 9. Display all routes with more than 15 stops (D)
SELECT * FROM Routes WHERE TotalStops > 15;

-- 10. Display all routes with EndTime earlier than StartTime (overnight trains) (D)
SELECT * FROM Routes WHERE EndTime < StartTime;

-- 11. Add CHECK constraint to ensure distance > 0 (TCL - constraint)
ALTER TABLE Routes ADD CONSTRAINT CHK_RouteDistance CHECK (TotalDistance > 0);

-- 12. Add UNIQUE constraint to ensure TrainID has only one active route (TCL - constraint)
ALTER TABLE Routes ADD CONSTRAINT UQ_TrainRoute UNIQUE (TrainID, RouteStatus);

-- 13. Transaction with rollback (TCL)
START TRANSACTION;
INSERT INTO Routes (TrainID, SourceStation, DestinationStation, TotalDistance, TotalStops, StartTime, EndTime, RouteStatus, Remarks)
VALUES (21, 'TestCity', 'TestDest', 100, 2, '10:00:00', '12:00:00', 'Active', 'Temp Route');
ROLLBACK;

-- 14. Transaction with commit (TCL)
START TRANSACTION;
INSERT INTO Routes (TrainID, SourceStation, DestinationStation, TotalDistance, TotalStops, StartTime, EndTime, RouteStatus, Remarks)
VALUES (22, 'CityX', 'CityY', 150, 3, '11:00:00', '14:00:00', 'Active', 'New Test Route');
COMMIT;

-- 15. Create RouteLogs table for trigger (Tri)
CREATE TABLE RouteLogs (
  LogID INT AUTO_INCREMENT PRIMARY KEY,
  RouteID INT,
  Action VARCHAR(20),
  LogTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 16. Trigger to log new route insert (Tri)
DELIMITER $$
CREATE TRIGGER trg_after_route_insert
AFTER INSERT ON Routes
FOR EACH ROW
BEGIN
  INSERT INTO RouteLogs (RouteID, Action) VALUES (NEW.RouteID, 'INSERT');
END $$
DELIMITER ;

-- 17. Insert a route to test trigger (Tri)
INSERT INTO Routes (TrainID, SourceStation, DestinationStation, TotalDistance, TotalStops, StartTime, EndTime, RouteStatus, Remarks)
VALUES (23, 'CityZ', 'CityW', 250, 4, '08:00:00', '13:00:00', 'Active', 'Trigger Test Route');

-- 18. View logs created by trigger (Tri)
SELECT * FROM RouteLogs;

-- 19. View average distance per SourceStation (V & C)
SELECT SourceStation, AVG(TotalDistance) AS AvgDistance FROM Routes GROUP BY SourceStation;

-- 20. Window function to calculate average stops per destination (WF)
SELECT RouteID, DestinationStation, TotalStops,
       AVG(TotalStops) OVER (PARTITION BY DestinationStation) AS AvgStopsPerDest
FROM Routes;


-- Table 7: Coaches
CREATE TABLE Coaches (
    CoachID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    CoachNumber VARCHAR(10),
    CoachType VARCHAR(20),
    Capacity INT,
    OccupiedSeats INT,
    AvailableSeats INT,
    AC BOOLEAN,
    PantryAvailable BOOLEAN,
    Remarks TEXT
);

INSERT INTO Coaches (TrainID, CoachNumber, CoachType, Capacity, OccupiedSeats, AvailableSeats, AC, PantryAvailable, Remarks)
VALUES
(1, 'S1', 'Sleeper', 72, 60, 12, FALSE, FALSE, 'General Sleeper'),
(1, 'A1', 'AC 2 Tier', 48, 45, 3, TRUE, FALSE, 'Air-conditioned'),
(2, 'S1', 'Sleeper', 72, 65, 7, FALSE, FALSE, 'General Sleeper'),
(2, 'A2', 'AC 3 Tier', 64, 60, 4, TRUE, FALSE, 'Air-conditioned'),
(3, 'C1', 'AC Chair Car', 78, 75, 3, TRUE, TRUE, 'Shatabdi CC'),
(3, 'C2', 'AC Chair Car', 78, 70, 8, TRUE, TRUE, 'Shatabdi CC'),
(4, 'S2', 'Sleeper', 72, 70, 2, FALSE, FALSE, 'General Sleeper'),
(4, 'B1', 'AC 3 Tier', 64, 63, 1, TRUE, FALSE, 'AC Coach'),
(5, 'S3', 'Sleeper', 72, 68, 4, FALSE, FALSE, 'General Sleeper'),
(5, 'A1', 'AC 2 Tier', 48, 45, 3, TRUE, TRUE, 'AC Coach'),
(6, 'S4', 'Sleeper', 72, 69, 3, FALSE, FALSE, 'General Sleeper'),
(6, 'B2', 'AC 3 Tier', 64, 61, 3, TRUE, FALSE, 'AC Coach'),
(7, 'A1', 'AC 2 Tier', 48, 47, 1, TRUE, TRUE, 'AC Coach'),
(7, 'S5', 'Sleeper', 72, 67, 5, FALSE, FALSE, 'General Sleeper'),
(8, 'C1', 'AC Chair Car', 78, 72, 6, TRUE, TRUE, 'Chair Car'),
(8, 'C2', 'AC Chair Car', 78, 70, 8, TRUE, TRUE, 'Chair Car'),
(9, 'B1', 'AC 3 Tier', 64, 62, 2, TRUE, TRUE, 'AC Coach'),
(9, 'S6', 'Sleeper', 72, 66, 6, FALSE, FALSE, 'General Sleeper'),
(10, 'C3', 'AC Chair Car', 78, 74, 4, TRUE, TRUE, 'Chair Car'),
(10, 'B2', 'AC 3 Tier', 64, 60, 4, TRUE, TRUE, 'AC Coach');

-- display table data
Select * from Coaches;

-- to delete values from table 
truncate table Coaches;

-- to delete table
drop table Coaches;

-- 1. View all AC coaches (V)
SELECT * FROM Coaches WHERE AC = TRUE;

-- 2. View all coaches with less than 5 available seats (V)
SELECT * FROM Coaches WHERE AvailableSeats < 5;

-- 3. Count total number of coaches (C)
SELECT COUNT(*) AS TotalCoaches FROM Coaches;

-- 4. Count coaches grouped by CoachType (C)
SELECT CoachType, COUNT(*) AS Total FROM Coaches GROUP BY CoachType;

-- 5. Stored procedure to get coaches by TrainID (SP)
DELIMITER $$
CREATE PROCEDURE GetCoachesByTrain(IN tid INT)
BEGIN
  SELECT * FROM Coaches WHERE TrainID = tid;
END $$
DELIMITER ;

-- 6. Call stored procedure for TrainID = 5 (SP)
CALL GetCoachesByTrain(5);

-- 7. Window function to rank coaches by capacity (WF)
SELECT CoachID, TrainID, Capacity,
       RANK() OVER (ORDER BY Capacity DESC) AS CapacityRank
FROM Coaches;

-- 8. Window function to calculate running total of capacity (WF)
SELECT CoachID, TrainID, Capacity,
       SUM(Capacity) OVER (ORDER BY CoachID) AS RunningCapacity
FROM Coaches;

-- 9. Display all coaches where OccupiedSeats > Capacity/2 (D)
SELECT * FROM Coaches WHERE OccupiedSeats > Capacity/2;

-- 10. Display all PantryAvailable coaches (D)
SELECT * FROM Coaches WHERE PantryAvailable = TRUE;

-- 11. Add CHECK constraint to ensure OccupiedSeats <= Capacity (TCL - constraint)
ALTER TABLE Coaches ADD CONSTRAINT CHK_OccupiedSeats CHECK (OccupiedSeats <= Capacity);

-- 12. Add UNIQUE constraint to ensure CoachNumber unique per TrainID (TCL - constraint)
ALTER TABLE Coaches ADD CONSTRAINT UQ_TrainCoach UNIQUE (TrainID, CoachNumber);

-- 13. Transaction with rollback (TCL)
START TRANSACTION;
INSERT INTO Coaches (TrainID, CoachNumber, CoachType, Capacity, OccupiedSeats, AvailableSeats, AC, PantryAvailable, Remarks)
VALUES (11, 'S7', 'Sleeper', 72, 60, 12, FALSE, FALSE, 'Temporary Coach');
ROLLBACK;

-- 14. Transaction with commit (TCL)
START TRANSACTION;
INSERT INTO Coaches (TrainID, CoachNumber, CoachType, Capacity, OccupiedSeats, AvailableSeats, AC, PantryAvailable, Remarks)
VALUES (12, 'B3', 'AC 3 Tier', 64, 55, 9, TRUE, TRUE, 'New AC Coach');
COMMIT;

-- 15. Create CoachLogs table for trigger (Tri)
CREATE TABLE CoachLogs (
  LogID INT AUTO_INCREMENT PRIMARY KEY,
  CoachID INT,
  Action VARCHAR(20),
  LogTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 16. Trigger to log new coach insert (Tri)
DELIMITER $$
CREATE TRIGGER trg_after_coach_insert
AFTER INSERT ON Coaches
FOR EACH ROW
BEGIN
  INSERT INTO CoachLogs (CoachID, Action) VALUES (NEW.CoachID, 'INSERT');
END $$
DELIMITER ;

-- 17. Insert a coach to test trigger (Tri)
INSERT INTO Coaches (TrainID, CoachNumber, CoachType, Capacity, OccupiedSeats, AvailableSeats, AC, PantryAvailable, Remarks)
VALUES (13, 'A2', 'AC 2 Tier', 48, 40, 8, TRUE, FALSE, 'Trigger Test Coach');

-- 18. View logs created by trigger (Tri)
SELECT * FROM CoachLogs;

-- 19. View average capacity per CoachType (V & C)
SELECT CoachType, AVG(Capacity) AS AvgCapacity FROM Coaches GROUP BY CoachType;

-- 20. Window function to calculate average occupied seats per TrainID (WF)
SELECT CoachID, TrainID, OccupiedSeats,
       AVG(OccupiedSeats) OVER (PARTITION BY TrainID) AS AvgOccupiedPerTrain
FROM Coaches;


-- Table 8: Seats
CREATE TABLE Seats (
    SeatID INT PRIMARY KEY AUTO_INCREMENT,
    CoachID INT,
    SeatNumber VARCHAR(10),
    SeatType VARCHAR(20),
    IsWindowSeat BOOLEAN,
    IsBooked BOOLEAN,
    PassengerID INT,
    BookingID INT,
    TrainID INT,
    Remarks TEXT
);

INSERT INTO Seats (CoachID, SeatNumber, SeatType, IsWindowSeat, IsBooked, PassengerID, BookingID, TrainID, Remarks)
VALUES
(1, 'S1-1', 'Sleeper', TRUE, TRUE, 1, 1, 1, 'Booked'),
(1, 'S1-2', 'Sleeper', FALSE, TRUE, 2, 2, 1, 'Booked'),
(1, 'S1-3', 'Sleeper', TRUE, TRUE, 3, 3, 1, 'Booked'),
(1, 'S1-4', 'Sleeper', FALSE, FALSE, NULL, NULL, 1, 'Available'),
(2, 'A1-1', 'AC 2 Tier', TRUE, TRUE, 4, 4, 1, 'Booked'),
(2, 'A1-2', 'AC 2 Tier', FALSE, TRUE, 5, 5, 1, 'Booked'),
(2, 'A1-3', 'AC 2 Tier', TRUE, FALSE, NULL, NULL, 1, 'Available'),
(3, 'S2-1', 'Sleeper', TRUE, TRUE, 6, 6, 2, 'Booked'),
(3, 'S2-2', 'Sleeper', FALSE, FALSE, NULL, NULL, 2, 'Available'),
(3, 'S2-3', 'Sleeper', TRUE, TRUE, 7, 7, 2, 'Booked'),
(4, 'B1-1', 'AC 3 Tier', TRUE, TRUE, 8, 8, 3, 'Booked'),
(4, 'B1-2', 'AC 3 Tier', FALSE, FALSE, NULL, NULL, 3, 'Available'),
(4, 'B1-3', 'AC 3 Tier', TRUE, TRUE, 9, 9, 3, 'Booked'),
(5, 'C1-1', 'Chair Car', TRUE, TRUE, 10, 10, 4, 'Booked'),
(5, 'C1-2', 'Chair Car', FALSE, TRUE, 11, 11, 4, 'Booked'),
(5, 'C1-3', 'Chair Car', TRUE, FALSE, NULL, NULL, 4, 'Available'),
(6, 'S3-1', 'Sleeper', TRUE, TRUE, 12, 12, 5, 'Booked'),
(6, 'S3-2', 'Sleeper', FALSE, TRUE, 13, 13, 5, 'Booked'),
(6, 'S3-3', 'Sleeper', TRUE, FALSE, NULL, NULL, 5, 'Available'),
(7, 'A2-1', 'AC 2 Tier', TRUE, TRUE, 14, 14, 6, 'Booked');

-- display table data
Select * from Seats;

-- to delete values from table 
truncate table Seats;

-- to delete table
drop table Seats;

-- 1. View all booked seats (V)
SELECT * FROM Seats WHERE IsBooked = TRUE;

-- 2. View all available seats (V)
SELECT * FROM Seats WHERE IsBooked = FALSE;

-- 3. Count total number of seats (C)
SELECT COUNT(*) AS TotalSeats FROM Seats;

-- 4. Count seats grouped by SeatType (C)
SELECT SeatType, COUNT(*) AS Total FROM Seats GROUP BY SeatType;

-- 5. Stored procedure to get seats by CoachID (SP)
DELIMITER $$
CREATE PROCEDURE GetSeatsByCoach(IN cid INT)
BEGIN
  SELECT * FROM Seats WHERE CoachID = cid;
END $$
DELIMITER ;

-- 6. Call stored procedure for CoachID = 3 (SP)
CALL GetSeatsByCoach(3);

-- 7. Window function to rank seats by TrainID (WF)
SELECT SeatID, TrainID,
       RANK() OVER (PARTITION BY TrainID ORDER BY SeatID) AS SeatRank
FROM Seats;

-- 8. Window function to calculate total seats booked per TrainID (WF)
SELECT SeatID, TrainID, IsBooked,
       SUM(CASE WHEN IsBooked THEN 1 ELSE 0 END) OVER (PARTITION BY TrainID) AS TotalBookedSeats
FROM Seats;

-- 9. Display all window seats (D)
SELECT * FROM Seats WHERE IsWindowSeat = TRUE;

-- 10. Display all non-window seats that are available (D)
SELECT * FROM Seats WHERE IsWindowSeat = FALSE AND IsBooked = FALSE;

-- 11. Add CHECK constraint to ensure PassengerID is present only if seat is booked (TCL - constraint)
ALTER TABLE Seats ADD CONSTRAINT CHK_PassengerBooking CHECK ((IsBooked = TRUE AND PassengerID IS NOT NULL) OR (IsBooked = FALSE AND PassengerID IS NULL));

-- 12. Add UNIQUE constraint to ensure SeatNumber unique per CoachID (TCL - constraint)
ALTER TABLE Seats ADD CONSTRAINT UQ_CoachSeat UNIQUE (CoachID, SeatNumber);

-- 13. Transaction with rollback (TCL)
START TRANSACTION;
INSERT INTO Seats (CoachID, SeatNumber, SeatType, IsWindowSeat, IsBooked, PassengerID, BookingID, TrainID, Remarks)
VALUES (8, 'S4-1', 'Sleeper', TRUE, TRUE, 15, 15, 7, 'Temp Booking');
ROLLBACK;

-- 14. Transaction with commit (TCL)
START TRANSACTION;
INSERT INTO Seats (CoachID, SeatNumber, SeatType, IsWindowSeat, IsBooked, PassengerID, BookingID, TrainID, Remarks)
VALUES (9, 'B2-1', 'AC 3 Tier', TRUE, TRUE, 16, 16, 8, 'Final Booking');
COMMIT;

-- 15. Create SeatLogs table for trigger (Tri)
CREATE TABLE SeatLogs (
  LogID INT AUTO_INCREMENT PRIMARY KEY,
  SeatID INT,
  Action VARCHAR(20),
  LogTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 16. Trigger to log new seat insert (Tri)
DELIMITER $$
CREATE TRIGGER trg_after_seat_insert
AFTER INSERT ON Seats
FOR EACH ROW
BEGIN
  INSERT INTO SeatLogs (SeatID, Action) VALUES (NEW.SeatID, 'INSERT');
END $$
DELIMITER ;

-- 17. Insert a seat to test trigger (Tri)
INSERT INTO Seats (CoachID, SeatNumber, SeatType, IsWindowSeat, IsBooked, PassengerID, BookingID, TrainID, Remarks)
VALUES (10, 'C2-1', 'Chair Car', TRUE, TRUE, 17, 17, 9, 'Trigger Test Seat');

-- 18. View logs created by trigger (Tri)
SELECT * FROM SeatLogs;

-- 19. View average seats booked per SeatType (V & C)
SELECT SeatType, AVG(CASE WHEN IsBooked THEN 1 ELSE 0 END) AS AvgBooked
FROM Seats GROUP BY SeatType;

-- 20. Window function to calculate average booked seats per CoachID (WF)
SELECT SeatID, CoachID, IsBooked,
       AVG(CASE WHEN IsBooked THEN 1 ELSE 0 END) OVER (PARTITION BY CoachID) AS AvgBookedPerCoach
FROM Seats;


-- Table 9: Staff
CREATE TABLE Staff (
    StaffID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    Role VARCHAR(50),
    Department VARCHAR(50),
    TrainID INT,
    Shift VARCHAR(20),
    Contact VARCHAR(15),
    Email VARCHAR(100),
    JoinDate DATE,
    Remarks TEXT
);

INSERT INTO Staff (Name, Role, Department, TrainID, Shift, Contact, Email, JoinDate, Remarks)
VALUES
('Rakesh Singh', 'Ticket Checker', 'Onboard', 1, 'Morning', '9876543200', 'rakesh.tc@rail.in', '2018-05-10', 'Senior TC'),
('Meena Kumari', 'Attendant', 'Onboard', 1, 'Morning', '8765432100', 'meena.att@rail.in', '2019-06-15', 'Sleeper Attendant'),
('Sunil Yadav', 'Guard', 'Operations', 2, 'Night', '7654321000', 'sunil.guard@rail.in', '2017-03-20', 'Train Guard'),
('Anjali Sharma', 'Ticket Checker', 'Onboard', 2, 'Morning', '6543210000', 'anjali.tc@rail.in', '2020-07-01', 'New Joiner'),
('Deepak Verma', 'Pantry Staff', 'Catering', 3, 'Morning', '5432100000', 'deepak.pantry@rail.in', '2016-08-05', 'Pantry Head'),
('Kavita Joshi', 'Cleaner', 'Housekeeping', 3, 'Night', '4321000000', 'kavita.clean@rail.in', '2019-02-14', 'Sleeper Coach'),
('Rajiv Nair', 'Security', 'Security', 4, 'Night', '3210000000', 'rajiv.sec@rail.in', '2015-04-12', 'RPF'),
('Pooja Mehta', 'Ticket Checker', 'Onboard', 4, 'Morning', '2100000000', 'pooja.tc@rail.in', '2018-11-11', 'Rajdhani TC'),
('Amit Desai', 'Pantry Staff', 'Catering', 5, 'Morning', '1000000001', 'amit.pantry@rail.in', '2017-09-07', 'Pantry Assistant'),
('Sneha Rao', 'Cleaner', 'Housekeeping', 5, 'Night', '1000000002', 'sneha.clean@rail.in', '2019-01-22', 'Coach Cleaner'),
('Vivek Kumar', 'Security', 'Security', 6, 'Night', '1000000003', 'vivek.sec@rail.in', '2015-12-18', 'Train Guard'),
('Manoj Singh', 'Guard', 'Operations', 6, 'Night', '1000000004', 'manoj.guard@rail.in', '2014-04-04', 'Senior Guard'),
('Seema Das', 'Ticket Checker', 'Onboard', 7, 'Morning', '1000000005', 'seema.tc@rail.in', '2018-03-15', 'Duronto TC'),
('Prakash Jain', 'Attendant', 'Onboard', 7, 'Morning', '1000000006', 'prakash.att@rail.in', '2016-05-19', 'AC Attendant'),
('Nisha Kapoor', 'Pantry Staff', 'Catering', 8, 'Morning', '1000000007', 'nisha.pantry@rail.in', '2020-07-25', 'Pantry Junior'),
('Anand Pillai', 'Cleaner', 'Housekeeping', 8, 'Night', '1000000008', 'anand.clean@rail.in', '2019-08-30', 'Chair Car Cleaner'),
('Ritu Singh', 'Security', 'Security', 9, 'Night', '1000000009', 'ritu.sec@rail.in', '2017-06-09', 'RPF Lady Constable'),
('Pawan Yadav', 'Guard', 'Operations', 9, 'Night', '1000000010', 'pawan.guard@rail.in', '2013-02-02', 'Senior Guard'),
('Tanvi Shah', 'Ticket Checker', 'Onboard', 10, 'Morning', '1000000011', 'tanvi.tc@rail.in', '2021-01-01', 'New Recruit'),
('Sandeep Kaur', 'Pantry Staff', 'Catering', 10, 'Morning', '1000000012', 'sandeep.pantry@rail.in', '2018-10-10', 'Pantry Assistant');

-- display table data
Select * from Staff;

-- to delete values from table 
truncate table Staff;

-- to delete table
drop table Staff;

-- 1. View all staff details (V)
SELECT * FROM Staff;

-- 2. View all Ticket Checkers (V)
SELECT * FROM Staff WHERE Role = 'Ticket Checker';

-- 3. Count total staff members (C)
SELECT COUNT(*) AS TotalStaff FROM Staff;

-- 4. Count staff grouped by Department (C)
SELECT Department, COUNT(*) AS DeptCount FROM Staff GROUP BY Department;

-- 5. Stored procedure to get staff by TrainID (SP)
DELIMITER $$
CREATE PROCEDURE GetStaffByTrain(IN tid INT)
BEGIN
  SELECT * FROM Staff WHERE TrainID = tid;
END $$
DELIMITER ;

-- 6. Call stored procedure for TrainID = 3 (SP)
CALL GetStaffByTrain(3);

-- 7. Window function to rank staff by JoinDate (WF)
SELECT StaffID, Name, JoinDate,
       RANK() OVER (ORDER BY JoinDate) AS JoinRank
FROM Staff;

-- 8. Window function to count staff per department (WF)
SELECT StaffID, Department,
       COUNT(*) OVER (PARTITION BY Department) AS StaffInDept
FROM Staff;

-- 9. Display all staff who joined after 2018 (D)
SELECT * FROM Staff WHERE JoinDate > '2018-01-01';

-- 10. Display all staff working Night shifts (D)
SELECT * FROM Staff WHERE Shift = 'Night';

-- 11. Add CHECK constraint for valid Shift values (TCL - constraint)
ALTER TABLE Staff ADD CONSTRAINT CHK_Shift CHECK (Shift IN ('Morning','Night'));

-- 12. Add UNIQUE constraint for Email addresses (TCL - constraint)
ALTER TABLE Staff ADD CONSTRAINT UQ_Email UNIQUE (Email);

-- 13. Transaction with rollback (TCL)
START TRANSACTION;
INSERT INTO Staff (Name, Role, Department, TrainID, Shift, Contact, Email, JoinDate, Remarks)
VALUES ('Temp Staff', 'Attendant', 'Onboard', 11, 'Morning', '9999999999', 'temp.staff@rail.in', '2025-01-01', 'Temporary');
ROLLBACK;

-- 14. Transaction with commit (TCL)
START TRANSACTION;
INSERT INTO Staff (Name, Role, Department, TrainID, Shift, Contact, Email, JoinDate, Remarks)
VALUES ('Final Staff', 'Cleaner', 'Housekeeping', 12, 'Night', '8888888888', 'final.staff@rail.in', '2025-02-01', 'Permanent');
COMMIT;

-- 15. Create StaffLogs table for trigger (Tri)
CREATE TABLE StaffLogs (
  LogID INT AUTO_INCREMENT PRIMARY KEY,
  StaffID INT,
  Action VARCHAR(20),
  LogTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 16. Trigger to log staff insert (Tri)
DELIMITER $$
CREATE TRIGGER trg_after_staff_insert
AFTER INSERT ON Staff
FOR EACH ROW
BEGIN
  INSERT INTO StaffLogs (StaffID, Action) VALUES (NEW.StaffID, 'INSERT');
END $$
DELIMITER ;

-- 17. Insert a staff member to test trigger (Tri)
INSERT INTO Staff (Name, Role, Department, TrainID, Shift, Contact, Email, JoinDate, Remarks)
VALUES ('Trigger Staff', 'Security', 'Security', 13, 'Night', '7777777777', 'trigger.staff@rail.in', '2025-03-01', 'Trigger Test');

-- 18. View StaffLogs entries (Tri)
SELECT * FROM StaffLogs;

-- 19. Count average staff per TrainID (C)
SELECT TrainID, COUNT(*) AS StaffCount FROM Staff GROUP BY TrainID;

-- 20. Window function to calculate average joining year per Department (WF)
SELECT StaffID, Department, YEAR(JoinDate) AS JoinYear,
       AVG(YEAR(JoinDate)) OVER (PARTITION BY Department) AS AvgJoinYear
FROM Staff;


-- Table 10 : Engineers
CREATE TABLE Engineers (
    EngineerID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    Specialization VARCHAR(50),
    Department VARCHAR(50),
    TrainID INT,
    Contact VARCHAR(15),
    Email VARCHAR(100),
    AssignedDate DATE,
    Certification VARCHAR(50),
    Remarks TEXT
);

INSERT INTO Engineers (Name, Specialization, Department, TrainID, Contact, Email, AssignedDate, Certification, Remarks)
VALUES
('Rajesh Kumar', 'Mechanical', 'Maintenance', 1, '9123456700', 'rajesh.eng@rail.in', '2020-01-15', 'Loco Expert', 'Senior'),
('Priya Gupta', 'Electrical', 'Maintenance', 1, '9123456701', 'priya.eng@rail.in', '2019-03-10', 'Electrical Cert', 'AC Coach'),
('Anil Sharma', 'Signal', 'Operations', 2, '9123456702', 'anil.eng@rail.in', '2018-05-20', 'Signal Cert', 'Track Signals'),
('Sunita Reddy', 'Mechanical', 'Maintenance', 2, '9123456703', 'sunita.eng@rail.in', '2017-07-25', 'Coach Cert', 'Coach Overhaul'),
('Deepak Singh', 'Electrical', 'Maintenance', 3, '9123456704', 'deepak.eng@rail.in', '2016-09-12', 'AC Cert', 'AC Maintenance'),
('Ravi Verma', 'Signal', 'Operations', 3, '9123456705', 'ravi.eng@rail.in', '2015-11-30', 'Signal Cert', 'Route Signals'),
('Aarti Joshi', 'Mechanical', 'Maintenance', 4, '9123456706', 'aarti.eng@rail.in', '2014-04-18', 'Coach Cert', 'LHB Coach'),
('Kunal Desai', 'Electrical', 'Maintenance', 4, '9123456707', 'kunal.eng@rail.in', '2013-02-25', 'Loco Cert', 'Train Loco'),
('Neha Singh', 'Signal', 'Operations', 5, '9123456708', 'neha.eng@rail.in', '2012-06-05', 'Signal Cert', 'Control Room'),
('Arun Kumar', 'Mechanical', 'Maintenance', 5, '9123456709', 'arun.eng@rail.in', '2011-03-14', 'Coach Cert', 'Old Coaches'),
('Pooja Yadav', 'Electrical', 'Maintenance', 6, '9123456710', 'pooja.eng@rail.in', '2020-02-20', 'AC Cert', 'AC Units'),
('Rahul Nair', 'Signal', 'Operations', 6, '9123456711', 'rahul.eng@rail.in', '2019-05-25', 'Signal Cert', 'Auto Signal'),
('Sneha Mehta', 'Mechanical', 'Maintenance', 7, '9123456712', 'sneha.eng@rail.in', '2018-07-30', 'Coach Cert', 'Coach Link'),
('Amit Jain', 'Electrical', 'Maintenance', 7, '9123456713', 'amit.eng@rail.in', '2017-09-10', 'Loco Cert', 'Traction'),
('Kiran Das', 'Signal', 'Operations', 8, '9123456714', 'kiran.eng@rail.in', '2016-11-15', 'Signal Cert', 'Yard Signal'),
('Bhavna Pillai', 'Mechanical', 'Maintenance', 8, '9123456715', 'bhavna.eng@rail.in', '2015-01-05', 'Coach Cert', 'Fitment'),
('Vikas Kapoor', 'Electrical', 'Maintenance', 9, '9123456716', 'vikas.eng@rail.in', '2014-04-21', 'Loco Cert', 'EMU'),
('Anita Rao', 'Signal', 'Operations', 9, '9123456717', 'anita.eng@rail.in', '2013-07-12', 'Signal Cert', 'Cabling'),
('Rohit Saxena', 'Mechanical', 'Maintenance', 10, '9123456718', 'rohit.eng@rail.in', '2012-09-08', 'Coach Cert', 'LHB Coach'),
('Geeta Shah', 'Electrical', 'Maintenance', 10, '9123456719', 'geeta.eng@rail.in', '2011-12-20', 'AC Cert', 'HVAC System');

-- display table data
Select * from Engineers;

-- to delete values from table 
truncate table Engineers;

-- to delete table
drop table Engineers;

-- 1. View all engineers (V)
SELECT * FROM Engineers;

-- 2. View engineers specialized in Mechanical (V)
SELECT * FROM Engineers WHERE Specialization = 'Mechanical';

-- 3. Count total engineers (C)
SELECT COUNT(*) AS TotalEngineers FROM Engineers;

-- 4. Count engineers by Department (C)
SELECT Department, COUNT(*) AS DeptCount FROM Engineers GROUP BY Department;

-- 5. Stored procedure to fetch engineers by TrainID (SP)
DELIMITER $$
CREATE PROCEDURE GetEngineersByTrain(IN tid INT)
BEGIN
  SELECT * FROM Engineers WHERE TrainID = tid;
END $$
DELIMITER ;

-- 6. Call stored procedure for TrainID = 3 (SP)
CALL GetEngineersByTrain(3);

-- 7. Window function to rank engineers by AssignedDate (WF)
SELECT EngineerID, Name, AssignedDate,
       RANK() OVER (ORDER BY AssignedDate) AS RankByDate
FROM Engineers;

-- 8. Window function to count engineers per specialization (WF)
SELECT EngineerID, Specialization,
       COUNT(*) OVER (PARTITION BY Specialization) AS EngCount
FROM Engineers;

-- 9. Display engineers assigned after 2018 (D)
SELECT * FROM Engineers WHERE AssignedDate > '2018-01-01';

-- 10. Display engineers with Certification 'Signal Cert' (D)
SELECT * FROM Engineers WHERE Certification = 'Signal Cert';

-- 11. Add CHECK constraint for Department values (TCL - constraint)
ALTER TABLE Engineers ADD CONSTRAINT CHK_Department CHECK (Department IN ('Maintenance','Operations'));

-- 12. Add UNIQUE constraint for Email (TCL - constraint)
ALTER TABLE Engineers ADD CONSTRAINT UQ_EngineerEmail UNIQUE (Email);

-- 13. Transaction with rollback (TCL)
START TRANSACTION;
INSERT INTO Engineers (Name, Specialization, Department, TrainID, Contact, Email, AssignedDate, Certification, Remarks)
VALUES ('Temp Engineer', 'Mechanical', 'Maintenance', 11, '9999999999', 'temp.eng@rail.in', '2025-01-01', 'Temp Cert', 'Temporary');
ROLLBACK;

-- 14. Transaction with commit (TCL)
START TRANSACTION;
INSERT INTO Engineers (Name, Specialization, Department, TrainID, Contact, Email, AssignedDate, Certification, Remarks)
VALUES ('Final Engineer', 'Electrical', 'Maintenance', 12, '8888888888', 'final.eng@rail.in', '2025-02-01', 'Final Cert', 'Permanent');
COMMIT;

-- 15. Create EngineersLog table for trigger (Tri)
CREATE TABLE EngineersLog (
  LogID INT AUTO_INCREMENT PRIMARY KEY,
  EngineerID INT,
  Action VARCHAR(20),
  LogTime TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- 16. Trigger to log inserts in Engineers (Tri)
DELIMITER $$
CREATE TRIGGER trg_after_engineer_insert
AFTER INSERT ON Engineers
FOR EACH ROW
BEGIN
  INSERT INTO EngineersLog (EngineerID, Action) VALUES (NEW.EngineerID, 'INSERT');
END $$
DELIMITER ;

-- 17. Insert engineer to test trigger (Tri)
INSERT INTO Engineers (Name, Specialization, Department, TrainID, Contact, Email, AssignedDate, Certification, Remarks)
VALUES ('Trigger Engineer', 'Signal', 'Operations', 13, '7777777777', 'trigger.eng@rail.in', '2025-03-01', 'Trigger Cert', 'Trigger Test');

-- 18. View EngineersLog entries (Tri)
SELECT * FROM EngineersLog;

-- 19. Count engineers grouped by Specialization (C)
SELECT Specialization, COUNT(*) AS EngCount FROM Engineers GROUP BY Specialization;

-- 20. Window function to calculate average assignment year per Department (WF)
SELECT EngineerID, Department, YEAR(AssignedDate) AS AssignedYear,
       AVG(YEAR(AssignedDate)) OVER (PARTITION BY Department) AS AvgAssignedYear
FROM Engineers;


-- Table 11: TrainSchedules
CREATE TABLE TrainSchedules (
    ScheduleID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    RouteID INT,
    DepartureDate DATE,
    DepartureTime TIME,
    ArrivalDate DATE,
    ArrivalTime TIME,
    PlatformNumber VARCHAR(5),
    Status VARCHAR(20),
    Remarks TEXT
);

INSERT INTO TrainSchedules (TrainID, RouteID, DepartureDate, DepartureTime, ArrivalDate, ArrivalTime, PlatformNumber, Status, Remarks)
VALUES
(1, 1, '2025-07-20', '16:00:00', '2025-07-21', '08:35:00', '1', 'On Time', 'Rajdhani'),
(2, 2, '2025-07-21', '16:55:00', '2025-07-22', '10:15:00', '2', 'On Time', 'Howrah Rajdhani'),
(3, 3, '2025-07-22', '06:00:00', '2025-07-22', '12:00:00', '3', 'On Time', 'Shatabdi'),
(4, 4, '2025-07-23', '20:30:00', '2025-07-25', '05:40:00', '4', 'On Time', 'Karnataka Exp'),
(5, 5, '2025-07-24', '06:00:00', '2025-07-25', '07:15:00', '5', 'On Time', 'Telangana Exp'),
(6, 6, '2025-07-25', '17:40:00', '2025-07-26', '10:10:00', '6', 'On Time', 'August Kranti'),
(7, 7, '2025-07-26', '09:00:00', '2025-07-27', '21:20:00', '7', 'On Time', 'Sanghamitra'),
(8, 8, '2025-07-27', '19:15:00', '2025-07-28', '05:45:00', '8', 'On Time', 'GT Express'),
(9, 9, '2025-07-28', '06:35:00', '2025-07-30', '04:55:00', '9', 'On Time', 'Rapti Sagar'),
(10, 10, '2025-07-29', '18:30:00', '2025-07-30', '10:20:00', '10', 'On Time', 'Duronto'),
(11, 11, '2025-07-30', '19:50:00', '2025-07-31', '06:10:00', '11', 'On Time', 'NDL-LKO Rajdhani'),
(12, 12, '2025-07-31', '06:00:00', '2025-08-01', '11:25:00', '12', 'On Time', 'Gitanjali'),
(13, 13, '2025-08-01', '21:45:00', '2025-08-02', '22:00:00', '13', 'On Time', 'Purushottam'),
(14, 14, '2025-08-02', '06:00:00', '2025-08-02', '12:30:00', '14', 'On Time', 'Shatabdi'),
(15, 15, '2025-08-03', '22:00:00', '2025-08-04', '07:30:00', '15', 'On Time', 'Tamil Nadu Exp'),
(16, 16, '2025-08-04', '21:25:00', '2025-08-05', '23:35:00', '16', 'On Time', 'Golden Temple'),
(17, 17, '2025-08-05', '07:55:00', '2025-08-06', '16:30:00', '17', 'On Time', 'Haridwar AC'),
(18, 18, '2025-08-06', '20:35:00', '2025-08-07', '17:00:00', '18', 'On Time', 'Swarna Jayanti'),
(19, 19, '2025-08-07', '12:20:00', '2025-08-08', '13:20:00', '19', 'On Time', 'Kerala Express'),
(20, 20, '2025-08-08', '16:35:00', '2025-08-09', '09:45:00', '20', 'On Time', 'Garib Rath');

-- display table data
Select * from TrainSchedules;

-- to delete values from table 
truncate table TrainSchedules;

-- to delete table
drop table TrainSchedules;

-- 1. View all schedules
SELECT * FROM TrainSchedules;

-- 2. View schedules with status 'On Time'
SELECT * FROM TrainSchedules WHERE Status = 'On Time';

-- 3. Count how many schedules exist
SELECT COUNT(*) AS TotalSchedules FROM TrainSchedules;

-- 4. Count trains scheduled to depart on '2025-07-22'
SELECT COUNT(*) AS DeparturesOnJuly22 FROM TrainSchedules WHERE DepartureDate = '2025-07-22';

-- 5. Find earliest departure time
SELECT MIN(DepartureTime) AS EarliestDeparture FROM TrainSchedules;

-- 6. Find latest arrival time
SELECT MAX(ArrivalTime) AS LatestArrival FROM TrainSchedules;

-- 7. Find distinct platform numbers used
SELECT DISTINCT PlatformNumber FROM TrainSchedules;

-- 8. Order trains by departure date
SELECT * FROM TrainSchedules ORDER BY DepartureDate ASC;

-- 9. Find schedule details for TrainID = 5
SELECT * FROM TrainSchedules WHERE TrainID = 5;

-- 10. Find schedules between 2025-07-22 and 2025-07-25
SELECT * FROM TrainSchedules WHERE DepartureDate BETWEEN '2025-07-22' AND '2025-07-25';

-- 11. Update status of TrainID 10 to 'Delayed'
UPDATE TrainSchedules SET Status = 'Delayed' WHERE TrainID = 10;

-- 12. Delete a schedule with ScheduleID = 20
DELETE FROM TrainSchedules WHERE ScheduleID = 20;

-- 13. Add a new column for TrainType
ALTER TABLE TrainSchedules ADD COLUMN TrainType VARCHAR(50);

-- 14. Rename column Remarks to Notes
ALTER TABLE TrainSchedules CHANGE Remarks Notes TEXT;

-- 15. Calculate total travel hours for each train
SELECT ScheduleID, TIMESTAMPDIFF(HOUR, CONCAT(DepartureDate,' ',DepartureTime), CONCAT(ArrivalDate,' ',ArrivalTime)) AS TravelHours
FROM TrainSchedules;

-- 16. Show average travel time of all trains
SELECT AVG(TIMESTAMPDIFF(HOUR, CONCAT(DepartureDate,' ',DepartureTime), CONCAT(ArrivalDate,' ',ArrivalTime))) AS AvgTravelHours
FROM TrainSchedules;

-- 17. Window function: Rank trains by DepartureDate
SELECT ScheduleID, TrainID, DepartureDate, RANK() OVER (ORDER BY DepartureDate) AS RankByDeparture
FROM TrainSchedules;

-- 18. Window function: Row number for each train by departure time
SELECT TrainID, DepartureTime, ROW_NUMBER() OVER (PARTITION BY TrainID ORDER BY DepartureTime) AS RowNum
FROM TrainSchedules;

-- 19. Window function: Row number for each train by departure time
SELECT TrainID, DepartureTime, ROW_NUMBER() OVER (PARTITION BY TrainID ORDER BY DepartureTime) AS RowNum
FROM TrainSchedules;

-- 20. Create stored procedure to update train status
DELIMITER $$
CREATE PROCEDURE UpdateTrainStatus(IN p_TrainID INT, IN p_Status VARCHAR(20))
BEGIN
    UPDATE TrainSchedules SET Status = p_Status WHERE TrainID = p_TrainID;
END $$
DELIMITER ;

-- Table 12: Catering
CREATE TABLE Catering (
    CateringID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    VendorID INT,
    StaffID INT,
    MealType VARCHAR(20),
    Menu VARCHAR(100),
    Quantity INT,
    ServiceTime TIME,
    Status VARCHAR(20),
    Remarks TEXT
);

INSERT INTO Catering (TrainID, VendorID, StaffID, MealType, Menu, Quantity, ServiceTime, Status, Remarks)
VALUES
(1, 1, 1, 'Breakfast', 'Idli, Dosa, Coffee', 100, '07:00:00', 'Served', 'South Special'),
(2, 2, 2, 'Lunch', 'Veg Thali, Roti, Rice', 150, '13:00:00', 'Served', 'North Thali'),
(3, 3, 3, 'Dinner', 'Chicken Curry, Rice, Dal', 200, '20:00:00', 'Served', 'Non-Veg Meal'),
(4, 4, 4, 'Snacks', 'Samosa, Tea', 250, '17:00:00', 'Served', 'Evening Snacks'),
(5, 5, 5, 'Breakfast', 'Puri Bhaji, Chai', 120, '07:30:00', 'Served', 'North Indian'),
(6, 6, 6, 'Lunch', 'Paneer, Roti, Rice', 180, '12:30:00', 'Served', 'Veg Meal'),
(7, 7, 7, 'Dinner', 'Dal Makhani, Roti', 190, '20:30:00', 'Served', 'Veg Dinner'),
(8, 8, 8, 'Snacks', 'Pakora, Tea', 200, '17:30:00', 'Served', 'Tea Snacks'),
(9, 9, 9, 'Breakfast', 'Upma, Chutney, Coffee', 130, '06:45:00', 'Served', 'South Combo'),
(10, 10, 10, 'Lunch', 'Fish Curry, Rice', 170, '13:15:00', 'Served', 'Coastal Meal'),
(11, 11, 11, 'Dinner', 'Egg Curry, Rice', 160, '21:00:00', 'Served', 'Non-Veg'),
(12, 12, 12, 'Snacks', 'Vada Pav, Chai', 220, '17:45:00', 'Served', 'Mumbai Style'),
(13, 13, 13, 'Breakfast', 'Paratha, Dahi', 140, '07:10:00', 'Served', 'Punjabi'),
(14, 14, 14, 'Lunch', 'Rajma, Rice', 160, '12:45:00', 'Served', 'Punjabi'),
(15, 15, 15, 'Dinner', 'Veg Biryani', 180, '20:15:00', 'Served', 'Special Biryani'),
(16, 16, 16, 'Snacks', 'Momos, Soup', 210, '18:00:00', 'Served', 'Indo-Chinese'),
(17, 17, 17, 'Breakfast', 'Poha, Jalebi', 120, '07:20:00', 'Served', 'MP Style'),
(18, 18, 18, 'Lunch', 'Kadhi, Rice', 170, '12:50:00', 'Served', 'Gujarati Meal'),
(19, 19, 19, 'Dinner', 'Roti, Sabji', 190, '20:40:00', 'Served', 'Regular'),
(20, 20, 20, 'Snacks', 'Sandwich, Tea', 230, '17:10:00', 'Served', 'Quick Bite');

-- display table data
Select * from Catering;

-- to delete values from table 
truncate table Catering;

-- to delete table
drop table Catering;

-- 1. View all catering records
SELECT * FROM Catering;

-- 2. View only breakfast meals
SELECT * FROM Catering WHERE MealType = 'Breakfast';

-- 3. Count total catering services
SELECT COUNT(*) AS TotalCatering FROM Catering;

-- 4. Count meals served by each meal type
SELECT MealType, COUNT(*) AS CountMeals FROM Catering GROUP BY MealType;

-- 5. Find maximum quantity of meals served
SELECT MAX(Quantity) AS MaxQuantity FROM Catering;

-- 6. Find minimum quantity of meals served
SELECT MIN(Quantity) AS MinQuantity FROM Catering;

-- 7. Find distinct meal types available
SELECT DISTINCT MealType FROM Catering;

-- 8. Show all services ordered by ServiceTime
SELECT * FROM Catering ORDER BY ServiceTime ASC;

-- 9. Find catering details for TrainID = 10
SELECT * FROM Catering WHERE TrainID = 10;

-- 10. Find meals served between 12:00 and 14:00
SELECT * FROM Catering WHERE ServiceTime BETWEEN '12:00:00' AND '14:00:00';

-- 11. Update status of CateringID = 5 to 'Pending'
UPDATE Catering SET Status = 'Pending' WHERE CateringID = 5;

-- 12. Delete catering record of CateringID = 20
DELETE FROM Catering WHERE CateringID = 20;

-- 13. Add a new column for Price
ALTER TABLE Catering ADD COLUMN Price DECIMAL(8,2);

-- 14. Rename column Remarks to Notes
ALTER TABLE Catering CHANGE Remarks Notes TEXT;

-- 15. Subquery: Find meals with quantity greater than average quantity
SELECT * FROM Catering 
WHERE Quantity > (SELECT AVG(Quantity) FROM Catering);

-- 16. Subquery: Get vendors who served more than 1 meal type
SELECT VendorID FROM Catering 
GROUP BY VendorID HAVING COUNT(DISTINCT MealType) > 1;

-- 17. Window function: Rank vendors by total quantity served
SELECT VendorID, SUM(Quantity) AS TotalQty,
RANK() OVER (ORDER BY SUM(Quantity) DESC) AS RankByQuantity
FROM Catering GROUP BY VendorID;

-- 18. Window function: Assign row numbers by MealType
SELECT MealType, CateringID, ROW_NUMBER() OVER (PARTITION BY MealType ORDER BY ServiceTime) AS RowNum
FROM Catering;

-- 20. Create stored procedure to update catering status
DELIMITER $$
CREATE PROCEDURE UpdateCateringStatus(IN p_CateringID INT, IN p_Status VARCHAR(20))
BEGIN
    UPDATE Catering SET Status = p_Status WHERE CateringID = p_CateringID;
END $$
DELIMITER ;


-- Table 13: Vendors
CREATE TABLE Vendors (
    VendorID INT PRIMARY KEY AUTO_INCREMENT,
    Name VARCHAR(100),
    Contact VARCHAR(15),
    Email VARCHAR(100),
    ServiceType VARCHAR(50),
    LicenseNo VARCHAR(50),
    Address VARCHAR(200),
    ContractStart DATE,
    ContractEnd DATE,
    Remarks TEXT
);

INSERT INTO Vendors (Name, Contact, Email, ServiceType, LicenseNo, Address, ContractStart, ContractEnd, Remarks)
VALUES
('Food Corp', '9876543210', 'contact@foodcorp.in', 'Catering', 'LIC123', 'Delhi', '2024-01-01', '2026-12-31', 'Main Caterer'),
('Fresh Meals', '8765432101', 'info@freshmeals.in', 'Catering', 'LIC124', 'Mumbai', '2024-01-01', '2026-12-31', 'Veg Special'),
('Healthy Bites', '7654321012', 'hello@healthybites.in', 'Catering', 'LIC125', 'Bengaluru', '2024-01-01', '2026-12-31', 'Snacks'),
('Spice Route', '6543210123', 'sales@spiceroute.in', 'Catering', 'LIC126', 'Chennai', '2024-01-01', '2026-12-31', 'South Meals'),
('Taste On Track', '5432101234', 'support@tasteontrack.in', 'Catering', 'LIC127', 'Hyderabad', '2024-01-01', '2026-12-31', 'Special Meals'),
('Rail Kitchen', '4321012345', 'service@railkitchen.in', 'Catering', 'LIC128', 'Kolkata', '2024-01-01', '2026-12-31', 'Combo Meals'),
('Quick Serve', '3210123456', 'order@quickserve.in', 'Catering', 'LIC129', 'Pune', '2024-01-01', '2026-12-31', 'Snacks'),
('Yummy Rails', '2101234567', 'book@yummyrails.in', 'Catering', 'LIC130', 'Ahmedabad', '2024-01-01', '2026-12-31', 'Specialty'),
('Food Express', '1098765432', 'partner@foodexpress.in', 'Catering', 'LIC131', 'Bhopal', '2024-01-01', '2026-12-31', 'Meals'),
('Eat Well', '9087654321', 'hello@eatwell.in', 'Catering', 'LIC132', 'Lucknow', '2024-01-01', '2026-12-31', 'Healthy'),
('Foodie Hub', '8076543210', 'contact@foodiehub.in', 'Catering', 'LIC133', 'Kanpur', '2024-01-01', '2026-12-31', 'Regional'),
('Delish Foods', '7065432109', 'info@delishfoods.in', 'Catering', 'LIC134', 'Jaipur', '2024-01-01', '2026-12-31', 'Regional'),
('Tasty Trails', '6054321098', 'sales@tastytrails.in', 'Catering', 'LIC135', 'Indore', '2024-01-01', '2026-12-31', 'Combo'),
('Flavor Line', '5043210987', 'support@flavorline.in', 'Catering', 'LIC136', 'Patna', '2024-01-01', '2026-12-31', 'Snacks'),
('Fresh Plate', '4032109876', 'order@freshplate.in', 'Catering', 'LIC137', 'Ranchi', '2024-01-01', '2026-12-31', 'Special Meals'),
('Meal Makers', '3021098765', 'book@mealmakers.in', 'Catering', 'LIC138', 'Guwahati', '2024-01-01', '2026-12-31', 'Regional'),
('Spice Chef', '2010987654', 'partner@spicechef.in', 'Catering', 'LIC139', 'Jodhpur', '2024-01-01', '2026-12-31', 'Special Meals'),
('Rail Feast', '1009876543', 'hello@railfeast.in', 'Catering', 'LIC140', 'Vijayawada', '2024-01-01', '2026-12-31', 'Regional'),
('Chef On Rail', '9998765432', 'info@chefonrail.in', 'Catering', 'LIC141', 'Coimbatore', '2024-01-01', '2026-12-31', 'Healthy'),
('Rail Dine', '8887654321', 'service@raildine.in', 'Catering', 'LIC142', 'Amritsar', '2024-01-01', '2026-12-31', 'Combo');

-- display table data
Select * from Vendors;

-- to delete values from table 
truncate table Vendors;

-- to delete table
drop table Vendors;

-- 1. View all vendors
SELECT * FROM Vendors;

-- 2. View vendors from Mumbai
SELECT * FROM Vendors WHERE Address = 'Mumbai';

-- 3. Count total number of vendors
SELECT COUNT(*) AS TotalVendors FROM Vendors;

-- 4. Count vendors city-wise
SELECT Address, COUNT(*) AS VendorCount FROM Vendors GROUP BY Address;

-- 5. Find earliest contract start date
SELECT MIN(ContractStart) AS EarliestContract FROM Vendors;

-- 6. Find latest contract end date
SELECT MAX(ContractEnd) AS LatestContract FROM Vendors;

-- 7. Show distinct cities where vendors are located
SELECT DISTINCT Address FROM Vendors;

-- 8. Show vendors ordered by ContractEnd descending
SELECT * FROM Vendors ORDER BY ContractEnd DESC;

-- 9. Find vendor details with LicenseNo = 'LIC130'
SELECT * FROM Vendors WHERE LicenseNo = 'LIC130';

-- 10. Find vendors whose contracts expire in 2026
SELECT * FROM Vendors WHERE YEAR(ContractEnd) = 2026;

-- 11. Update remarks of VendorID = 5
UPDATE Vendors SET Remarks = 'Updated Special Meals' WHERE VendorID = 5;

-- 12. Delete vendor with VendorID = 20
DELETE FROM Vendors WHERE VendorID = 20;

-- 13. Add a new column for Rating
ALTER TABLE Vendors ADD COLUMN Rating INT;

-- 14. Rename column Remarks to Notes
ALTER TABLE Vendors CHANGE Remarks Notes TEXT;

-- 15. Subquery: Find vendors whose contract end date is later than average end date
SELECT * FROM Vendors
WHERE ContractEnd > (SELECT AVG(ContractEnd) FROM (SELECT ContractEnd FROM Vendors) AS T);

-- 16. Subquery: Get vendors from cities having more than 1 vendor
SELECT Address FROM Vendors GROUP BY Address HAVING COUNT(*) > 1;

-- 17. Window function: Rank vendors by contract duration
SELECT VendorID, Name, DATEDIFF(ContractEnd, ContractStart) AS Duration,
RANK() OVER (ORDER BY DATEDIFF(ContractEnd, ContractStart) DESC) AS RankByDuration
FROM Vendors;

-- 18. Window function: Assign row numbers to vendors city-wise
SELECT Address, VendorID, ROW_NUMBER() OVER (PARTITION BY Address ORDER BY VendorID) AS RowNum
FROM Vendors;

-- First create the log table if not exists
CREATE TABLE IF NOT EXISTS VendorLog (
    LogID INT PRIMARY KEY AUTO_INCREMENT,
    VendorID INT,
    Action VARCHAR(50),
    ActionDate DATETIME
);

-- Change delimiter for trigger creation
DELIMITER $$

CREATE TRIGGER AfterVendorDelete
AFTER DELETE ON Vendors
FOR EACH ROW
BEGIN
    INSERT INTO VendorLog (VendorID, Action, ActionDate)
    VALUES (OLD.VendorID, 'Deleted', NOW());
END $$

-- Reset delimiter back
DELIMITER ;

-- 20. Create stored procedure to update vendor remarks
DELIMITER $$
CREATE PROCEDURE UpdateVendorRemarks(IN p_VendorID INT, IN p_Remarks TEXT)
BEGIN
    UPDATE Vendors SET Notes = p_Remarks WHERE VendorID = p_VendorID;
END $$
DELIMITER ;


-- Table 14: MaintenanceLogs
CREATE TABLE MaintenanceLogs (
    LogID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    EngineerID INT,
    Date DATE,
    Time TIME,
    IssueReported VARCHAR(100),
    ActionTaken VARCHAR(100),
    Status VARCHAR(20),
    NextDue DATE,
    Remarks TEXT
);

INSERT INTO MaintenanceLogs (TrainID, EngineerID, Date, Time, IssueReported, ActionTaken, Status, NextDue, Remarks) 
VALUES
(1, 1, '2025-07-01', '09:00:00', 'Brake check', 'Brake pads replaced', 'Completed', '2025-08-01', 'Monthly check'),
(2, 2, '2025-07-02', '10:00:00', 'AC gas low', 'Gas refilled', 'Completed', '2025-08-02', 'Routine AC service'),
(3, 3, '2025-07-03', '11:00:00', 'Signal glitch', 'Signal circuit fixed', 'Completed', '2025-08-03', 'Signal maintenance'),
(4, 4, '2025-07-04', '12:00:00', 'Wheel misalignment', 'Alignment adjusted', 'Completed', '2025-08-04', 'Underframe check'),
(5, 5, '2025-07-05', '13:00:00', 'Coach AC filter', 'Filter cleaned', 'Completed', '2025-08-05', 'Monthly HVAC'),
(6, 6, '2025-07-06', '14:00:00', 'Door latch broken', 'Latch replaced', 'Completed', '2025-08-06', 'Coach safety'),
(7, 7, '2025-07-07', '15:00:00', 'Fan not working', 'Fan motor replaced', 'Completed', '2025-08-07', 'Coach electrics'),
(8, 8, '2025-07-08', '16:00:00', 'Window cracked', 'Glass changed', 'Completed', '2025-08-08', 'Coach interiors'),
(9, 9, '2025-07-09', '17:00:00', 'Engine noise', 'Engine serviced', 'Completed', '2025-08-09', 'Loco checkup'),
(10, 10, '2025-07-10', '18:00:00', 'Brake rod issue', 'Rod replaced', 'Completed', '2025-08-10', 'Brake check'),
(1, 11, '2025-07-11', '09:30:00', 'Seat loose', 'Seat fixed', 'Completed', '2025-08-11', 'Coach comfort'),
(2, 12, '2025-07-12', '10:30:00', 'AC vent blocked', 'Vent cleaned', 'Completed', '2025-08-12', 'HVAC'),
(3, 13, '2025-07-13', '11:30:00', 'Signal light out', 'Bulb replaced', 'Completed', '2025-08-13', 'Signal safety'),
(4, 14, '2025-07-14', '12:30:00', 'Toilet flush leak', 'Valve replaced', 'Completed', '2025-08-14', 'Sanitation'),
(5, 15, '2025-07-15', '13:30:00', 'Luggage rack loose', 'Rack fixed', 'Completed', '2025-08-15', 'Coach fitments'),
(6, 16, '2025-07-16', '14:30:00', 'Fan switch faulty', 'Switch replaced', 'Completed', '2025-08-16', 'Electricals'),
(7, 17, '2025-07-17', '15:30:00', 'Brake shoe worn', 'Brake shoe changed', 'Completed', '2025-08-17', 'Brake maintenance'),
(8, 18, '2025-07-18', '16:30:00', 'Pantry pipe leak', 'Pipe fixed', 'Completed', '2025-08-18', 'Pantry check'),
(9, 19, '2025-07-19', '17:30:00', 'Signal relay issue', 'Relay replaced', 'Completed', '2025-08-19', 'Signal check'),
(10, 20, '2025-07-20', '18:30:00', 'Coach repaint', 'Paint touch-up done', 'Completed', '2025-08-20', 'Coach bodywork');

-- display table data
Select * from MaintenanceLogs;

-- to delete values from table 
truncate table MaintenanceLogs;

-- to delete table
drop table MaintenanceLogs;

-- 1. View: Show all completed maintenance logs
CREATE VIEW CompletedLogs AS
SELECT * FROM MaintenanceLogs WHERE Status = 'Completed';

-- 2. View: Show upcoming maintenance due in July 2025
CREATE VIEW JulyDueLogs AS
SELECT * FROM MaintenanceLogs WHERE MONTH(NextDue) = 7 AND YEAR(NextDue) = 2025;

-- 3. Constraint: Add NOT NULL on IssueReported
ALTER TABLE MaintenanceLogs MODIFY IssueReported VARCHAR(100) NOT NULL;

-- 4. Constraint: Add check to ensure Status is only Completed or Pending
ALTER TABLE MaintenanceLogs ADD CONSTRAINT chk_status CHECK (Status IN ('Completed','Pending'));

-- 5. Constraint: Add foreign key TrainID (assuming Trains table exists)
ALTER TABLE MaintenanceLogs ADD CONSTRAINT fk_train FOREIGN KEY (TrainID) REFERENCES Trains(TrainID);

-- 6. Stored Procedure: Get logs by TrainID
DELIMITER $$
CREATE PROCEDURE GetLogsByTrain(IN tid INT)
BEGIN
    SELECT * FROM MaintenanceLogs WHERE TrainID = tid;
END$$
DELIMITER ;

-- 7. Stored Procedure: Insert new log
DELIMITER $$
CREATE PROCEDURE InsertLog(
    IN tid INT, IN eid INT, IN d DATE, IN t TIME, IN issue VARCHAR(100), IN action VARCHAR(100),
    IN stat VARCHAR(20), IN nd DATE, IN rem TEXT
)
BEGIN
    INSERT INTO MaintenanceLogs (TrainID, EngineerID, Date, Time, IssueReported, ActionTaken, Status, NextDue, Remarks)
    VALUES (tid, eid, d, t, issue, action, stat, nd, rem);
END$$
DELIMITER ;

-- 8. Window Function: Row number by TrainID
SELECT LogID, TrainID, ROW_NUMBER() OVER(PARTITION BY TrainID ORDER BY Date) AS RowNum
FROM MaintenanceLogs;

-- 9. Window Function: Count logs per train
SELECT TrainID, COUNT(*) OVER(PARTITION BY TrainID) AS TotalLogs
FROM MaintenanceLogs;

-- 10. Window Function: Latest log date per train
SELECT TrainID, MAX(Date) OVER(PARTITION BY TrainID) AS LatestLog
FROM MaintenanceLogs;

-- 11. DDL: Add new column for Cost
ALTER TABLE MaintenanceLogs ADD COLUMN Cost DECIMAL(10,2);

-- 12. DDL: Drop column Remarks
ALTER TABLE MaintenanceLogs DROP COLUMN Remarks;

-- 13. TCL: Start transaction, update status, rollback
START TRANSACTION;
UPDATE MaintenanceLogs SET Status = 'Pending' WHERE LogID = 1;
ROLLBACK;

-- 14. TCL: Start transaction, update status, commit
START TRANSACTION;
UPDATE MaintenanceLogs SET Status = 'Completed' WHERE LogID = 2;
COMMIT;

-- 15. TCL: Savepoint usage
START TRANSACTION;
UPDATE MaintenanceLogs SET Status = 'Pending' WHERE LogID = 3;
SAVEPOINT sp1;
UPDATE MaintenanceLogs SET Status = 'Completed' WHERE LogID = 4;
ROLLBACK TO sp1;
COMMIT;

-- 16. Trigger: Before insert, set default status to Pending if null
DELIMITER $$
CREATE TRIGGER BeforeInsertLog
BEFORE INSERT ON MaintenanceLogs
FOR EACH ROW
BEGIN
    IF NEW.Status IS NULL THEN
        SET NEW.Status = 'Pending';
    END IF;
END$$
DELIMITER ;

-- 17. Trigger: After insert, log message in separate table
CREATE TABLE IF NOT EXISTS MaintenanceAudit (
    AuditID INT PRIMARY KEY AUTO_INCREMENT,
    LogID INT,
    Action VARCHAR(50),
    ActionDate DATETIME
);

DELIMITER $$
CREATE TRIGGER AfterInsertLog
AFTER INSERT ON MaintenanceLogs
FOR EACH ROW
BEGIN
    INSERT INTO MaintenanceAudit (LogID, Action, ActionDate)
    VALUES (NEW.LogID, 'Inserted', NOW());
END$$
DELIMITER ;

-- 18. Trigger: After delete, log deletion
DELIMITER $$
CREATE TRIGGER AfterDeleteLog
AFTER DELETE ON MaintenanceLogs
FOR EACH ROW
BEGIN
    INSERT INTO MaintenanceAudit (LogID, Action, ActionDate)
    VALUES (OLD.LogID, 'Deleted', NOW());
END$$
DELIMITER ;

-- 19. View: Logs with engineer info (assuming Engineers table exists)
CREATE VIEW LogsWithEngineers AS
SELECT m.LogID, m.TrainID, e.EngineerName, m.IssueReported, m.ActionTaken
FROM MaintenanceLogs m
JOIN Engineers e ON m.EngineerID = e.EngineerID;

-- 20. Stored Procedure: Get logs by status
DELIMITER $$
CREATE PROCEDURE GetLogsByStatus(IN stat VARCHAR(20))
BEGIN
    SELECT * FROM MaintenanceLogs WHERE Status = stat;
END$$
DELIMITER ;


-- Table 15 : Complaints
CREATE TABLE Complaints (
    ComplaintID INT PRIMARY KEY AUTO_INCREMENT,
    PassengerID INT,
    TrainID INT,
    CoachID INT,
    Date DATE,
    Time TIME,
    Type VARCHAR(50),
    Description VARCHAR(255),
    Status VARCHAR(20),
    Remarks TEXT
);

INSERT INTO Complaints (PassengerID, TrainID, CoachID, Date, Time, Type, Description, Status, Remarks) 
VALUES
(1, 1, 1, '2025-07-01', '09:00:00', 'Cleanliness', 'Dirty coach floor', 'Resolved', 'Immediate cleaning done'),
(2, 2, 2, '2025-07-02', '10:00:00', 'Food', 'Stale meal served', 'Resolved', 'Vendor warned'),
(3, 3, 3, '2025-07-03', '11:00:00', 'Security', 'Unattended luggage', 'Resolved', 'RPF informed'),
(4, 4, 4, '2025-07-04', '12:00:00', 'Service', 'Attendant rude', 'Resolved', 'Staff counseled'),
(5, 5, 5, '2025-07-05', '13:00:00', 'Cleanliness', 'Toilet dirty', 'Resolved', 'Cleaner assigned'),
(6, 6, 6, '2025-07-06', '14:00:00', 'Food', 'Cold food', 'Resolved', 'Fresh meal provided'),
(7, 7, 7, '2025-07-07', '15:00:00', 'Security', 'Pickpocket', 'Resolved', 'RPF alerted'),
(8, 8, 8, '2025-07-08', '16:00:00', 'Service', 'Late service', 'Resolved', 'Staff warned'),
(9, 9, 9, '2025-07-09', '17:00:00', 'Cleanliness', 'Seat unclean', 'Resolved', 'Seat cleaned'),
(10, 10, 10, '2025-07-10', '18:00:00', 'Food', 'Wrong order', 'Resolved', 'Corrected'),
(11, 1, 1, '2025-07-11', '09:30:00', 'Security', 'Lost luggage', 'Resolved', 'Located'),
(12, 2, 2, '2025-07-12', '10:30:00', 'Service', 'Delay in bedding', 'Resolved', 'Provided'),
(13, 3, 3, '2025-07-13', '11:30:00', 'Cleanliness', 'Dusty berth', 'Resolved', 'Cleaned'),
(14, 4, 4, '2025-07-14', '12:30:00', 'Food', 'No vegetarian meal', 'Resolved', 'Served'),
(15, 5, 5, '2025-07-15', '13:30:00', 'Security', 'Fighting passengers', 'Resolved', 'RPF intervened'),
(16, 6, 6, '2025-07-16', '14:30:00', 'Service', 'AC not working', 'Resolved', 'Fixed'),
(17, 7, 7, '2025-07-17', '15:30:00', 'Cleanliness', 'Pantry dirty', 'Resolved', 'Cleaned'),
(18, 8, 8, '2025-07-18', '16:30:00', 'Food', 'Food late', 'Resolved', 'Served'),
(19, 9, 9, '2025-07-19', '17:30:00', 'Security', 'Unauthorized person', 'Resolved', 'RPF alerted'),
(20, 10, 10, '2025-07-20', '18:30:00', 'Service', 'Unhelpful staff', 'Resolved', 'Counseled');

-- display table data
Select * from Complaints;

-- to delete values from table 
truncate table Complaints;

-- to delete table
drop table Complaints;

-- 1. View: All resolved complaints
CREATE VIEW ResolvedComplaints AS
SELECT * FROM Complaints WHERE Status = 'Resolved';

-- 2. View: Complaints by type (Cleanliness only)
CREATE VIEW CleanlinessComplaints AS
SELECT * FROM Complaints WHERE Type = 'Cleanliness';

-- 3. View: Complaints with TrainID and CoachID
CREATE VIEW ComplaintsTrainCoach AS
SELECT ComplaintID, TrainID, CoachID, Type, Status FROM Complaints;

-- 4. Constraint: Make Type NOT NULL
ALTER TABLE Complaints MODIFY Type VARCHAR(50) NOT NULL;

-- 5. Constraint: Status should only be Resolved or Pending
ALTER TABLE Complaints ADD CONSTRAINT chk_status CHECK (Status IN ('Resolved','Pending'));

-- 6. Constraint: Add foreign key TrainID (assuming Trains table exists)
ALTER TABLE Complaints ADD CONSTRAINT fk_complaints_train FOREIGN KEY (TrainID) REFERENCES Trains(TrainID);

-- 7. Stored Procedure: Get complaints by TrainID
DELIMITER $$
CREATE PROCEDURE GetComplaintsByTrain(IN tid INT)
BEGIN
    SELECT * FROM Complaints WHERE TrainID = tid;
END$$
DELIMITER ;

-- 8. Stored Procedure: Insert a new complaint
DELIMITER $$
CREATE PROCEDURE InsertComplaint(
    IN pid INT, IN tid INT, IN cid INT, IN d DATE, IN t TIME, IN tp VARCHAR(50), IN descp VARCHAR(255), IN stat VARCHAR(20), IN rem TEXT
)
BEGIN
    INSERT INTO Complaints (PassengerID, TrainID, CoachID, Date, Time, Type, Description, Status, Remarks)
    VALUES (pid, tid, cid, d, t, tp, descp, stat, rem);
END$$
DELIMITER ;

-- 9. Stored Procedure: Get complaints by type
DELIMITER $$
CREATE PROCEDURE GetComplaintsByType(IN tp VARCHAR(50))
BEGIN
    SELECT * FROM Complaints WHERE Type = tp;
END$$
DELIMITER ;

-- 10. Window Function: Row number of complaints per TrainID
SELECT ComplaintID, TrainID, ROW_NUMBER() OVER(PARTITION BY TrainID ORDER BY Date) AS RowNum
FROM Complaints;

-- 11. Window Function: Count complaints per TrainID
SELECT TrainID, COUNT(*) OVER(PARTITION BY TrainID) AS TotalComplaints
FROM Complaints;

-- 12. Window Function: Latest complaint date per TrainID
SELECT TrainID, MAX(Date) OVER(PARTITION BY TrainID) AS LatestComplaint
FROM Complaints;

-- 13. DDL: Add new column Priority
ALTER TABLE Complaints ADD COLUMN Priority VARCHAR(20);

-- 14. DDL: Drop column Remarks
ALTER TABLE Complaints DROP COLUMN Remarks;

-- 15. TCL: Start transaction, update status, rollback
START TRANSACTION;
UPDATE Complaints SET Status = 'Pending' WHERE ComplaintID = 1;
ROLLBACK;

-- 16. TCL: Start transaction, update status, commit
START TRANSACTION;
UPDATE Complaints SET Status = 'Resolved' WHERE ComplaintID = 2;
COMMIT;

-- 17. TCL: Savepoint usage
START TRANSACTION;
UPDATE Complaints SET Status = 'Pending' WHERE ComplaintID = 3;
SAVEPOINT sp1;
UPDATE Complaints SET Status = 'Resolved' WHERE ComplaintID = 4;
ROLLBACK TO sp1;
COMMIT;

-- 18. Trigger: Before insert, default status Pending if NULL
DELIMITER $$
CREATE TRIGGER BeforeInsertComplaint
BEFORE INSERT ON Complaints
FOR EACH ROW
BEGIN
    IF NEW.Status IS NULL THEN
        SET NEW.Status = 'Pending';
    END IF;
END$$
DELIMITER ;

-- 19. Trigger: After insert, log complaint in audit table
CREATE TABLE IF NOT EXISTS ComplaintAudit (
    AuditID INT PRIMARY KEY AUTO_INCREMENT,
    ComplaintID INT,
    Action VARCHAR(50),
    ActionDate DATETIME
);

DELIMITER $$
CREATE TRIGGER AfterInsertComplaint
AFTER INSERT ON Complaints
FOR EACH ROW
BEGIN
    INSERT INTO ComplaintAudit (ComplaintID, Action, ActionDate)
    VALUES (NEW.ComplaintID, 'Inserted', NOW());
END$$
DELIMITER ;

-- 20. Trigger: After delete, log complaint deletion
DELIMITER $$
CREATE TRIGGER AfterDeleteComplaint
AFTER DELETE ON Complaints
FOR EACH ROW
BEGIN
    INSERT INTO ComplaintAudit (ComplaintID, Action, ActionDate)
    VALUES (OLD.ComplaintID, 'Deleted', NOW());
END$$
DELIMITER ;


-- Table 16 : Cargo
CREATE TABLE Cargo (
    CargoID INT PRIMARY KEY AUTO_INCREMENT,
    BookingID INT,
    TrainID INT,
    DepartureStation VARCHAR(50),
    ArrivalStation VARCHAR(50),
    Weight DECIMAL(10,2),
    GoodsType VARCHAR(50),
    DepartureDate DATE,
    ArrivalDate DATE,
    Status VARCHAR(20)
);
INSERT INTO Cargo (BookingID, TrainID, DepartureStation, ArrivalStation, Weight, GoodsType, DepartureDate, ArrivalDate, Status)
 VALUES
(1, 1, 'Delhi', 'Mumbai', 1500.50, 'Electronics', '2025-07-01', '2025-07-02', 'Delivered'),
(2, 2, 'Kolkata', 'Chennai', 2000.00, 'Textiles', '2025-07-02', '2025-07-03', 'Delivered'),
(3, 3, 'Hyderabad', 'Bengaluru', 500.25, 'Medicines', '2025-07-03', '2025-07-04', 'Delivered'),
(4, 4, 'Jaipur', 'Pune', 800.75, 'Machinery', '2025-07-04', '2025-07-05', 'Delivered'),
(5, 5, 'Lucknow', 'Ahmedabad', 1200.00, 'Fruits', '2025-07-05', '2025-07-06', 'Delivered'),
(6, 6, 'Patna', 'Guwahati', 700.60, 'Vegetables', '2025-07-06', '2025-07-07', 'Delivered'),
(7, 7, 'Bhopal', 'Nagpur', 300.80, 'Pharma', '2025-07-07', '2025-07-08', 'Delivered'),
(8, 8, 'Ranchi', 'Vijayawada', 450.90, 'Garments', '2025-07-08', '2025-07-09', 'Delivered'),
(9, 9, 'Indore', 'Coimbatore', 1000.00, 'Books', '2025-07-09', '2025-07-10', 'Delivered'),
(10, 10, 'Surat', 'Kochi', 650.00, 'Furniture', '2025-07-10', '2025-07-11', 'Delivered'),
(11, 11, 'Delhi', 'Mumbai', 1550.00, 'Steel', '2025-07-11', '2025-07-12', 'Delivered'),
(12, 12, 'Kolkata', 'Chennai', 2050.00, 'Cotton', '2025-07-12', '2025-07-13', 'Delivered'),
(13, 13, 'Hyderabad', 'Bengaluru', 550.00, 'Chemicals', '2025-07-13', '2025-07-14', 'Delivered'),
(14, 14, 'Jaipur', 'Pune', 850.00, 'Pesticides', '2025-07-14', '2025-07-15', 'Delivered'),
(15, 15, 'Lucknow', 'Ahmedabad', 1250.00, 'Rice', '2025-07-15', '2025-07-16', 'Delivered'),
(16, 16, 'Patna', 'Guwahati', 750.00, 'Sugar', '2025-07-16', '2025-07-17', 'Delivered'),
(17, 17, 'Bhopal', 'Nagpur', 350.00, 'Grains', '2025-07-17', '2025-07-18', 'Delivered'),
(18, 18, 'Ranchi', 'Vijayawada', 500.00, 'Plastic', '2025-07-18', '2025-07-19', 'Delivered'),
(19, 19, 'Indore', 'Coimbatore', 1050.00, 'Paper', '2025-07-19', '2025-07-20', 'Delivered'),
(20, 20, 'Surat', 'Kochi', 700.00, 'Beverages', '2025-07-20', '2025-07-21', 'Delivered');

-- display table data
Select * from Cargo;

-- to delete values from table 
truncate table Cargo;

-- to delete table
drop table Cargo;

-- 1. View: All delivered cargo
CREATE VIEW DeliveredCargo AS
SELECT * FROM Cargo WHERE Status = 'Delivered';

-- 2. View: Cargo with weight above 1000
CREATE VIEW HeavyCargo AS
SELECT CargoID, BookingID, TrainID, Weight, GoodsType FROM Cargo WHERE Weight > 1000;

-- 3. View: Cargo by route (Departure and Arrival stations)
CREATE VIEW CargoRoutes AS
SELECT CargoID, DepartureStation, ArrivalStation, GoodsType, Status FROM Cargo;

-- 4. Constraint: Weight must be greater than 0
ALTER TABLE Cargo ADD CONSTRAINT chk_weight CHECK (Weight > 0);

-- 5. Constraint: Status should be Delivered or Pending
ALTER TABLE Cargo ADD CONSTRAINT chk_status CHECK (Status IN ('Delivered','Pending'));

-- 6. Constraint: Make GoodsType NOT NULL
ALTER TABLE Cargo MODIFY GoodsType VARCHAR(50) NOT NULL;

-- 7. Stored Procedure: Get cargo by TrainID
DELIMITER $$
CREATE PROCEDURE GetCargoByTrain(IN tid INT)
BEGIN
    SELECT * FROM Cargo WHERE TrainID = tid;
END$$
DELIMITER ;

-- 8. Stored Procedure: Insert new cargo record
DELIMITER $$
CREATE PROCEDURE InsertCargo(
    IN bid INT, IN tid INT, IN ds VARCHAR(50), IN asn VARCHAR(50), IN wt DECIMAL(10,2), IN gt VARCHAR(50), IN dd DATE, IN ad DATE, IN st VARCHAR(20)
)
BEGIN
    INSERT INTO Cargo (BookingID, TrainID, DepartureStation, ArrivalStation, Weight, GoodsType, DepartureDate, ArrivalDate, Status)
    VALUES (bid, tid, ds, asn, wt, gt, dd, ad, st);
END$$
DELIMITER ;

-- 9. Stored Procedure: Get cargo by GoodsType
DELIMITER $$
CREATE PROCEDURE GetCargoByGoods(IN gtype VARCHAR(50))
BEGIN
    SELECT * FROM Cargo WHERE GoodsType = gtype;
END$$
DELIMITER ;

-- 10. Window Function: Row number of cargo per train
SELECT CargoID, TrainID, ROW_NUMBER() OVER(PARTITION BY TrainID ORDER BY DepartureDate) AS RowNum
FROM Cargo;

-- 11. Window Function: Total cargo count per train
SELECT TrainID, COUNT(*) OVER(PARTITION BY TrainID) AS CargoCount
FROM Cargo;

-- 12. Window Function: Max cargo weight per train
SELECT TrainID, MAX(Weight) OVER(PARTITION BY TrainID) AS MaxWeight
FROM Cargo;

-- 13. DDL: Add column Priority
ALTER TABLE Cargo ADD COLUMN Priority VARCHAR(20);

-- 14. DDL: Drop column Status
ALTER TABLE Cargo DROP COLUMN Status;

-- 15. TCL: Start transaction, update cargo weight, rollback
START TRANSACTION;
UPDATE Cargo SET Weight = 2000 WHERE CargoID = 1;
ROLLBACK;

-- 16. TCL: Start transaction, update cargo weight, commit
START TRANSACTION;
UPDATE Cargo SET Weight = 1800 WHERE CargoID = 2;
COMMIT;

-- 17. TCL: Savepoint example
START TRANSACTION;
UPDATE Cargo SET Weight = 1600 WHERE CargoID = 3;
SAVEPOINT sp1;
UPDATE Cargo SET Weight = 1700 WHERE CargoID = 4;
ROLLBACK TO sp1;
COMMIT;

-- 18. Window Function: Max cargo weight per train
SELECT TrainID, MAX(Weight) OVER(PARTITION BY TrainID) AS MaxWeight
FROM Cargo;

-- 19. Trigger: After insert, log cargo entry
CREATE TABLE IF NOT EXISTS CargoLog (
    LogID INT PRIMARY KEY AUTO_INCREMENT,
    CargoID INT,
    Action VARCHAR(50),
    ActionDate DATETIME
);

DELIMITER $$
CREATE TRIGGER AfterInsertCargo
AFTER INSERT ON Cargo
FOR EACH ROW
BEGIN
    INSERT INTO CargoLog (CargoID, Action, ActionDate)
    VALUES (NEW.CargoID, 'Inserted', NOW());
END$$
DELIMITER ;

-- 20. Trigger: After delete, log cargo deletion
DELIMITER $$
CREATE TRIGGER AfterDeleteCargo
AFTER DELETE ON Cargo
FOR EACH ROW
BEGIN
    INSERT INTO CargoLog (CargoID, Action, ActionDate)
    VALUES (OLD.CargoID, 'Deleted', NOW());
END$$
DELIMITER ;


-- Table 17: Parcels
CREATE TABLE Parcels (
    ParcelID INT PRIMARY KEY AUTO_INCREMENT,
    BookingID INT,
    SenderName VARCHAR(100),
    ReceiverName VARCHAR(100),
    SourceStation VARCHAR(50),
    DestinationStation VARCHAR(50),
    Weight DECIMAL(10,2),
    DispatchDate DATE,
    DeliveryDate DATE,
    Status VARCHAR(20)
);

INSERT INTO Parcels (BookingID, SenderName, ReceiverName, SourceStation, DestinationStation, Weight, DispatchDate, DeliveryDate, Status)
 VALUES
(1, 'Amit', 'Rajesh', 'Delhi', 'Mumbai', 15.50, '2025-07-01', '2025-07-02', 'Delivered'),
(2, 'Sunita', 'Pooja', 'Kolkata', 'Chennai', 12.00, '2025-07-02', '2025-07-03', 'Delivered'),
(3, 'Rahul', 'Deepak', 'Hyderabad', 'Bengaluru', 5.75, '2025-07-03', '2025-07-04', 'Delivered'),
(4, 'Kiran', 'Anjali', 'Jaipur', 'Pune', 8.50, '2025-07-04', '2025-07-05', 'Delivered'),
(5, 'Ravi', 'Manoj', 'Lucknow', 'Ahmedabad', 10.00, '2025-07-05', '2025-07-06', 'Delivered'),
(6, 'Priya', 'Sneha', 'Patna', 'Guwahati', 6.80, '2025-07-06', '2025-07-07', 'Delivered'),
(7, 'Ankit', 'Vikas', 'Bhopal', 'Nagpur', 4.50, '2025-07-07', '2025-07-08', 'Delivered'),
(8, 'Suman', 'Rohit', 'Ranchi', 'Vijayawada', 7.00, '2025-07-08', '2025-07-09', 'Delivered'),
(9, 'Vinod', 'Sanjay', 'Indore', 'Coimbatore', 12.25, '2025-07-09', '2025-07-10', 'Delivered'),
(10, 'Nisha', 'Meena', 'Surat', 'Kochi', 9.50, '2025-07-10', '2025-07-11', 'Delivered'),
(11, 'Gaurav', 'Sahil', 'Delhi', 'Mumbai', 16.00, '2025-07-11', '2025-07-12', 'Delivered'),
(12, 'Pinky', 'Asha', 'Kolkata', 'Chennai', 11.00, '2025-07-12', '2025-07-13', 'Delivered'),
(13, 'Kunal', 'Bhavesh', 'Hyderabad', 'Bengaluru', 6.00, '2025-07-13', '2025-07-14', 'Delivered'),
(14, 'Mahesh', 'Aditi', 'Jaipur', 'Pune', 8.00, '2025-07-14', '2025-07-15', 'Delivered'),
(15, 'Snehal', 'Ajay', 'Lucknow', 'Ahmedabad', 10.50, '2025-07-15', '2025-07-16', 'Delivered'),
(16, 'Divya', 'Geeta', 'Patna', 'Guwahati', 7.00, '2025-07-16', '2025-07-17', 'Delivered'),
(17, 'Harsh', 'Deepa', 'Bhopal', 'Nagpur', 4.80, '2025-07-17', '2025-07-18', 'Delivered'),
(18, 'Ramesh', 'Shweta', 'Ranchi', 'Vijayawada', 7.20, '2025-07-18', '2025-07-19', 'Delivered'),
(19, 'Suresh', 'Neha', 'Indore', 'Coimbatore', 13.00, '2025-07-19', '2025-07-20', 'Delivered'),
(20, 'Rekha', 'Nitin', 'Surat', 'Kochi', 9.75, '2025-07-20', '2025-07-21', 'Delivered');

-- display table data
Select * from Parcels;

-- to delete values from table 
truncate table Parcels;

-- to delete table
drop table Parcels;

-- 1. View all parcel records
SELECT * FROM Parcels; -- VC (View Content)

-- 2. View parcels with weight greater than 10 kg
SELECT * FROM Parcels WHERE Weight > 10; -- VC with condition

-- 3. Count total parcels delivered from Delhi
SELECT COUNT(*) AS TotalFromDelhi FROM Parcels WHERE SourceStation = 'Delhi'; -- VC aggregate

-- 4. Change status of a parcel
UPDATE Parcels SET Status = 'In Transit' WHERE ParcelID = 5; -- C (Command - Update)

-- 5. Insert a new parcel
INSERT INTO Parcels (BookingID, SenderName, ReceiverName, SourceStation, DestinationStation, Weight, DispatchDate, DeliveryDate, Status)
VALUES (21, 'Amar', 'Suresh', 'Delhi', 'Hyderabad', 8.40, '2025-07-21', '2025-07-22', 'Pending'); -- C (Command - Insert)

-- 6. Delete a parcel record
DELETE FROM Parcels WHERE ParcelID = 20; -- C (Command - Delete)

-- 7. Stored Procedure to fetch parcels by source station
DELIMITER //
CREATE PROCEDURE GetParcelsBySource(IN src VARCHAR(50))
BEGIN
  SELECT * FROM Parcels WHERE SourceStation = src;
END //
DELIMITER ; -- SP (Stored Procedure)

-- 8. Call stored procedure
CALL GetParcelsBySource('Delhi'); -- SP execution

-- 9. Window function to rank parcels by weight within each source station
SELECT ParcelID, SourceStation, Weight,
RANK() OVER(PARTITION BY SourceStation ORDER BY Weight DESC) AS WeightRank
FROM Parcels; -- WF (Window Function)

-- 10. Window function to calculate running total of weights
SELECT ParcelID, SourceStation, Weight,
SUM(Weight) OVER(ORDER BY DispatchDate) AS RunningTotalWeight
FROM Parcels; -- WF (Window Function)

-- 11. Select parcels dispatched between two dates
SELECT * FROM Parcels WHERE DispatchDate BETWEEN '2025-07-05' AND '2025-07-10'; -- D&TCL (Date & Time Condition)

-- 12. Select parcels delivered late (DeliveryDate > DispatchDate + 1)
SELECT * FROM Parcels WHERE DATEDIFF(DeliveryDate, DispatchDate) > 1; -- D&TCL

-- 13. Create a trigger to update status after insert
DELIMITER //
CREATE TRIGGER AfterParcelInsert
AFTER INSERT ON Parcels
FOR EACH ROW
BEGIN
  UPDATE Parcels SET Status = 'Processing' WHERE ParcelID = NEW.ParcelID;
END //
DELIMITER ; -- Tri (Trigger)

-- 14. Create a view for heavy parcels (weight > 12)
CREATE VIEW HeavyParcels AS
SELECT * FROM Parcels WHERE Weight > 12; -- VC (View creation)

-- 15. Select from HeavyParcels view
SELECT * FROM HeavyParcels; -- VC (View usage)

-- 16. Subquery to find parcels heavier than average weight
SELECT * FROM Parcels WHERE Weight > (SELECT AVG(Weight) FROM Parcels); -- SP (Subquery)

-- 17. Check if any parcels are still pending
SELECT EXISTS(SELECT 1 FROM Parcels WHERE Status = 'Pending') AS PendingExists; -- SP (Subquery)

-- 18. Group parcels by SourceStation and count
SELECT SourceStation, COUNT(*) AS ParcelCount FROM Parcels GROUP BY SourceStation; -- VC aggregate

-- 19. Find the max weight parcel per source station
SELECT SourceStation, MAX(Weight) AS MaxWeight FROM Parcels GROUP BY SourceStation; -- VC aggregate

-- 20. Create a trigger to prevent deleting delivered parcels
DELIMITER //
CREATE TRIGGER PreventDeliveredDelete
BEFORE DELETE ON Parcels
FOR EACH ROW
BEGIN
  IF OLD.Status = 'Delivered' THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete delivered parcels';
  END IF;
END //
DELIMITER ; -- Tri (Trigger)


-- Table 18: FreightBookings
CREATE TABLE FreightBookings (
    FreightID INT PRIMARY KEY AUTO_INCREMENT,
    CustomerName VARCHAR(100),
    GoodsType VARCHAR(50),
    Quantity INT,
    Weight DECIMAL(10,2),
    SourceStation VARCHAR(50),
    DestinationStation VARCHAR(50),
    BookingDate DATE,
    DeliveryDate DATE,
    Status VARCHAR(20)
);

INSERT INTO FreightBookings (CustomerName, GoodsType, Quantity, Weight, SourceStation, DestinationStation, BookingDate, DeliveryDate, Status) 
VALUES
('ABC Ltd', 'Coal', 100, 5000.00, 'Delhi', 'Mumbai', '2025-07-01', '2025-07-02', 'Delivered'),
('XYZ Traders', 'Steel', 80, 4000.00, 'Kolkata', 'Chennai', '2025-07-02', '2025-07-03', 'Delivered'),
('PQR Pvt Ltd', 'Cement', 50, 2500.00, 'Hyderabad', 'Bengaluru', '2025-07-03', '2025-07-04', 'Delivered'),
('LMN Corp', 'Machinery', 30, 1500.00, 'Jaipur', 'Pune', '2025-07-04', '2025-07-05', 'Delivered'),
('RST Group', 'Fertilizers', 70, 3500.00, 'Lucknow', 'Ahmedabad', '2025-07-05', '2025-07-06', 'Delivered'),
('UVW Exports', 'Textiles', 60, 3000.00, 'Patna', 'Guwahati', '2025-07-06', '2025-07-07', 'Delivered'),
('DEF Logistics', 'Food Grains', 90, 4500.00, 'Bhopal', 'Nagpur', '2025-07-07', '2025-07-08', 'Delivered'),
('GHI Supply', 'Furniture', 20, 1000.00, 'Ranchi', 'Vijayawada', '2025-07-08', '2025-07-09', 'Delivered'),
('JKL Cargo', 'Chemicals', 40, 2000.00, 'Indore', 'Coimbatore', '2025-07-09', '2025-07-10', 'Delivered'),
('MNO Movers', 'Beverages', 35, 1750.00, 'Surat', 'Kochi', '2025-07-10', '2025-07-11', 'Delivered'),
('Alpha Ltd', 'Pharma', 25, 1250.00, 'Delhi', 'Mumbai', '2025-07-11', '2025-07-12', 'Delivered'),
('Beta Traders', 'Plastics', 45, 2250.00, 'Kolkata', 'Chennai', '2025-07-12', '2025-07-13', 'Delivered'),
('Gamma Pvt Ltd', 'Electronics', 30, 1500.00, 'Hyderabad', 'Bengaluru', '2025-07-13', '2025-07-14', 'Delivered'),
('Delta Corp', 'Toys', 50, 2500.00, 'Jaipur', 'Pune', '2025-07-14', '2025-07-15', 'Delivered'),
('Epsilon Group', 'Paper', 55, 2750.00, 'Lucknow', 'Ahmedabad', '2025-07-15', '2025-07-16', 'Delivered'),
('Zeta Exports', 'Rubber', 65, 3250.00, 'Patna', 'Guwahati', '2025-07-16', '2025-07-17', 'Delivered'),
('Eta Logistics', 'Books', 70, 3500.00, 'Bhopal', 'Nagpur', '2025-07-17', '2025-07-18', 'Delivered'),
('Theta Supply', 'Leather', 60, 3000.00, 'Ranchi', 'Vijayawada', '2025-07-18', '2025-07-19', 'Delivered'),
('Iota Cargo', 'Glass', 40, 2000.00, 'Indore', 'Coimbatore', '2025-07-19', '2025-07-20', 'Delivered'),
('Kappa Movers', 'Metals', 55, 2750.00, 'Surat', 'Kochi', '2025-07-20', '2025-07-21', 'Delivered');

-- display table data
Select * from FreightBookings;

-- to delete values from table 
truncate table FreightBookings;

-- to delete table
drop table FreightBookings;

-- 1. View all freight bookings
SELECT * FROM FreightBookings; -- VC (View Content)

-- 2. View freight bookings with weight greater than 3000
SELECT * FROM FreightBookings WHERE Weight > 3000; -- VC with condition

-- 3. Count total bookings from Delhi
SELECT COUNT(*) AS TotalFromDelhi FROM FreightBookings WHERE SourceStation = 'Delhi'; -- VC aggregate

-- 4. Update status of a freight booking
UPDATE FreightBookings SET Status = 'In Transit' WHERE FreightID = 5; -- C (Command - Update)

-- 5. Insert a new freight booking
INSERT INTO FreightBookings (CustomerName, GoodsType, Quantity, Weight, SourceStation, DestinationStation, BookingDate, DeliveryDate, Status)
VALUES ('Omega Ltd', 'Cement', 40, 2000.00, 'Delhi', 'Bengaluru', '2025-07-21', '2025-07-22', 'Pending'); -- C (Command - Insert)

-- 6. Delete a freight booking record
DELETE FROM FreightBookings WHERE FreightID = 20; -- C (Command - Delete)

-- 7. Stored Procedure to fetch freight by source station
DELIMITER //
CREATE PROCEDURE GetFreightBySource(IN src VARCHAR(50))
BEGIN
  SELECT * FROM FreightBookings WHERE SourceStation = src;
END //
DELIMITER ; -- SP (Stored Procedure)

-- 8. Call stored procedure
CALL GetFreightBySource('Delhi'); -- SP execution

-- 9. Window function to rank bookings by weight within each source station
SELECT FreightID, SourceStation, Weight,
RANK() OVER(PARTITION BY SourceStation ORDER BY Weight DESC) AS WeightRank
FROM FreightBookings; -- WF (Window Function)

-- 10. Window function to calculate running total of booked weight
SELECT FreightID, SourceStation, Weight,
SUM(Weight) OVER(ORDER BY BookingDate) AS RunningTotalWeight
FROM FreightBookings; -- WF (Window Function)

-- 11. Select bookings between two dates
SELECT * FROM FreightBookings WHERE BookingDate BETWEEN '2025-07-05' AND '2025-07-10'; -- D&TCL (Date & Time Condition)

-- 12. Select bookings delivered late (DeliveryDate > BookingDate + 1)
SELECT * FROM FreightBookings WHERE DATEDIFF(DeliveryDate, BookingDate) > 1; -- D&TCL

-- 13. Create trigger to update status after insert
DELIMITER //
CREATE TRIGGER AfterFreightInsert
AFTER INSERT ON FreightBookings
FOR EACH ROW
BEGIN
  UPDATE FreightBookings SET Status = 'Processing' WHERE FreightID = NEW.FreightID;
END //
DELIMITER ; -- Tri (Trigger)

-- 14. Create view for heavy freight (Weight > 3000)
CREATE VIEW HeavyFreight AS
SELECT * FROM FreightBookings WHERE Weight > 3000; -- VC (View creation)

-- 15. Select from HeavyFreight view
SELECT * FROM HeavyFreight; -- VC (View usage)

-- 16. Subquery to find bookings heavier than average weight
SELECT * FROM FreightBookings WHERE Weight > (SELECT AVG(Weight) FROM FreightBookings); -- SP (Subquery)

-- 17. Check if any bookings are still pending
SELECT EXISTS(SELECT 1 FROM FreightBookings WHERE Status = 'Pending') AS PendingExists; -- SP (Subquery)

-- 18. Group bookings by SourceStation and count
SELECT SourceStation, COUNT(*) AS BookingCount FROM FreightBookings GROUP BY SourceStation; -- VC aggregate

-- 19. Find max weight booking per source station
SELECT SourceStation, MAX(Weight) AS MaxWeight FROM FreightBookings GROUP BY SourceStation; -- VC aggregate

-- 20. Create trigger to prevent deleting delivered bookings
DELIMITER //
CREATE TRIGGER PreventDeliveredDelete
BEFORE DELETE ON FreightBookings
FOR EACH ROW
BEGIN
  IF OLD.Status = 'Delivered' THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete delivered bookings';
  END IF;
END //
DELIMITER ; -- Tri (Trigger)


-- Table 19: Signals
CREATE TABLE Signals (
    SignalID INT PRIMARY KEY AUTO_INCREMENT,
    RouteID INT,
    SignalType VARCHAR(50),
    Location VARCHAR(100),
    Status VARCHAR(20),
    LastCheckDate DATE,
    NextCheckDate DATE,
    MaintenanceStatus VARCHAR(20),
    MaintainedBy VARCHAR(50),
    Remarks TEXT
);

INSERT INTO Signals (RouteID, SignalType, Location, Status, LastCheckDate, NextCheckDate, MaintenanceStatus, MaintainedBy, Remarks) 
VALUES
(1, 'Semaphore', 'Delhi Yard', 'Operational', '2025-06-30', '2025-07-30', 'Good', 'Engg Team A', 'OK'),
(2, 'LED', 'Howrah Station', 'Operational', '2025-06-29', '2025-07-29', 'Good', 'Engg Team B', 'OK'),
(3, 'Color Light', 'Secunderabad', 'Operational', '2025-06-28', '2025-07-28', 'Good', 'Engg Team C', 'OK'),
(4, 'Semaphore', 'Pune Yard', 'Operational', '2025-06-27', '2025-07-27', 'Good', 'Engg Team A', 'OK'),
(5, 'LED', 'Ahmedabad', 'Operational', '2025-06-26', '2025-07-26', 'Good', 'Engg Team B', 'OK'),
(6, 'Color Light', 'Guwahati', 'Operational', '2025-06-25', '2025-07-25', 'Good', 'Engg Team C', 'OK'),
(7, 'Semaphore', 'Nagpur', 'Operational', '2025-06-24', '2025-07-24', 'Good', 'Engg Team A', 'OK'),
(8, 'LED', 'Vijayawada', 'Operational', '2025-06-23', '2025-07-23', 'Good', 'Engg Team B', 'OK'),
(9, 'Color Light', 'Coimbatore', 'Operational', '2025-06-22', '2025-07-22', 'Good', 'Engg Team C', 'OK'),
(10, 'Semaphore', 'Kochi Yard', 'Operational', '2025-06-21', '2025-07-21', 'Good', 'Engg Team A', 'OK'),
(11, 'LED', 'Delhi Yard', 'Operational', '2025-06-20', '2025-07-20', 'Good', 'Engg Team B', 'OK'),
(12, 'Color Light', 'Howrah', 'Operational', '2025-06-19', '2025-07-19', 'Good', 'Engg Team C', 'OK'),
(13, 'Semaphore', 'Secunderabad', 'Operational', '2025-06-18', '2025-07-18', 'Good', 'Engg Team A', 'OK'),
(14, 'LED', 'Pune Yard', 'Operational', '2025-06-17', '2025-07-17', 'Good', 'Engg Team B', 'OK'),
(15, 'Color Light', 'Ahmedabad', 'Operational', '2025-06-16', '2025-07-16', 'Good', 'Engg Team C', 'OK'),
(16, 'Semaphore', 'Guwahati', 'Operational', '2025-06-15', '2025-07-15', 'Good', 'Engg Team A', 'OK'),
(17, 'LED', 'Nagpur', 'Operational', '2025-06-14', '2025-07-14', 'Good', 'Engg Team B', 'OK'),
(18, 'Color Light', 'Vijayawada', 'Operational', '2025-06-13', '2025-07-13', 'Good', 'Engg Team C', 'OK'),
(19, 'Semaphore', 'Coimbatore', 'Operational', '2025-06-12', '2025-07-12', 'Good', 'Engg Team A', 'OK'),
(20, 'LED', 'Kochi Yard', 'Operational', '2025-06-11', '2025-07-11', 'Good', 'Engg Team B', 'OK');

-- display table data
Select * from Signals;

-- to delete values from table 
truncate table Signals;

-- to delete table
drop table Signals;

-- 1. View all signals
SELECT * FROM Signals; -- VC (View Content)

-- 2. View signals by type 'LED'
SELECT * FROM Signals WHERE SignalType = 'LED'; -- VC with condition

-- 3. Count signals per location
SELECT Location, COUNT(*) AS SignalCount FROM Signals GROUP BY Location; -- VC aggregate

-- 4. Update status of a signal
UPDATE Signals SET Status = 'Under Maintenance' WHERE SignalID = 5; -- C (Command - Update)

-- 5. Insert a new signal
INSERT INTO Signals (RouteID, SignalType, Location, Status, LastCheckDate, NextCheckDate, MaintenanceStatus, MaintainedBy, Remarks)
VALUES (21, 'Semaphore', 'Patna Yard', 'Operational', '2025-07-01', '2025-08-01', 'Good', 'Engg Team D', 'New'); -- C (Command - Insert)

-- 6. Delete a signal record
DELETE FROM Signals WHERE SignalID = 20; -- C (Command - Delete)

-- 7. Stored Procedure to fetch signals by maintenance status
DELIMITER //
CREATE PROCEDURE GetSignalsByStatus(IN mstatus VARCHAR(20))
BEGIN
  SELECT * FROM Signals WHERE MaintenanceStatus = mstatus;
END //
DELIMITER ; -- SP (Stored Procedure)

-- 8. Call stored procedure
CALL GetSignalsByStatus('Good'); -- SP execution

-- 9. Window function to rank signals by last check date
SELECT SignalID, Location, LastCheckDate,
RANK() OVER(PARTITION BY Location ORDER BY LastCheckDate DESC) AS LastCheckRank
FROM Signals; -- WF (Window Function)

-- 10. Window function to count signals per type
SELECT SignalID, SignalType,
COUNT(*) OVER(PARTITION BY SignalType) AS TypeCount
FROM Signals; -- WF (Window Function)

-- 11. Select signals checked between two dates
SELECT * FROM Signals WHERE LastCheckDate BETWEEN '2025-06-15' AND '2025-06-20'; -- D&TCL (Date & Time Condition)

-- 12. Select signals due for check in next 7 days
SELECT * FROM Signals WHERE NextCheckDate <= DATE_ADD(CURDATE(), INTERVAL 7 DAY); -- D&TCL

-- 13. Create trigger to update MaintenanceStatus after insert
DELIMITER //
CREATE TRIGGER AfterSignalInsert
AFTER INSERT ON Signals
FOR EACH ROW
BEGIN
  UPDATE Signals SET MaintenanceStatus = 'Pending' WHERE SignalID = NEW.SignalID;
END //
DELIMITER ; -- Tri (Trigger)

-- 14. Create view for signals under maintenance
CREATE VIEW SignalsUnderMaintenance AS
SELECT * FROM Signals WHERE Status = 'Under Maintenance'; -- VC (View creation)

-- 15. Select from SignalsUnderMaintenance view
SELECT * FROM SignalsUnderMaintenance; -- VC (View usage)

-- 16. Subquery to find signals maintained by 'Engg Team A'
SELECT * FROM Signals WHERE MaintainedBy IN (SELECT DISTINCT MaintainedBy FROM Signals WHERE MaintainedBy = 'Engg Team A'); -- SP (Subquery)

-- 17. Check if any signals are non-operational
SELECT EXISTS(SELECT 1 FROM Signals WHERE Status != 'Operational') AS NonOperationalExists; -- SP (Subquery)

-- 18. Group signals by type and count
SELECT SignalType, COUNT(*) AS SignalCount FROM Signals GROUP BY SignalType; -- VC aggregate

-- 19. Find most recent LastCheckDate per signal type
SELECT SignalType, MAX(LastCheckDate) AS MostRecentCheck FROM Signals GROUP BY SignalType; -- VC aggregate

-- 20. Create trigger to prevent deletion of operational signals
DELIMITER //
CREATE TRIGGER PreventOperationalDelete
BEFORE DELETE ON Signals
FOR EACH ROW
BEGIN
  IF OLD.Status = 'Operational' THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete operational signals';
  END IF;
END //
DELIMITER ; -- Tri (Trigger)

-- Table 20: Tracks
CREATE TABLE Tracks (
    TrackID INT PRIMARY KEY AUTO_INCREMENT,
    RouteID INT,
    SectionName VARCHAR(100),
    Length_KM DECIMAL(5,2),
    GaugeType VARCHAR(20),
    ConditionStatus VARCHAR(20),
    LastInspection DATE,
    NextInspection DATE,
    MaintainedBy VARCHAR(50),
    Remarks TEXT
);

INSERT INTO Tracks (RouteID, SectionName, Length_KM, GaugeType, ConditionStatus, LastInspection, NextInspection, MaintainedBy, Remarks) 
VALUES
(1, 'Delhi - Agra', 200.50, 'Broad', 'Good', '2025-06-01', '2025-07-01', 'Track Team A', 'No issues'),
(2, 'Kolkata - Durgapur', 170.75, 'Broad', 'Good', '2025-06-02', '2025-07-02', 'Track Team B', 'Ok'),
(3, 'Hyderabad - Warangal', 140.30, 'Broad', 'Good', '2025-06-03', '2025-07-03', 'Track Team C', 'Ok'),
(4, 'Jaipur - Ajmer', 130.00, 'Broad', 'Good', '2025-06-04', '2025-07-04', 'Track Team A', 'Ok'),
(5, 'Lucknow - Kanpur', 80.60, 'Broad', 'Good', '2025-06-05', '2025-07-05', 'Track Team B', 'Ok'),
(6, 'Patna - Gaya', 90.40, 'Broad', 'Good', '2025-06-06', '2025-07-06', 'Track Team C', 'Ok'),
(7, 'Bhopal - Itarsi', 110.00, 'Broad', 'Good', '2025-06-07', '2025-07-07', 'Track Team A', 'Ok'),
(8, 'Ranchi - Bokaro', 95.50, 'Broad', 'Good', '2025-06-08', '2025-07-08', 'Track Team B', 'Ok'),
(9, 'Indore - Ratlam', 120.75, 'Broad', 'Good', '2025-06-09', '2025-07-09', 'Track Team C', 'Ok'),
(10, 'Surat - Vadodara', 140.90, 'Broad', 'Good', '2025-06-10', '2025-07-10', 'Track Team A', 'Ok'),
(11, 'Delhi - Ambala', 200.00, 'Broad', 'Good', '2025-06-11', '2025-07-11', 'Track Team B', 'Ok'),
(12, 'Kolkata - Asansol', 150.00, 'Broad', 'Good', '2025-06-12', '2025-07-12', 'Track Team C', 'Ok'),
(13, 'Hyderabad - Nanded', 180.00, 'Broad', 'Good', '2025-06-13', '2025-07-13', 'Track Team A', 'Ok'),
(14, 'Jaipur - Kota', 200.00, 'Broad', 'Good', '2025-06-14', '2025-07-14', 'Track Team B', 'Ok'),
(15, 'Lucknow - Varanasi', 120.00, 'Broad', 'Good', '2025-06-15', '2025-07-15', 'Track Team C', 'Ok'),
(16, 'Patna - Muzaffarpur', 80.00, 'Broad', 'Good', '2025-06-16', '2025-07-16', 'Track Team A', 'Ok'),
(17, 'Bhopal - Jabalpur', 150.00, 'Broad', 'Good', '2025-06-17', '2025-07-17', 'Track Team B', 'Ok'),
(18, 'Ranchi - Dhanbad', 85.00, 'Broad', 'Good', '2025-06-18', '2025-07-18', 'Track Team C', 'Ok'),
(19, 'Indore - Bhopal', 180.00, 'Broad', 'Good', '2025-06-19', '2025-07-19', 'Track Team A', 'Ok'),
(20, 'Surat - Mumbai', 250.00, 'Broad', 'Good', '2025-06-20', '2025-07-20', 'Track Team B', 'Ok');

-- display table data
Select * from Tracks;

-- to delete values from table 
truncate table Tracks;

-- to delete table
drop table Tracks;


-- 1. View all tracks
SELECT * FROM Tracks; -- VC (View Content)

-- 2. View tracks with length greater than 150 KM
SELECT * FROM Tracks WHERE Length_KM > 150; -- VC with condition

-- 3. Count of tracks per MaintainedBy team
SELECT MaintainedBy, COUNT(*) AS TrackCount FROM Tracks GROUP BY MaintainedBy; -- VC aggregate

-- 4. Update condition status of a track
UPDATE Tracks SET ConditionStatus = 'Needs Repair' WHERE TrackID = 5; -- C (Command - Update)

-- 5. Insert a new track record
INSERT INTO Tracks (RouteID, SectionName, Length_KM, GaugeType, ConditionStatus, LastInspection, NextInspection, MaintainedBy, Remarks)
VALUES (21, 'Ahmedabad - Rajkot', 180.50, 'Broad', 'Good', '2025-07-01', '2025-08-01', 'Track Team D', 'New Section'); -- C (Command - Insert)

-- 6. Delete a track record
DELETE FROM Tracks WHERE TrackID = 20; -- C (Command - Delete)

-- 7. Stored Procedure to get tracks by condition status
DELIMITER //
CREATE PROCEDURE GetTracksByCondition(IN cstatus VARCHAR(20))
BEGIN
  SELECT * FROM Tracks WHERE ConditionStatus = cstatus;
END //
DELIMITER ; -- SP (Stored Procedure)

-- 8. Call stored procedure for 'Good' tracks
CALL GetTracksByCondition('Good'); -- SP execution

-- 9. Window function to rank tracks by Length_KM per MaintainedBy team
SELECT TrackID, SectionName, MaintainedBy, Length_KM,
RANK() OVER(PARTITION BY MaintainedBy ORDER BY Length_KM DESC) AS LengthRank
FROM Tracks; -- WF (Window Function)

-- 10. Window function to get running total of track lengths per MaintainedBy
SELECT TrackID, SectionName, MaintainedBy, Length_KM,
SUM(Length_KM) OVER(PARTITION BY MaintainedBy ORDER BY TrackID) AS RunningLength
FROM Tracks; -- WF (Window Function)

-- 11. Select tracks inspected between two dates
SELECT * FROM Tracks WHERE LastInspection BETWEEN '2025-06-10' AND '2025-06-15'; -- D&TCL (Date & Time Condition)

-- 12. Select tracks due for next inspection in next 10 days
SELECT * FROM Tracks WHERE NextInspection <= DATE_ADD(CURDATE(), INTERVAL 10 DAY); -- D&TCL

-- 13. Create trigger to update ConditionStatus after insert
DELIMITER //
CREATE TRIGGER AfterTrackInsert
AFTER INSERT ON Tracks
FOR EACH ROW
BEGIN
  UPDATE Tracks SET ConditionStatus = 'Pending Inspection' WHERE TrackID = NEW.TrackID;
END //
DELIMITER ; -- Tri (Trigger)

-- 14. Create view for tracks needing repair
CREATE VIEW TracksNeedingRepair AS
SELECT * FROM Tracks WHERE ConditionStatus = 'Needs Repair'; -- VC (View creation)

-- 15. Select from TracksNeedingRepair view
SELECT * FROM TracksNeedingRepair; -- VC (View usage)

-- 16. Subquery to find tracks maintained by 'Track Team A'
SELECT * FROM Tracks WHERE MaintainedBy IN (SELECT DISTINCT MaintainedBy FROM Tracks WHERE MaintainedBy = 'Track Team A'); -- SP (Subquery)

-- 17. Check if any tracks are 'Needs Repair'
SELECT EXISTS(SELECT 1 FROM Tracks WHERE ConditionStatus = 'Needs Repair') AS TracksNeedingRepairExists; -- SP (Subquery)

-- 18. Group tracks by GaugeType and count
SELECT GaugeType, COUNT(*) AS GaugeCount FROM Tracks GROUP BY GaugeType; -- VC aggregate

-- 19. Find longest track per MaintainedBy team
SELECT MaintainedBy, MAX(Length_KM) AS LongestTrack FROM Tracks GROUP BY MaintainedBy; -- VC aggregate

-- 20. Trigger to prevent deletion of tracks with 'Good' condition
DELIMITER //
CREATE TRIGGER PreventGoodTrackDelete
BEFORE DELETE ON Tracks
FOR EACH ROW
BEGIN
  IF OLD.ConditionStatus = 'Good' THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete tracks in Good condition';
  END IF;
END //
DELIMITER ; -- Tri (Trigger)


-- Table 21: Bridges
CREATE TABLE Bridges (
    BridgeID INT PRIMARY KEY AUTO_INCREMENT,
    TrackID INT,
    BridgeName VARCHAR(100),
    Location VARCHAR(100),
    Length_M DECIMAL(6,2),
    Type VARCHAR(50),
    ConditionStatus VARCHAR(20),
    LastInspection DATE,
    NextInspection DATE,
    Remarks TEXT
);

INSERT INTO Bridges (TrackID, BridgeName, Location, Length_M, Type, ConditionStatus, LastInspection, NextInspection, Remarks) 
VALUES
(1, 'Yamuna Bridge', 'Delhi', 1200.50, 'Steel', 'Good', '2025-06-01', '2025-07-01', 'No cracks'),
(2, 'Hooghly Bridge', 'Kolkata', 950.75, 'Suspension', 'Good', '2025-06-02', '2025-07-02', 'Ok'),
(3, 'Musheerabad Bridge', 'Hyderabad', 500.30, 'Concrete', 'Good', '2025-06-03', '2025-07-03', 'Ok'),
(4, 'Ajmer Bridge', 'Ajmer', 400.00, 'Steel', 'Good', '2025-06-04', '2025-07-04', 'Ok'),
(5, 'Kanpur Flyover', 'Kanpur', 350.60, 'Concrete', 'Good', '2025-06-05', '2025-07-05', 'Ok'),
(6, 'Gaya Bridge', 'Gaya', 300.40, 'Steel', 'Good', '2025-06-06', '2025-07-06', 'Ok'),
(7, 'Itarsi Bridge', 'Itarsi', 280.00, 'Concrete', 'Good', '2025-06-07', '2025-07-07', 'Ok'),
(8, 'Bokaro Bridge', 'Bokaro', 320.50, 'Steel', 'Good', '2025-06-08', '2025-07-08', 'Ok'),
(9, 'Ratlam Bridge', 'Ratlam', 400.75, 'Concrete', 'Good', '2025-06-09', '2025-07-09', 'Ok'),
(10, 'Vadodara Flyover', 'Vadodara', 500.90, 'Steel', 'Good', '2025-06-10', '2025-07-10', 'Ok'),
(11, 'Ambala Bridge', 'Ambala', 600.00, 'Concrete', 'Good', '2025-06-11', '2025-07-11', 'Ok'),
(12, 'Asansol Bridge', 'Asansol', 700.00, 'Steel', 'Good', '2025-06-12', '2025-07-12', 'Ok'),
(13, 'Nanded Bridge', 'Nanded', 800.00, 'Concrete', 'Good', '2025-06-13', '2025-07-13', 'Ok'),
(14, 'Kota Bridge', 'Kota', 850.00, 'Steel', 'Good', '2025-06-14', '2025-07-14', 'Ok'),
(15, 'Varanasi Bridge', 'Varanasi', 750.00, 'Concrete', 'Good', '2025-06-15', '2025-07-15', 'Ok'),
(16, 'Muzaffarpur Bridge', 'Muzaffarpur', 650.00, 'Steel', 'Good', '2025-06-16', '2025-07-16', 'Ok'),
(17, 'Jabalpur Bridge', 'Jabalpur', 550.00, 'Concrete', 'Good', '2025-06-17', '2025-07-17', 'Ok'),
(18, 'Dhanbad Bridge', 'Dhanbad', 500.00, 'Steel', 'Good', '2025-06-18', '2025-07-18', 'Ok'),
(19, 'Bhopal Bridge', 'Bhopal', 450.00, 'Concrete', 'Good', '2025-06-19', '2025-07-19', 'Ok'),
(20, 'Mumbai Bridge', 'Mumbai', 1000.00, 'Steel', 'Good', '2025-06-20', '2025-07-20', 'Ok');

-- display table data
Select * from Bridges;

-- to delete values from table 
truncate table Bridges;

-- to delete table
drop table Bridges;

-- 1. View all bridges
SELECT * FROM Bridges; -- VC (View Content)

-- 2. View bridges longer than 500 meters
SELECT * FROM Bridges WHERE Length_M > 500; -- VC with condition

-- 3. Count of bridges per Type
SELECT Type, COUNT(*) AS BridgeCount FROM Bridges GROUP BY Type; -- VC aggregate

-- 4. Update condition status of a bridge
UPDATE Bridges SET ConditionStatus = 'Needs Repair' WHERE BridgeID = 5; -- C (Command - Update)

-- 5. Insert a new bridge record
INSERT INTO Bridges (TrackID, BridgeName, Location, Length_M, Type, ConditionStatus, LastInspection, NextInspection, Remarks)
VALUES (21, 'Nagpur Flyover', 'Nagpur', 600.00, 'Steel', 'Good', '2025-07-01', '2025-08-01', 'New Bridge'); -- C (Command - Insert)

-- 6. Delete a bridge record
DELETE FROM Bridges WHERE BridgeID = 20; -- C (Command - Delete)

-- 7. Stored Procedure to get bridges by condition status
DELIMITER //
CREATE PROCEDURE GetBridgesByCondition(IN cstatus VARCHAR(20))
BEGIN
  SELECT * FROM Bridges WHERE ConditionStatus = cstatus;
END //
DELIMITER ; -- SP (Stored Procedure)

-- 8. Call stored procedure for 'Good' bridges
CALL GetBridgesByCondition('Good'); -- SP execution

-- 9. Window function to rank bridges by length per Type
SELECT BridgeID, BridgeName, Type, Length_M,
RANK() OVER(PARTITION BY Type ORDER BY Length_M DESC) AS LengthRank
FROM Bridges; -- WF (Window Function)

-- 10. Window function to get running total of bridge lengths per Type
SELECT BridgeID, BridgeName, Type, Length_M,
SUM(Length_M) OVER(PARTITION BY Type ORDER BY BridgeID) AS RunningLength
FROM Bridges; -- WF (Window Function)

-- 11. Select bridges inspected between two dates
SELECT * FROM Bridges WHERE LastInspection BETWEEN '2025-06-10' AND '2025-06-15'; -- D&TCL (Date & Time Condition)

-- 12. Select bridges due for next inspection in next 10 days
SELECT * FROM Bridges WHERE NextInspection <= DATE_ADD(CURDATE(), INTERVAL 10 DAY); -- D&TCL

-- 13. Create trigger to update ConditionStatus after insert
DELIMITER //
CREATE TRIGGER AfterBridgeInsert
AFTER INSERT ON Bridges
FOR EACH ROW
BEGIN
  UPDATE Bridges SET ConditionStatus = 'Pending Inspection' WHERE BridgeID = NEW.BridgeID;
END //
DELIMITER ; -- Tri (Trigger)

-- 14. Create view for bridges needing repair
CREATE VIEW BridgesNeedingRepair AS
SELECT * FROM Bridges WHERE ConditionStatus = 'Needs Repair'; -- VC (View creation)

-- 15. Select from BridgesNeedingRepair view
SELECT * FROM BridgesNeedingRepair; -- VC (View usage)

-- 16. Subquery to find bridges maintained on TrackID 1
SELECT * FROM Bridges WHERE TrackID IN (SELECT DISTINCT TrackID FROM Bridges WHERE TrackID = 1); -- SP (Subquery)

-- 17. Check if any bridges are 'Needs Repair'
SELECT EXISTS(SELECT 1 FROM Bridges WHERE ConditionStatus = 'Needs Repair') AS BridgesNeedingRepairExists; -- SP (Subquery)

-- 18. Group bridges by ConditionStatus and count
SELECT ConditionStatus, COUNT(*) AS StatusCount FROM Bridges GROUP BY ConditionStatus; -- VC aggregate

-- 19. Find longest bridge per Type
SELECT Type, MAX(Length_M) AS LongestBridge FROM Bridges GROUP BY Type; -- VC aggregate

-- 20. Trigger to prevent deletion of bridges in 'Good' condition
DELIMITER //
CREATE TRIGGER PreventGoodBridgeDelete
BEFORE DELETE ON Bridges
FOR EACH ROW
BEGIN
  IF OLD.ConditionStatus = 'Good' THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete bridges in Good condition';
  END IF;
END //
DELIMITER ; -- Tri (Trigger)


-- Table 22: LevelCrossings
CREATE TABLE LevelCrossings (
    CrossingID INT PRIMARY KEY AUTO_INCREMENT,
    TrackID INT,
    Location VARCHAR(100),
    CrossingType VARCHAR(50),
    GateStatus VARCHAR(20),
    AttendantName VARCHAR(100),
    ContactNumber VARCHAR(15),
    LastInspection DATE,
    NextInspection DATE,
    Remarks TEXT
);

INSERT INTO LevelCrossings (TrackID, Location, CrossingType, GateStatus, AttendantName, ContactNumber, LastInspection, NextInspection, Remarks) 
VALUES
(1, 'NH-2 Delhi', 'Manned', 'Operational', 'Rakesh Kumar', '9876543210', '2025-06-01', '2025-07-01', 'Working fine'),
(2, 'GT Road Kolkata', 'Manned', 'Operational', 'Sunil Das', '9876543211', '2025-06-02', '2025-07-02', 'Working fine'),
(3, 'Warangal Bypass', 'Unmanned', 'Operational', 'Raju Yadav', '9876543212', '2025-06-03', '2025-07-03', 'Signage good'),
(4, 'Ajmer Link Road', 'Manned', 'Operational', 'Prakash Singh', '9876543213', '2025-06-04', '2025-07-04', 'Ok'),
(5, 'Kanpur Outer', 'Unmanned', 'Operational', 'Deepak Sahu', '9876543214', '2025-06-05', '2025-07-05', 'Ok'),
(6, 'Gaya Ring Road', 'Manned', 'Operational', 'Santosh Kumar', '9876543215', '2025-06-06', '2025-07-06', 'Ok'),
(7, 'Itarsi Highway', 'Manned', 'Operational', 'Mukesh Patel', '9876543216', '2025-06-07', '2025-07-07', 'Ok'),
(8, 'Bokaro Main Road', 'Manned', 'Operational', 'Anil Kumar', '9876543217', '2025-06-08', '2025-07-08', 'Ok'),
(9, 'Ratlam Road', 'Unmanned', 'Operational', 'Amit Sharma', '9876543218', '2025-06-09', '2025-07-09', 'Ok'),
(10, 'Vadodara Bypass', 'Manned', 'Operational', 'Suresh Bhai', '9876543219', '2025-06-10', '2025-07-10', 'Ok'),
(11, 'Ambala Crossing', 'Manned', 'Operational', 'Harpreet Singh', '9876543220', '2025-06-11', '2025-07-11', 'Ok'),
(12, 'Asansol Road', 'Unmanned', 'Operational', 'Manish Das', '9876543221', '2025-06-12', '2025-07-12', 'Ok'),
(13, 'Nanded Gate', 'Manned', 'Operational', 'Pradeep Rao', '9876543222', '2025-06-13', '2025-07-13', 'Ok'),
(14, 'Kota Bypass', 'Unmanned', 'Operational', 'Rajeev Jain', '9876543223', '2025-06-14', '2025-07-14', 'Ok'),
(15, 'Varanasi Road', 'Manned', 'Operational', 'Shyam Yadav', '9876543224', '2025-06-15', '2025-07-15', 'Ok'),
(16, 'Muzaffarpur Outer', 'Manned', 'Operational', 'Ravi Kishan', '9876543225', '2025-06-16', '2025-07-16', 'Ok'),
(17, 'Jabalpur Crossing', 'Unmanned', 'Operational', 'Mahesh Gupta', '9876543226', '2025-06-17', '2025-07-17', 'Ok'),
(18, 'Dhanbad Road', 'Manned', 'Operational', 'Sanjay Kumar', '9876543227', '2025-06-18', '2025-07-18', 'Ok'),
(19, 'Bhopal Bypass', 'Manned', 'Operational', 'Gopal Mishra', '9876543228', '2025-06-19', '2025-07-19', 'Ok'),
(20, 'Mumbai Suburb', 'Manned', 'Operational', 'Raj Malhotra', '9876543229', '2025-06-20', '2025-07-20', 'Ok');

-- display table data
Select * from LevelCrossings;

-- to delete values from table 
truncate table LevelCrossings;

-- to delete table
drop table LevelCrossings;


-- 1. View all level crossings
SELECT * FROM LevelCrossings; -- VC (View Content)

-- 2. View level crossings that are unmanned
SELECT * FROM LevelCrossings WHERE CrossingType = 'Unmanned'; -- VC with Condition

-- 3. Count of level crossings per type
SELECT CrossingType, COUNT(*) AS CountPerType FROM LevelCrossings GROUP BY CrossingType; -- VC aggregate

-- 4. Update gate status for a specific crossing
UPDATE LevelCrossings SET GateStatus = 'Under Maintenance' WHERE CrossingID = 5; -- C (Command Update)

-- 5. Insert a new level crossing record
INSERT INTO LevelCrossings (TrackID, Location, CrossingType, GateStatus, AttendantName, ContactNumber, LastInspection, NextInspection, Remarks)
VALUES (21, 'Patna Ring Road', 'Manned', 'Operational', 'Ajay Kumar', '9876543230', '2025-07-01', '2025-08-01', 'New Crossing'); -- C (Command Insert)

-- 6. Delete a level crossing record
DELETE FROM LevelCrossings WHERE CrossingID = 20; -- C (Command Delete)

-- 7. Stored Procedure to get crossings by gate status
DELIMITER //
CREATE PROCEDURE GetCrossingsByStatus(IN gstatus VARCHAR(20))
BEGIN
  SELECT * FROM LevelCrossings WHERE GateStatus = gstatus;
END //
DELIMITER ; -- SP (Stored Procedure)

-- 8. Call stored procedure for 'Operational' crossings
CALL GetCrossingsByStatus('Operational'); -- SP execution

-- 9. Window function to rank crossings by TrackID
SELECT CrossingID, Location, TrackID,
RANK() OVER(PARTITION BY TrackID ORDER BY CrossingID) AS RankByTrack
FROM LevelCrossings; -- WF (Window Function)

-- 10. Window function to get cumulative crossings per TrackID
SELECT CrossingID, Location, TrackID,
COUNT(*) OVER(PARTITION BY TrackID ORDER BY CrossingID) AS CumulativeCount
FROM LevelCrossings; -- WF (Window Function)

-- 11. Select crossings inspected between two dates
SELECT * FROM LevelCrossings WHERE LastInspection BETWEEN '2025-06-05' AND '2025-06-15'; -- D&TCL (Date & Time Condition)

-- 12. Select crossings with next inspection within next 10 days
SELECT * FROM LevelCrossings WHERE NextInspection <= DATE_ADD(CURDATE(), INTERVAL 10 DAY); -- D&TCL

-- 13. Trigger to set GateStatus after insert
DELIMITER //
CREATE TRIGGER AfterCrossingInsert
AFTER INSERT ON LevelCrossings
FOR EACH ROW
BEGIN
  UPDATE LevelCrossings SET GateStatus = 'Pending Inspection' WHERE CrossingID = NEW.CrossingID;
END //
DELIMITER ; -- Tri (Trigger)

-- 14. Create view for unmanned crossings
CREATE VIEW UnmannedCrossings AS
SELECT * FROM LevelCrossings WHERE CrossingType = 'Unmanned'; -- VC (View creation)

-- 15. Select from UnmannedCrossings view
SELECT * FROM UnmannedCrossings; -- VC (View usage)

-- 16. Subquery to find crossings on TrackID 1
SELECT * FROM LevelCrossings WHERE TrackID IN (SELECT DISTINCT TrackID FROM LevelCrossings WHERE TrackID = 1); -- SP (Subquery)

-- 17. Check if any crossings are under maintenance
SELECT EXISTS(SELECT 1 FROM LevelCrossings WHERE GateStatus = 'Under Maintenance') AS CrossingsUnderMaintenance; -- SP (Subquery)

-- 18. Group crossings by GateStatus and count
SELECT GateStatus, COUNT(*) AS CountPerStatus FROM LevelCrossings GROUP BY GateStatus; -- VC aggregate

-- 19. Find earliest next inspection date
SELECT MIN(NextInspection) AS EarliestNextInspection FROM LevelCrossings; -- VC aggregate

-- 20. Trigger to prevent deletion of operational crossings
DELIMITER //
CREATE TRIGGER PreventOperationalCrossingDelete
BEFORE DELETE ON LevelCrossings
FOR EACH ROW
BEGIN
  IF OLD.GateStatus = 'Operational' THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete crossings in Operational status';
  END IF;
END //
DELIMITER ; -- Tri (Trigger)


-- Table 23: ControlRooms 
CREATE TABLE ControlRooms (
    ControlRoomID INT PRIMARY KEY AUTO_INCREMENT,
    Location VARCHAR(100),
    InCharge VARCHAR(100),
    ContactNumber VARCHAR(15),
    Shift VARCHAR(20),
    NoOfStaff INT,
    EquipmentStatus VARCHAR(20),
    LastAudit DATE,
    NextAudit DATE,
    Remarks TEXT
);

INSERT INTO ControlRooms (Location, InCharge, ContactNumber, Shift, NoOfStaff, EquipmentStatus, LastAudit, NextAudit, Remarks) 
VALUES
('Delhi HQ', 'Arun Verma', '9890011111', 'Day', 15, 'Good', '2025-06-01', '2025-07-01', 'All systems fine'),
('Kolkata HQ', 'Shreya Ghosh', '9890022222', 'Night', 12, 'Good', '2025-06-02', '2025-07-02', 'Working fine'),
('Hyderabad HQ', 'Kiran Rao', '9890033333', 'Day', 10, 'Good', '2025-06-03', '2025-07-03', 'Ok'),
('Jaipur HQ', 'Pradeep Singh', '9890044444', 'Night', 8, 'Good', '2025-06-04', '2025-07-04', 'Ok'),
('Lucknow HQ', 'Neha Sharma', '9890055555', 'Day', 9, 'Good', '2025-06-05', '2025-07-05', 'Ok'),
('Patna HQ', 'Ravi Ranjan', '9890066666', 'Night', 7, 'Good', '2025-06-06', '2025-07-06', 'Ok'),
('Bhopal HQ', 'Sunil Patel', '9890077777', 'Day', 11, 'Good', '2025-06-07', '2025-07-07', 'Ok'),
('Ranchi HQ', 'Anita Kumari', '9890088888', 'Night', 6, 'Good', '2025-06-08', '2025-07-08', 'Ok'),
('Indore HQ', 'Sandeep Joshi', '9890099999', 'Day', 10, 'Good', '2025-06-09', '2025-07-09', 'Ok'),
('Surat HQ', 'Alok Mehta', '9890010000', 'Night', 8, 'Good', '2025-06-10', '2025-07-10', 'Ok'),
('Ambala HQ', 'Rohit Sharma', '9890011112', 'Day', 9, 'Good', '2025-06-11', '2025-07-11', 'Ok'),
('Asansol HQ', 'Dipak Ghosh', '9890011212', 'Night', 7, 'Good', '2025-06-12', '2025-07-12', 'Ok'),
('Nanded HQ', 'Vinay Kulkarni', '9890011313', 'Day', 6, 'Good', '2025-06-13', '2025-07-13', 'Ok'),
('Kota HQ', 'Rajesh Gupta', '9890011414', 'Night', 5, 'Good', '2025-06-14', '2025-07-14', 'Ok'),
('Varanasi HQ', 'Amit Tripathi', '9890011515', 'Day', 7, 'Good', '2025-06-15', '2025-07-15', 'Ok'),
('Muzaffarpur HQ', 'Pawan Kumar', '9890011616', 'Night', 8, 'Good', '2025-06-16', '2025-07-16', 'Ok'),
('Jabalpur HQ', 'Prashant Joshi', '9890011717', 'Day', 9, 'Good', '2025-06-17', '2025-07-17', 'Ok'),
('Dhanbad HQ', 'Vivek Sinha', '9890011818', 'Night', 7, 'Good', '2025-06-18', '2025-07-18', 'Ok'),
('Bhopal Sub', 'Shailendra Singh', '9890011919', 'Day', 8, 'Good', '2025-06-19', '2025-07-19', 'Ok'),
('Mumbai HQ', 'Ajay Malhotra', '9890012020', 'Night', 10, 'Good', '2025-06-20', '2025-07-20', 'Ok');

-- display table data
Select * from ControlRooms;

-- to delete values from table 
truncate table ControlRooms;

-- to delete table
drop table ControlRooms;

-- 1. View all control rooms
SELECT * FROM ControlRooms; -- VC (View Content)

-- 2. View control rooms with more than 8 staff
SELECT * FROM ControlRooms WHERE NoOfStaff > 8; -- VC with Condition

-- 3. Count of control rooms per shift
SELECT Shift, COUNT(*) AS CountPerShift FROM ControlRooms GROUP BY Shift; -- VC aggregate

-- 4. Update equipment status for a specific control room
UPDATE ControlRooms SET EquipmentStatus = 'Under Maintenance' WHERE ControlRoomID = 5; -- C (Command Update)

-- 5. Insert a new control room record
INSERT INTO ControlRooms (Location, InCharge, ContactNumber, Shift, NoOfStaff, EquipmentStatus, LastAudit, NextAudit, Remarks)
VALUES ('Guwahati HQ', 'Rohit Sharma', '9890012121', 'Day', 6, 'Good', '2025-07-01', '2025-08-01', 'Newly setup'); -- C (Command Insert)

-- 6. Delete a control room record
DELETE FROM ControlRooms WHERE ControlRoomID = 20; -- C (Command Delete)

-- 7. Stored Procedure to get control rooms by shift
DELIMITER //
CREATE PROCEDURE GetControlRoomsByShift(IN shft VARCHAR(20))
BEGIN
  SELECT * FROM ControlRooms WHERE Shift = shft;
END //
DELIMITER ; -- SP (Stored Procedure)

-- 8. Call stored procedure for 'Night' shift
CALL GetControlRoomsByShift('Night'); -- SP execution

-- 9. Window function to rank control rooms by staff
SELECT ControlRoomID, Location, NoOfStaff,
RANK() OVER(ORDER BY NoOfStaff DESC) AS RankByStaff
FROM ControlRooms; -- WF (Window Function)

-- 10. Window function to get cumulative staff per shift
SELECT ControlRoomID, Location, Shift, NoOfStaff,
SUM(NoOfStaff) OVER(PARTITION BY Shift ORDER BY ControlRoomID) AS CumulativeStaff
FROM ControlRooms; -- WF (Window Function)

-- 11. Select control rooms audited in June 2025
SELECT * FROM ControlRooms WHERE LastAudit BETWEEN '2025-06-01' AND '2025-06-30'; -- D&TCL (Date & Time Condition)

-- 12. Select control rooms with next audit within next 10 days
SELECT * FROM ControlRooms WHERE NextAudit <= DATE_ADD(CURDATE(), INTERVAL 10 DAY); -- D&TCL

-- 13. Trigger to set EquipmentStatus after insert
DELIMITER //
CREATE TRIGGER AfterControlRoomInsert
AFTER INSERT ON ControlRooms
FOR EACH ROW
BEGIN
  UPDATE ControlRooms SET EquipmentStatus = 'Pending Audit' WHERE ControlRoomID = NEW.ControlRoomID;
END //
DELIMITER ; -- Tri (Trigger)

-- 14. Create view for Day shift control rooms
CREATE VIEW DayShiftControlRooms AS
SELECT * FROM ControlRooms WHERE Shift = 'Day'; -- VC (View creation)

-- 15. Select from DayShiftControlRooms view
SELECT * FROM DayShiftControlRooms; -- VC (View usage)

-- 16. Subquery to find control rooms with more than average staff
SELECT * FROM ControlRooms WHERE NoOfStaff > (SELECT AVG(NoOfStaff) FROM ControlRooms); -- SP (Subquery)

-- 17. Check if any control rooms have EquipmentStatus 'Under Maintenance'
SELECT EXISTS(SELECT 1 FROM ControlRooms WHERE EquipmentStatus = 'Under Maintenance') AS RoomsUnderMaintenance; -- SP (Subquery)

-- 18. Group control rooms by EquipmentStatus and count
SELECT EquipmentStatus, COUNT(*) AS CountPerStatus FROM ControlRooms GROUP BY EquipmentStatus; -- VC aggregate

-- 19. Find earliest next audit date
SELECT MIN(NextAudit) AS EarliestNextAudit FROM ControlRooms; -- VC aggregate

-- 20. Trigger to prevent deletion of control rooms with Day shift
DELIMITER //
CREATE TRIGGER PreventDayShiftDelete
BEFORE DELETE ON ControlRooms
FOR EACH ROW
BEGIN
  IF OLD.Shift = 'Day' THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete Day shift control rooms';
  END IF;
END //
DELIMITER ; -- Tri (Trigger)


-- Table 24: Timetables
CREATE TABLE Timetables (
    TimetableID INT PRIMARY KEY AUTO_INCREMENT,
    TrainID INT,
    RouteID INT,
    DepartureStation VARCHAR(50),
    ArrivalStation VARCHAR(50),
    DepartureTime TIME,
    ArrivalTime TIME,
    Frequency VARCHAR(20),
    EffectiveFrom DATE,
    EffectiveTo DATE
);

INSERT INTO Timetables (TrainID, RouteID, DepartureStation, ArrivalStation, DepartureTime, ArrivalTime, Frequency, EffectiveFrom, EffectiveTo)
 VALUES
(101, 1, 'Delhi', 'Mumbai', '06:00:00', '18:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(102, 2, 'Kolkata', 'Chennai', '07:00:00', '19:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(103, 3, 'Hyderabad', 'Bengaluru', '08:00:00', '12:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(104, 4, 'Jaipur', 'Pune', '05:30:00', '16:30:00', 'Mon-Sat', '2025-07-01', '2025-12-31'),
(105, 5, 'Lucknow', 'Ahmedabad', '09:00:00', '21:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(106, 6, 'Patna', 'Guwahati', '10:00:00', '22:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(107, 7, 'Bhopal', 'Nagpur', '06:45:00', '12:45:00', 'Daily', '2025-07-01', '2025-12-31'),
(108, 8, 'Ranchi', 'Vijayawada', '07:30:00', '19:30:00', 'Daily', '2025-07-01', '2025-12-31'),
(109, 9, 'Indore', 'Coimbatore', '05:15:00', '20:15:00', 'Daily', '2025-07-01', '2025-12-31'),
(110, 10, 'Surat', 'Kochi', '04:30:00', '22:30:00', 'Daily', '2025-07-01', '2025-12-31'),
(111, 1, 'Delhi', 'Ambala', '09:00:00', '12:00:00', 'Mon-Fri', '2025-07-01', '2025-12-31'),
(112, 2, 'Kolkata', 'Asansol', '10:00:00', '13:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(113, 3, 'Hyderabad', 'Nanded', '06:00:00', '11:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(114, 4, 'Jaipur', 'Kota', '07:30:00', '10:30:00', 'Daily', '2025-07-01', '2025-12-31'),
(115, 5, 'Lucknow', 'Varanasi', '05:45:00', '10:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(116, 6, 'Patna', 'Muzaffarpur', '06:15:00', '08:45:00', 'Daily', '2025-07-01', '2025-12-31'),
(117, 7, 'Bhopal', 'Jabalpur', '07:00:00', '11:00:00', 'Daily', '2025-07-01', '2025-12-31'),
(118, 8, 'Ranchi', 'Dhanbad', '08:00:00', '10:30:00', 'Daily', '2025-07-01', '2025-12-31'),
(119, 9, 'Indore', 'Bhopal', '09:30:00', '11:30:00', 'Mon-Sat', '2025-07-01', '2025-12-31'),
(120, 10, 'Surat', 'Mumbai', '10:00:00', '14:00:00', 'Daily', '2025-07-01', '2025-12-31');

-- display table data
Select * from Timetables;

-- to delete values from table 
truncate table Timetables;

-- to delete table
drop table Timetables;

-- 1. View all timetables
SELECT * FROM Timetables; -- VC (View Content)

-- 2. View timetables for a specific train
SELECT * FROM Timetables WHERE TrainID = 101; -- VC with Condition

-- 3. Count of timetables per route
SELECT RouteID, COUNT(*) AS CountPerRoute FROM Timetables GROUP BY RouteID; -- VC aggregate

-- 4. Update frequency of a timetable
UPDATE Timetables SET Frequency = 'Mon-Fri' WHERE TimetableID = 102; -- C (Command Update)

-- 5. Insert a new timetable record
INSERT INTO Timetables (TrainID, RouteID, DepartureStation, ArrivalStation, DepartureTime, ArrivalTime, Frequency, EffectiveFrom, EffectiveTo)
VALUES (121, 11, 'Nagpur', 'Pune', '06:00:00', '12:00:00', 'Daily', '2025-08-01', '2025-12-31'); -- C (Command Insert)

-- 6. Delete a timetable record
DELETE FROM Timetables WHERE TimetableID = 120; -- C (Command Delete)

-- 7. Stored Procedure to get timetable by departure station
DELIMITER //
CREATE PROCEDURE GetTimetableByDeparture(IN depSt VARCHAR(50))
BEGIN
  SELECT * FROM Timetables WHERE DepartureStation = depSt;
END //
DELIMITER ; -- SP (Stored Procedure)

-- 8. Call stored procedure for 'Delhi'
CALL GetTimetableByDeparture('Delhi'); -- SP execution

-- 9. Window function to rank timetables by departure time
SELECT TimetableID, TrainID, DepartureStation, ArrivalStation,
RANK() OVER(ORDER BY DepartureTime ASC) AS RankByDeparture
FROM Timetables; -- WF (Window Function)

-- 10. Window function to get cumulative number of timetables per route
SELECT TimetableID, RouteID, DepartureStation,
COUNT(TimetableID) OVER(PARTITION BY RouteID ORDER BY TimetableID) AS CumulativePerRoute
FROM Timetables; -- WF (Window Function)

-- 11. Select timetables effective in July 2025
SELECT * FROM Timetables WHERE EffectiveFrom <= '2025-07-31' AND EffectiveTo >= '2025-07-01'; -- D&TCL (Date & Time Condition)

-- 12. Select timetables starting before 07:00 AM
SELECT * FROM Timetables WHERE DepartureTime < '07:00:00'; -- D&TCL (Time Condition)

-- 13. Trigger to update Frequency after insert
DELIMITER //
CREATE TRIGGER AfterTimetableInsert
AFTER INSERT ON Timetables
FOR EACH ROW
BEGIN
  IF NEW.Frequency IS NULL THEN
    UPDATE Timetables SET Frequency = 'Daily' WHERE TimetableID = NEW.TimetableID;
  END IF;
END //
DELIMITER ; -- Tri (Trigger)

-- 14. Create view for Daily timetables
CREATE VIEW DailyTimetables AS
SELECT * FROM Timetables WHERE Frequency = 'Daily'; -- VC (View creation)

-- 15. Select from DailyTimetables view
SELECT * FROM DailyTimetables; -- VC (View usage)

-- 16. Subquery to find timetables with duration more than average
SELECT *, TIMEDIFF(ArrivalTime, DepartureTime) AS Duration
FROM Timetables
WHERE TIMEDIFF(ArrivalTime, DepartureTime) > 
(SELECT SEC_TO_TIME(AVG(TIME_TO_SEC(TIMEDIFF(ArrivalTime, DepartureTime)))) FROM Timetables); -- SP (Subquery)

-- 17. Check if any timetable is Mon-Sat
SELECT EXISTS(SELECT 1 FROM Timetables WHERE Frequency = 'Mon-Sat') AS HasMonSat; -- SP (Subquery)

-- 18. Group timetables by Frequency and count
SELECT Frequency, COUNT(*) AS CountPerFrequency FROM Timetables GROUP BY Frequency; -- VC aggregate

-- 19. Find earliest departure time
SELECT MIN(DepartureTime) AS EarliestDeparture FROM Timetables; -- VC aggregate

-- 20. Trigger to prevent deletion of Daily frequency timetables
DELIMITER //
CREATE TRIGGER PreventDailyDelete
BEFORE DELETE ON Timetables
FOR EACH ROW
BEGIN
  IF OLD.Frequency = 'Daily' THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete Daily timetables';
  END IF;
END //
DELIMITER ; -- Tri (Trigger)


-- Table 25: Announcements
CREATE TABLE Announcements (
    AnnouncementID INT PRIMARY KEY AUTO_INCREMENT,
    Title VARCHAR(100),
    Description TEXT,
    Date DATE,
    Time TIME,
    Station VARCHAR(50),
    AffectedTrains VARCHAR(100),
    ValidFrom DATE,
    ValidTo DATE,
    Status VARCHAR(20)
);

INSERT INTO Announcements (Title, Description, Date, Time, Station, AffectedTrains, ValidFrom, ValidTo, Status)
 VALUES
('Track Maintenance', 'Track maintenance work at Delhi Yard.', '2025-07-01', '09:00:00', 'Delhi', '101, 111', '2025-07-01', '2025-07-05', 'Active'),
('Power Shutdown', 'Power shutdown for overhead wires.', '2025-07-02', '10:00:00', 'Kolkata', '102, 112', '2025-07-02', '2025-07-06', 'Active'),
('Signal Upgrade', 'Signal upgrade at Secunderabad.', '2025-07-03', '11:00:00', 'Hyderabad', '103, 113', '2025-07-03', '2025-07-07', 'Active'),
('Platform Closure', 'Platform 3 closed for repairs.', '2025-07-04', '12:00:00', 'Jaipur', '104, 114', '2025-07-04', '2025-07-08', 'Active'),
('Special Train', 'Special train added for festival.', '2025-07-05', '13:00:00', 'Lucknow', '105, 115', '2025-07-05', '2025-07-10', 'Active'),
('Catering Delay', 'Delay in catering services.', '2025-07-06', '14:00:00', 'Patna', '106, 116', '2025-07-06', '2025-07-09', 'Active'),
('Signal Failure', 'Temporary signal failure.', '2025-07-07', '15:00:00', 'Bhopal', '107, 117', '2025-07-07', '2025-07-12', 'Active'),
('Track Inspection', 'Track inspection schedule.', '2025-07-08', '16:00:00', 'Ranchi', '108, 118', '2025-07-08', '2025-07-14', 'Active'),
('Bridge Repair', 'Bridge repair near Indore.', '2025-07-09', '17:00:00', 'Indore', '109, 119', '2025-07-09', '2025-07-15', 'Active'),
('Signal Testing', 'Signal testing in Surat.', '2025-07-10', '18:00:00', 'Surat', '110, 120', '2025-07-10', '2025-07-16', 'Active'),
('Holiday Rush', 'Extra coaches for holiday.', '2025-07-11', '09:00:00', 'Delhi', '101, 111', '2025-07-11', '2025-07-17', 'Active'),
('New Route', 'New route introduced.', '2025-07-12', '10:00:00', 'Kolkata', '102, 112', '2025-07-12', '2025-07-18', 'Active'),
('Weather Alert', 'Heavy rains expected.', '2025-07-13', '11:00:00', 'Hyderabad', '103, 113', '2025-07-13', '2025-07-19', 'Active'),
('Staff Strike', 'Possible staff strike.', '2025-07-14', '12:00:00', 'Jaipur', '104, 114', '2025-07-14', '2025-07-20', 'Active'),
('Festival Extra', 'Extra trains for Diwali.', '2025-07-15', '13:00:00', 'Lucknow', '105, 115', '2025-07-15', '2025-07-21', 'Active'),
('VIP Movement', 'VIP movement on platform.', '2025-07-16', '14:00:00', 'Patna', '106, 116', '2025-07-16', '2025-07-22', 'Active'),
('Security Drill', 'Security drill at station.', '2025-07-17', '15:00:00', 'Bhopal', '107, 117', '2025-07-17', '2025-07-23', 'Active'),
('Coach Addition', 'Extra coaches attached.', '2025-07-18', '16:00:00', 'Ranchi', '108, 118', '2025-07-18', '2025-07-24', 'Active'),
('Track Block', 'Track block for work.', '2025-07-19', '17:00:00', 'Indore', '109, 119', '2025-07-19', '2025-07-25', 'Active'),
('Maintenance Notice', 'Scheduled maintenance.', '2025-07-20', '18:00:00', 'Surat', '110, 120', '2025-07-20', '2025-07-26', 'Active');

-- display table data
Select * from Announcements;

-- to delete values from table 
truncate table Announcements;

-- to delete table
drop table Announcements;

-- 1. View all announcements
SELECT * FROM Announcements; -- VC (View Content)

-- 2. View announcements for a specific station
SELECT * FROM Announcements WHERE Station = 'Delhi'; -- VC with Condition

-- 3. Count of announcements per station
SELECT Station, COUNT(*) AS AnnouncementCount FROM Announcements GROUP BY Station; -- VC aggregate

-- 4. Update status of an announcement
UPDATE Announcements SET Status = 'Inactive' WHERE AnnouncementID = 1; -- C (Command Update)

-- 5. Insert a new announcement
INSERT INTO Announcements (Title, Description, Date, Time, Station, AffectedTrains, ValidFrom, ValidTo, Status)
VALUES ('Maintenance Alert', 'Maintenance work at Pune', '2025-07-21', '09:00:00', 'Pune', '104,114', '2025-07-21', '2025-07-25', 'Active'); -- C (Command Insert)

-- 6. Delete an announcement
DELETE FROM Announcements WHERE AnnouncementID = 20; -- C (Command Delete)

-- 7. Stored Procedure to get announcements by station
DELIMITER //
CREATE PROCEDURE GetAnnouncementsByStation(IN st VARCHAR(50))
BEGIN
  SELECT * FROM Announcements WHERE Station = st;
END //
DELIMITER ; -- SP (Stored Procedure)

-- 8. Call stored procedure for 'Kolkata'
CALL GetAnnouncementsByStation('Kolkata'); -- SP execution

-- 9. Window function to rank announcements by date
SELECT AnnouncementID, Title, Station, Date,
RANK() OVER(ORDER BY Date ASC) AS RankByDate
FROM Announcements; -- WF (Window Function)

-- 10. Window function to count announcements per station cumulatively
SELECT AnnouncementID, Station, Date,
COUNT(AnnouncementID) OVER(PARTITION BY Station ORDER BY Date) AS CumulativeCount
FROM Announcements; -- WF (Window Function)

-- 11. Select announcements valid in July 2025
SELECT * FROM Announcements WHERE ValidFrom <= '2025-07-31' AND ValidTo >= '2025-07-01'; -- D&TCL (Date & Time Condition)

-- 12. Select announcements after 2 PM
SELECT * FROM Announcements WHERE Time > '14:00:00'; -- D&TCL (Time Condition)

-- 13. Trigger to auto-set Status to 'Active' after insert if null
DELIMITER //
CREATE TRIGGER AfterAnnouncementInsert
AFTER INSERT ON Announcements
FOR EACH ROW
BEGIN
  IF NEW.Status IS NULL THEN
    UPDATE Announcements SET Status = 'Active' WHERE AnnouncementID = NEW.AnnouncementID;
  END IF;
END //
DELIMITER ; -- Tri (Trigger)

-- 14. Create view for Active announcements
CREATE VIEW ActiveAnnouncements AS
SELECT * FROM Announcements WHERE Status = 'Active'; -- VC (View creation)

-- 15. Select from ActiveAnnouncements view
SELECT * FROM ActiveAnnouncements; -- VC (View usage)

-- 16. Subquery to find announcements affecting more than 2 trains
SELECT * FROM Announcements
WHERE CHAR_LENGTH(AffectedTrains) - CHAR_LENGTH(REPLACE(AffectedTrains, ',', '')) + 1 > 2; -- SP (Subquery)

-- 17. Check if any announcement is for 'Signal Upgrade'
SELECT EXISTS(SELECT 1 FROM Announcements WHERE Title = 'Signal Upgrade') AS HasSignalUpgrade; -- SP (Subquery)

-- 18. Group announcements by Status
SELECT Status, COUNT(*) AS CountPerStatus FROM Announcements GROUP BY Status; -- VC aggregate

-- 19. Find earliest announcement date
SELECT MIN(Date) AS EarliestAnnouncement FROM Announcements; -- VC aggregate

-- 20. Trigger to prevent deletion of Active announcements
DELIMITER //
CREATE TRIGGER PreventActiveDelete
BEFORE DELETE ON Announcements
FOR EACH ROW
BEGIN
  IF OLD.Status = 'Active' THEN
    SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Cannot delete Active announcements';
  END IF;
END //
DELIMITER ; -- Tri (Trigger)


